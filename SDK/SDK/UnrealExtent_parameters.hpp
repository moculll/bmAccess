#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnrealExtent

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UnrealExtent_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"
#include "MovieScene_structs.hpp"
#include "Niagara_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function UnrealExtent.GSE_RenderUtilFuncLib.GetSceneViewPreExposure
// 0x0010 (0x0010 - 0x0000)
struct GSE_RenderUtilFuncLib_GetSceneViewPreExposure final
{
public:
	class AActor*                                 WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_RenderUtilFuncLib_GetSceneViewPreExposure) == 0x000008, "Wrong alignment on GSE_RenderUtilFuncLib_GetSceneViewPreExposure");
//static_assert(sizeof(GSE_RenderUtilFuncLib_GetSceneViewPreExposure) == 0x000010, "Wrong size on GSE_RenderUtilFuncLib_GetSceneViewPreExposure");
//static_assert(offsetof(GSE_RenderUtilFuncLib_GetSceneViewPreExposure, WorldContext) == 0x000000, "Member 'GSE_RenderUtilFuncLib_GetSceneViewPreExposure::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_RenderUtilFuncLib_GetSceneViewPreExposure, ReturnValue) == 0x000008, "Member 'GSE_RenderUtilFuncLib_GetSceneViewPreExposure::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_RenderUtilFuncLib.MarkRenderStateDirty
// 0x0008 (0x0008 - 0x0000)
struct GSE_RenderUtilFuncLib_MarkRenderStateDirty final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_RenderUtilFuncLib_MarkRenderStateDirty) == 0x000008, "Wrong alignment on GSE_RenderUtilFuncLib_MarkRenderStateDirty");
//static_assert(sizeof(GSE_RenderUtilFuncLib_MarkRenderStateDirty) == 0x000008, "Wrong size on GSE_RenderUtilFuncLib_MarkRenderStateDirty");
//static_assert(offsetof(GSE_RenderUtilFuncLib_MarkRenderStateDirty, ActorComponent) == 0x000000, "Member 'GSE_RenderUtilFuncLib_MarkRenderStateDirty::ActorComponent' has a wrong offset!");

// Function UnrealExtent.GSE_RenderUtilFuncLib.OverrideSystemUserVariableSKMFilteredBones
// 0x0028 (0x0028 - 0x0000)
struct GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredBones final
{
public:
	class UNiagaraComponent*                      NiagaraSystem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OverrideName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OverrideFilteredBones;                             // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredBones) == 0x000008, "Wrong alignment on GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredBones");
//static_assert(sizeof(GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredBones) == 0x000028, "Wrong size on GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredBones");
//static_assert(offsetof(GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredBones, NiagaraSystem) == 0x000000, "Member 'GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredBones::NiagaraSystem' has a wrong offset!");
//static_assert(offsetof(GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredBones, OverrideName) == 0x000008, "Member 'GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredBones::OverrideName' has a wrong offset!");
//static_assert(offsetof(GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredBones, OverrideFilteredBones) == 0x000018, "Member 'GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredBones::OverrideFilteredBones' has a wrong offset!");

// Function UnrealExtent.GSE_RenderUtilFuncLib.OverrideSystemUserVariableSKMFilteredSockets
// 0x0028 (0x0028 - 0x0000)
struct GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredSockets final
{
public:
	class UNiagaraComponent*                      NiagaraSystem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OverrideName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OverrideFilteredSockets;                           // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredSockets) == 0x000008, "Wrong alignment on GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredSockets");
//static_assert(sizeof(GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredSockets) == 0x000028, "Wrong size on GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredSockets");
//static_assert(offsetof(GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredSockets, NiagaraSystem) == 0x000000, "Member 'GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredSockets::NiagaraSystem' has a wrong offset!");
//static_assert(offsetof(GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredSockets, OverrideName) == 0x000008, "Member 'GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredSockets::OverrideName' has a wrong offset!");
//static_assert(offsetof(GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredSockets, OverrideFilteredSockets) == 0x000018, "Member 'GSE_RenderUtilFuncLib_OverrideSystemUserVariableSKMFilteredSockets::OverrideFilteredSockets' has a wrong offset!");

// Function UnrealExtent.GSE_RenderUtilFuncLib.PlayCameraShake
// 0x0010 (0x0010 - 0x0000)
struct GSE_RenderUtilFuncLib_PlayCameraShake final
{
public:
	class UClass*                                 CameraShakeCls;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCameraManager*                   Camera;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_RenderUtilFuncLib_PlayCameraShake) == 0x000008, "Wrong alignment on GSE_RenderUtilFuncLib_PlayCameraShake");
//static_assert(sizeof(GSE_RenderUtilFuncLib_PlayCameraShake) == 0x000010, "Wrong size on GSE_RenderUtilFuncLib_PlayCameraShake");
//static_assert(offsetof(GSE_RenderUtilFuncLib_PlayCameraShake, CameraShakeCls) == 0x000000, "Member 'GSE_RenderUtilFuncLib_PlayCameraShake::CameraShakeCls' has a wrong offset!");
//static_assert(offsetof(GSE_RenderUtilFuncLib_PlayCameraShake, Camera) == 0x000008, "Member 'GSE_RenderUtilFuncLib_PlayCameraShake::Camera' has a wrong offset!");

// Function UnrealExtent.GSE_RenderUtilFuncLib.SetRenderCustomDepth
// 0x0010 (0x0010 - 0x0000)
struct GSE_RenderUtilFuncLib_SetRenderCustomDepth final
{
public:
	class AActor*                                 AA;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_RenderUtilFuncLib_SetRenderCustomDepth) == 0x000008, "Wrong alignment on GSE_RenderUtilFuncLib_SetRenderCustomDepth");
//static_assert(sizeof(GSE_RenderUtilFuncLib_SetRenderCustomDepth) == 0x000010, "Wrong size on GSE_RenderUtilFuncLib_SetRenderCustomDepth");
//static_assert(offsetof(GSE_RenderUtilFuncLib_SetRenderCustomDepth, AA) == 0x000000, "Member 'GSE_RenderUtilFuncLib_SetRenderCustomDepth::AA' has a wrong offset!");
//static_assert(offsetof(GSE_RenderUtilFuncLib_SetRenderCustomDepth, bValue) == 0x000008, "Member 'GSE_RenderUtilFuncLib_SetRenderCustomDepth::bValue' has a wrong offset!");

// Function UnrealExtent.AudioVisualizeBox.SetAudioInfo
// 0x0020 (0x0020 - 0x0000)
struct AudioVisualizeBox_SetAudioInfo final
{
public:
	struct FVector2D                              InLoudness;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 InConstantInfo;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AudioVisualizeBox_SetAudioInfo) == 0x000008, "Wrong alignment on AudioVisualizeBox_SetAudioInfo");
//static_assert(sizeof(AudioVisualizeBox_SetAudioInfo) == 0x000020, "Wrong size on AudioVisualizeBox_SetAudioInfo");
//static_assert(offsetof(AudioVisualizeBox_SetAudioInfo, InLoudness) == 0x000000, "Member 'AudioVisualizeBox_SetAudioInfo::InLoudness' has a wrong offset!");
//static_assert(offsetof(AudioVisualizeBox_SetAudioInfo, InConstantInfo) == 0x000010, "Member 'AudioVisualizeBox_SetAudioInfo::InConstantInfo' has a wrong offset!");

// Function UnrealExtent.AudioVisualizeBox.SetFreqInfo
// 0x0010 (0x0010 - 0x0000)
struct AudioVisualizeBox_SetFreqInfo final
{
public:
	TArray<float>                                 InConstantInfo;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AudioVisualizeBox_SetFreqInfo) == 0x000008, "Wrong alignment on AudioVisualizeBox_SetFreqInfo");
//static_assert(sizeof(AudioVisualizeBox_SetFreqInfo) == 0x000010, "Wrong size on AudioVisualizeBox_SetFreqInfo");
//static_assert(offsetof(AudioVisualizeBox_SetFreqInfo, InConstantInfo) == 0x000000, "Member 'AudioVisualizeBox_SetFreqInfo::InConstantInfo' has a wrong offset!");

// Function UnrealExtent.AudioVisualizeBox.SetFreqNum
// 0x0004 (0x0004 - 0x0000)
struct AudioVisualizeBox_SetFreqNum final
{
public:
	int32                                         InFreqNum;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AudioVisualizeBox_SetFreqNum) == 0x000004, "Wrong alignment on AudioVisualizeBox_SetFreqNum");
//static_assert(sizeof(AudioVisualizeBox_SetFreqNum) == 0x000004, "Wrong size on AudioVisualizeBox_SetFreqNum");
//static_assert(offsetof(AudioVisualizeBox_SetFreqNum, InFreqNum) == 0x000000, "Member 'AudioVisualizeBox_SetFreqNum::InFreqNum' has a wrong offset!");

// Function UnrealExtent.AudioVisualizeBox.SetLoudnessInfo
// 0x0010 (0x0010 - 0x0000)
struct AudioVisualizeBox_SetLoudnessInfo final
{
public:
	struct FVector2D                              InLoudness;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AudioVisualizeBox_SetLoudnessInfo) == 0x000008, "Wrong alignment on AudioVisualizeBox_SetLoudnessInfo");
//static_assert(sizeof(AudioVisualizeBox_SetLoudnessInfo) == 0x000010, "Wrong size on AudioVisualizeBox_SetLoudnessInfo");
//static_assert(offsetof(AudioVisualizeBox_SetLoudnessInfo, InLoudness) == 0x000000, "Member 'AudioVisualizeBox_SetLoudnessInfo::InLoudness' has a wrong offset!");

// Function UnrealExtent.AlphaScanButton.SetAdvancedHitAlpha
// 0x0004 (0x0004 - 0x0000)
struct AlphaScanButton_SetAdvancedHitAlpha final
{
public:
	int32                                         InAlpha;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AlphaScanButton_SetAdvancedHitAlpha) == 0x000004, "Wrong alignment on AlphaScanButton_SetAdvancedHitAlpha");
//static_assert(sizeof(AlphaScanButton_SetAdvancedHitAlpha) == 0x000004, "Wrong size on AlphaScanButton_SetAdvancedHitAlpha");
//static_assert(offsetof(AlphaScanButton_SetAdvancedHitAlpha, InAlpha) == 0x000000, "Member 'AlphaScanButton_SetAdvancedHitAlpha::InAlpha' has a wrong offset!");

// Function UnrealExtent.AlphaScanButton.SetAdvancedHitTexture
// 0x0008 (0x0008 - 0x0000)
struct AlphaScanButton_SetAdvancedHitTexture final
{
public:
	class UTexture2D*                             InTexture;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AlphaScanButton_SetAdvancedHitTexture) == 0x000008, "Wrong alignment on AlphaScanButton_SetAdvancedHitTexture");
//static_assert(sizeof(AlphaScanButton_SetAdvancedHitTexture) == 0x000008, "Wrong size on AlphaScanButton_SetAdvancedHitTexture");
//static_assert(offsetof(AlphaScanButton_SetAdvancedHitTexture, InTexture) == 0x000000, "Member 'AlphaScanButton_SetAdvancedHitTexture::InTexture' has a wrong offset!");

// Function UnrealExtent.AudioVisualizeUtil.OnAudioPlaybackPercentCallback
// 0x0010 (0x0010 - 0x0000)
struct AudioVisualizeUtil_OnAudioPlaybackPercentCallback final
{
public:
	const class USoundWave*                       SoundWave;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AudioVisualizeUtil_OnAudioPlaybackPercentCallback) == 0x000008, "Wrong alignment on AudioVisualizeUtil_OnAudioPlaybackPercentCallback");
//static_assert(sizeof(AudioVisualizeUtil_OnAudioPlaybackPercentCallback) == 0x000010, "Wrong size on AudioVisualizeUtil_OnAudioPlaybackPercentCallback");
//static_assert(offsetof(AudioVisualizeUtil_OnAudioPlaybackPercentCallback, SoundWave) == 0x000000, "Member 'AudioVisualizeUtil_OnAudioPlaybackPercentCallback::SoundWave' has a wrong offset!");
//static_assert(offsetof(AudioVisualizeUtil_OnAudioPlaybackPercentCallback, Percent) == 0x000008, "Member 'AudioVisualizeUtil_OnAudioPlaybackPercentCallback::Percent' has a wrong offset!");

// Function UnrealExtent.GSE_GridlyFuncLib.GetSupportCultures
// 0x0010 (0x0010 - 0x0000)
struct GSE_GridlyFuncLib_GetSupportCultures final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_GridlyFuncLib_GetSupportCultures) == 0x000008, "Wrong alignment on GSE_GridlyFuncLib_GetSupportCultures");
//static_assert(sizeof(GSE_GridlyFuncLib_GetSupportCultures) == 0x000010, "Wrong size on GSE_GridlyFuncLib_GetSupportCultures");
//static_assert(offsetof(GSE_GridlyFuncLib_GetSupportCultures, ReturnValue) == 0x000000, "Member 'GSE_GridlyFuncLib_GetSupportCultures::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_GridlyFuncLib.RequestPage
// 0x0008 (0x0008 - 0x0000)
struct GSE_GridlyFuncLib_RequestPage final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_GridlyFuncLib_RequestPage) == 0x000008, "Wrong alignment on GSE_GridlyFuncLib_RequestPage");
//static_assert(sizeof(GSE_GridlyFuncLib_RequestPage) == 0x000008, "Wrong size on GSE_GridlyFuncLib_RequestPage");
//static_assert(offsetof(GSE_GridlyFuncLib_RequestPage, Obj) == 0x000000, "Member 'GSE_GridlyFuncLib_RequestPage::Obj' has a wrong offset!");

// Function UnrealExtent.AutoMovementMonitor.CheckHitRotation
// 0x0018 (0x0018 - 0x0000)
struct AutoMovementMonitor_CheckHitRotation final
{
public:
	struct FRotator                               InRotator;                                         // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementMonitor_CheckHitRotation) == 0x000008, "Wrong alignment on AutoMovementMonitor_CheckHitRotation");
//static_assert(sizeof(AutoMovementMonitor_CheckHitRotation) == 0x000018, "Wrong size on AutoMovementMonitor_CheckHitRotation");
//static_assert(offsetof(AutoMovementMonitor_CheckHitRotation, InRotator) == 0x000000, "Member 'AutoMovementMonitor_CheckHitRotation::InRotator' has a wrong offset!");

// Function UnrealExtent.AutoMovementMonitor.CreatePointInstances
// 0x0010 (0x0010 - 0x0000)
struct AutoMovementMonitor_CreatePointInstances final
{
public:
	TArray<struct FVector>                        InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementMonitor_CreatePointInstances) == 0x000008, "Wrong alignment on AutoMovementMonitor_CreatePointInstances");
//static_assert(sizeof(AutoMovementMonitor_CreatePointInstances) == 0x000010, "Wrong size on AutoMovementMonitor_CreatePointInstances");
//static_assert(offsetof(AutoMovementMonitor_CreatePointInstances, InPoints) == 0x000000, "Member 'AutoMovementMonitor_CreatePointInstances::InPoints' has a wrong offset!");

// Function UnrealExtent.AutoMovementMonitor.DrawStatOnHeatmap
// 0x0018 (0x0018 - 0x0000)
struct AutoMovementMonitor_DrawStatOnHeatmap final
{
public:
	class FString                                 InStatName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTileCount;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AutoMovementMonitor_DrawStatOnHeatmap) == 0x000008, "Wrong alignment on AutoMovementMonitor_DrawStatOnHeatmap");
//static_assert(sizeof(AutoMovementMonitor_DrawStatOnHeatmap) == 0x000018, "Wrong size on AutoMovementMonitor_DrawStatOnHeatmap");
//static_assert(offsetof(AutoMovementMonitor_DrawStatOnHeatmap, InStatName) == 0x000000, "Member 'AutoMovementMonitor_DrawStatOnHeatmap::InStatName' has a wrong offset!");
//static_assert(offsetof(AutoMovementMonitor_DrawStatOnHeatmap, InTileCount) == 0x000010, "Member 'AutoMovementMonitor_DrawStatOnHeatmap::InTileCount' has a wrong offset!");

// Function UnrealExtent.AutoMovementMonitor.GetPointExecutionDurationInfo
// 0x0018 (0x0018 - 0x0000)
struct AutoMovementMonitor_GetPointExecutionDurationInfo final
{
public:
	int64                                         InStartTimestamp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementMonitor_GetPointExecutionDurationInfo) == 0x000008, "Wrong alignment on AutoMovementMonitor_GetPointExecutionDurationInfo");
//static_assert(sizeof(AutoMovementMonitor_GetPointExecutionDurationInfo) == 0x000018, "Wrong size on AutoMovementMonitor_GetPointExecutionDurationInfo");
//static_assert(offsetof(AutoMovementMonitor_GetPointExecutionDurationInfo, InStartTimestamp) == 0x000000, "Member 'AutoMovementMonitor_GetPointExecutionDurationInfo::InStartTimestamp' has a wrong offset!");
//static_assert(offsetof(AutoMovementMonitor_GetPointExecutionDurationInfo, ReturnValue) == 0x000008, "Member 'AutoMovementMonitor_GetPointExecutionDurationInfo::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementMonitor.GetRotationIncrement
// 0x0088 (0x0088 - 0x0000)
struct AutoMovementMonitor_GetRotationIncrement final
{
public:
	struct FVector                                InRotatorMask;                                     // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAutoMovementViewingPattern            ViewingPattern;                                    // 0x0018(0x0058)(Parm, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0070(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementMonitor_GetRotationIncrement) == 0x000008, "Wrong alignment on AutoMovementMonitor_GetRotationIncrement");
//static_assert(sizeof(AutoMovementMonitor_GetRotationIncrement) == 0x000088, "Wrong size on AutoMovementMonitor_GetRotationIncrement");
//static_assert(offsetof(AutoMovementMonitor_GetRotationIncrement, InRotatorMask) == 0x000000, "Member 'AutoMovementMonitor_GetRotationIncrement::InRotatorMask' has a wrong offset!");
//static_assert(offsetof(AutoMovementMonitor_GetRotationIncrement, ViewingPattern) == 0x000018, "Member 'AutoMovementMonitor_GetRotationIncrement::ViewingPattern' has a wrong offset!");
//static_assert(offsetof(AutoMovementMonitor_GetRotationIncrement, ReturnValue) == 0x000070, "Member 'AutoMovementMonitor_GetRotationIncrement::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementMonitor.IncreaseViewingRotation
// 0x0002 (0x0002 - 0x0000)
struct AutoMovementMonitor_IncreaseViewingRotation final
{
public:
	ERotateType                                   RotateType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProxyCall;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementMonitor_IncreaseViewingRotation) == 0x000001, "Wrong alignment on AutoMovementMonitor_IncreaseViewingRotation");
//static_assert(sizeof(AutoMovementMonitor_IncreaseViewingRotation) == 0x000002, "Wrong size on AutoMovementMonitor_IncreaseViewingRotation");
//static_assert(offsetof(AutoMovementMonitor_IncreaseViewingRotation, RotateType) == 0x000000, "Member 'AutoMovementMonitor_IncreaseViewingRotation::RotateType' has a wrong offset!");
//static_assert(offsetof(AutoMovementMonitor_IncreaseViewingRotation, bProxyCall) == 0x000001, "Member 'AutoMovementMonitor_IncreaseViewingRotation::bProxyCall' has a wrong offset!");

// Function UnrealExtent.AutoMovementMonitor.ProcessAutoMovement
// 0x0030 (0x0030 - 0x0000)
struct AutoMovementMonitor_ProcessAutoMovement final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotator;                                         // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementMonitor_ProcessAutoMovement) == 0x000008, "Wrong alignment on AutoMovementMonitor_ProcessAutoMovement");
//static_assert(sizeof(AutoMovementMonitor_ProcessAutoMovement) == 0x000030, "Wrong size on AutoMovementMonitor_ProcessAutoMovement");
//static_assert(offsetof(AutoMovementMonitor_ProcessAutoMovement, InLocation) == 0x000000, "Member 'AutoMovementMonitor_ProcessAutoMovement::InLocation' has a wrong offset!");
//static_assert(offsetof(AutoMovementMonitor_ProcessAutoMovement, InRotator) == 0x000018, "Member 'AutoMovementMonitor_ProcessAutoMovement::InRotator' has a wrong offset!");

// Function UnrealExtent.AutoMovementMonitor.SetSparseVersionEnabled
// 0x0001 (0x0001 - 0x0000)
struct AutoMovementMonitor_SetSparseVersionEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementMonitor_SetSparseVersionEnabled) == 0x000001, "Wrong alignment on AutoMovementMonitor_SetSparseVersionEnabled");
//static_assert(sizeof(AutoMovementMonitor_SetSparseVersionEnabled) == 0x000001, "Wrong size on AutoMovementMonitor_SetSparseVersionEnabled");
//static_assert(offsetof(AutoMovementMonitor_SetSparseVersionEnabled, bEnabled) == 0x000000, "Member 'AutoMovementMonitor_SetSparseVersionEnabled::bEnabled' has a wrong offset!");

// Function UnrealExtent.AutoMovementMonitor.SwitchToVirtualPawn
// 0x0020 (0x0020 - 0x0000)
struct AutoMovementMonitor_SwitchToVirtualPawn final
{
public:
	class UClass*                                 VirtualPlayerBaseClass;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawningOffset;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementMonitor_SwitchToVirtualPawn) == 0x000008, "Wrong alignment on AutoMovementMonitor_SwitchToVirtualPawn");
//static_assert(sizeof(AutoMovementMonitor_SwitchToVirtualPawn) == 0x000020, "Wrong size on AutoMovementMonitor_SwitchToVirtualPawn");
//static_assert(offsetof(AutoMovementMonitor_SwitchToVirtualPawn, VirtualPlayerBaseClass) == 0x000000, "Member 'AutoMovementMonitor_SwitchToVirtualPawn::VirtualPlayerBaseClass' has a wrong offset!");
//static_assert(offsetof(AutoMovementMonitor_SwitchToVirtualPawn, SpawningOffset) == 0x000008, "Member 'AutoMovementMonitor_SwitchToVirtualPawn::SpawningOffset' has a wrong offset!");

// Function UnrealExtent.AutoMovementMonitor.TransportViewingPosition
// 0x0038 (0x0038 - 0x0000)
struct AutoMovementMonitor_TransportViewingPosition final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotator;                                         // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bProxyCall;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AutoMovementMonitor_TransportViewingPosition) == 0x000008, "Wrong alignment on AutoMovementMonitor_TransportViewingPosition");
//static_assert(sizeof(AutoMovementMonitor_TransportViewingPosition) == 0x000038, "Wrong size on AutoMovementMonitor_TransportViewingPosition");
//static_assert(offsetof(AutoMovementMonitor_TransportViewingPosition, InLocation) == 0x000000, "Member 'AutoMovementMonitor_TransportViewingPosition::InLocation' has a wrong offset!");
//static_assert(offsetof(AutoMovementMonitor_TransportViewingPosition, InRotator) == 0x000018, "Member 'AutoMovementMonitor_TransportViewingPosition::InRotator' has a wrong offset!");
//static_assert(offsetof(AutoMovementMonitor_TransportViewingPosition, bProxyCall) == 0x000030, "Member 'AutoMovementMonitor_TransportViewingPosition::bProxyCall' has a wrong offset!");

// Function UnrealExtent.AutoMovementMonitor.CheckAutoMovementCompleted
// 0x0001 (0x0001 - 0x0000)
struct AutoMovementMonitor_CheckAutoMovementCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementMonitor_CheckAutoMovementCompleted) == 0x000001, "Wrong alignment on AutoMovementMonitor_CheckAutoMovementCompleted");
//static_assert(sizeof(AutoMovementMonitor_CheckAutoMovementCompleted) == 0x000001, "Wrong size on AutoMovementMonitor_CheckAutoMovementCompleted");
//static_assert(offsetof(AutoMovementMonitor_CheckAutoMovementCompleted, ReturnValue) == 0x000000, "Member 'AutoMovementMonitor_CheckAutoMovementCompleted::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementMonitor.CheckHitLocation
// 0x0020 (0x0020 - 0x0000)
struct AutoMovementMonitor_CheckHitLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AutoMovementMonitor_CheckHitLocation) == 0x000008, "Wrong alignment on AutoMovementMonitor_CheckHitLocation");
//static_assert(sizeof(AutoMovementMonitor_CheckHitLocation) == 0x000020, "Wrong size on AutoMovementMonitor_CheckHitLocation");
//static_assert(offsetof(AutoMovementMonitor_CheckHitLocation, InLocation) == 0x000000, "Member 'AutoMovementMonitor_CheckHitLocation::InLocation' has a wrong offset!");
//static_assert(offsetof(AutoMovementMonitor_CheckHitLocation, ReturnValue) == 0x000018, "Member 'AutoMovementMonitor_CheckHitLocation::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementMonitor.HasCompletedPitchingObservation
// 0x0001 (0x0001 - 0x0000)
struct AutoMovementMonitor_HasCompletedPitchingObservation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementMonitor_HasCompletedPitchingObservation) == 0x000001, "Wrong alignment on AutoMovementMonitor_HasCompletedPitchingObservation");
//static_assert(sizeof(AutoMovementMonitor_HasCompletedPitchingObservation) == 0x000001, "Wrong size on AutoMovementMonitor_HasCompletedPitchingObservation");
//static_assert(offsetof(AutoMovementMonitor_HasCompletedPitchingObservation, ReturnValue) == 0x000000, "Member 'AutoMovementMonitor_HasCompletedPitchingObservation::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementMonitor.HasCompletedYawingObservation
// 0x0001 (0x0001 - 0x0000)
struct AutoMovementMonitor_HasCompletedYawingObservation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementMonitor_HasCompletedYawingObservation) == 0x000001, "Wrong alignment on AutoMovementMonitor_HasCompletedYawingObservation");
//static_assert(sizeof(AutoMovementMonitor_HasCompletedYawingObservation) == 0x000001, "Wrong size on AutoMovementMonitor_HasCompletedYawingObservation");
//static_assert(offsetof(AutoMovementMonitor_HasCompletedYawingObservation, ReturnValue) == 0x000000, "Member 'AutoMovementMonitor_HasCompletedYawingObservation::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.AppendGeneralStatisticsToCapturedReport
// 0x0018 (0x0018 - 0x0000)
struct AutoMovementUtil_AppendGeneralStatisticsToCapturedReport final
{
public:
	class FString                                 InFilename;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MetricsNum;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointNum;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementUtil_AppendGeneralStatisticsToCapturedReport) == 0x000008, "Wrong alignment on AutoMovementUtil_AppendGeneralStatisticsToCapturedReport");
//static_assert(sizeof(AutoMovementUtil_AppendGeneralStatisticsToCapturedReport) == 0x000018, "Wrong size on AutoMovementUtil_AppendGeneralStatisticsToCapturedReport");
//static_assert(offsetof(AutoMovementUtil_AppendGeneralStatisticsToCapturedReport, InFilename) == 0x000000, "Member 'AutoMovementUtil_AppendGeneralStatisticsToCapturedReport::InFilename' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_AppendGeneralStatisticsToCapturedReport, MetricsNum) == 0x000010, "Member 'AutoMovementUtil_AppendGeneralStatisticsToCapturedReport::MetricsNum' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_AppendGeneralStatisticsToCapturedReport, PointNum) == 0x000014, "Member 'AutoMovementUtil_AppendGeneralStatisticsToCapturedReport::PointNum' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.AppendHeaderToCapturedReport
// 0x0020 (0x0020 - 0x0000)
struct AutoMovementUtil_AppendHeaderToCapturedReport final
{
public:
	TArray<class FString>                         CapturedInfoNameList;                              // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InFilename;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementUtil_AppendHeaderToCapturedReport) == 0x000008, "Wrong alignment on AutoMovementUtil_AppendHeaderToCapturedReport");
//static_assert(sizeof(AutoMovementUtil_AppendHeaderToCapturedReport) == 0x000020, "Wrong size on AutoMovementUtil_AppendHeaderToCapturedReport");
//static_assert(offsetof(AutoMovementUtil_AppendHeaderToCapturedReport, CapturedInfoNameList) == 0x000000, "Member 'AutoMovementUtil_AppendHeaderToCapturedReport::CapturedInfoNameList' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_AppendHeaderToCapturedReport, InFilename) == 0x000010, "Member 'AutoMovementUtil_AppendHeaderToCapturedReport::InFilename' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.AppendOfflinePathPoints
// 0x0020 (0x0020 - 0x0000)
struct AutoMovementUtil_AppendOfflinePathPoints final
{
public:
	TArray<struct FVector>                        InPoints;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InFilePathUnderProjFolder;                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementUtil_AppendOfflinePathPoints) == 0x000008, "Wrong alignment on AutoMovementUtil_AppendOfflinePathPoints");
//static_assert(sizeof(AutoMovementUtil_AppendOfflinePathPoints) == 0x000020, "Wrong size on AutoMovementUtil_AppendOfflinePathPoints");
//static_assert(offsetof(AutoMovementUtil_AppendOfflinePathPoints, InPoints) == 0x000000, "Member 'AutoMovementUtil_AppendOfflinePathPoints::InPoints' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_AppendOfflinePathPoints, InFilePathUnderProjFolder) == 0x000010, "Member 'AutoMovementUtil_AppendOfflinePathPoints::InFilePathUnderProjFolder' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.ExportCapturedInfoBatch
// 0x0030 (0x0030 - 0x0000)
struct AutoMovementUtil_ExportCapturedInfoBatch final
{
public:
	int32                                         BatchSize;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPointNum;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGSPathPointStatInfo>           InPathPointStatsInfo;                              // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InFilename;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastBatch;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputHeader;                                     // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AutoMovementUtil_ExportCapturedInfoBatch) == 0x000008, "Wrong alignment on AutoMovementUtil_ExportCapturedInfoBatch");
//static_assert(sizeof(AutoMovementUtil_ExportCapturedInfoBatch) == 0x000030, "Wrong size on AutoMovementUtil_ExportCapturedInfoBatch");
//static_assert(offsetof(AutoMovementUtil_ExportCapturedInfoBatch, BatchSize) == 0x000000, "Member 'AutoMovementUtil_ExportCapturedInfoBatch::BatchSize' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_ExportCapturedInfoBatch, TotalPointNum) == 0x000004, "Member 'AutoMovementUtil_ExportCapturedInfoBatch::TotalPointNum' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_ExportCapturedInfoBatch, InPathPointStatsInfo) == 0x000008, "Member 'AutoMovementUtil_ExportCapturedInfoBatch::InPathPointStatsInfo' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_ExportCapturedInfoBatch, InFilename) == 0x000018, "Member 'AutoMovementUtil_ExportCapturedInfoBatch::InFilename' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_ExportCapturedInfoBatch, bLastBatch) == 0x000028, "Member 'AutoMovementUtil_ExportCapturedInfoBatch::bLastBatch' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_ExportCapturedInfoBatch, bOutputHeader) == 0x000029, "Member 'AutoMovementUtil_ExportCapturedInfoBatch::bOutputHeader' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_ExportCapturedInfoBatch, ReturnValue) == 0x00002A, "Member 'AutoMovementUtil_ExportCapturedInfoBatch::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.ExportStatsCapturedReport
// 0x0028 (0x0028 - 0x0000)
struct AutoMovementUtil_ExportStatsCapturedReport final
{
public:
	TArray<struct FGSPathPointStatInfo>           InPathPointStatsInfo;                              // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InFilename;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppend;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputHeader;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AutoMovementUtil_ExportStatsCapturedReport) == 0x000008, "Wrong alignment on AutoMovementUtil_ExportStatsCapturedReport");
//static_assert(sizeof(AutoMovementUtil_ExportStatsCapturedReport) == 0x000028, "Wrong size on AutoMovementUtil_ExportStatsCapturedReport");
//static_assert(offsetof(AutoMovementUtil_ExportStatsCapturedReport, InPathPointStatsInfo) == 0x000000, "Member 'AutoMovementUtil_ExportStatsCapturedReport::InPathPointStatsInfo' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_ExportStatsCapturedReport, InFilename) == 0x000010, "Member 'AutoMovementUtil_ExportStatsCapturedReport::InFilename' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_ExportStatsCapturedReport, bAppend) == 0x000020, "Member 'AutoMovementUtil_ExportStatsCapturedReport::bAppend' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_ExportStatsCapturedReport, bOutputHeader) == 0x000021, "Member 'AutoMovementUtil_ExportStatsCapturedReport::bOutputHeader' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.ExtractDateTimeInfo
// 0x0020 (0x0020 - 0x0000)
struct AutoMovementUtil_ExtractDateTimeInfo final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementUtil_ExtractDateTimeInfo) == 0x000008, "Wrong alignment on AutoMovementUtil_ExtractDateTimeInfo");
//static_assert(sizeof(AutoMovementUtil_ExtractDateTimeInfo) == 0x000020, "Wrong size on AutoMovementUtil_ExtractDateTimeInfo");
//static_assert(offsetof(AutoMovementUtil_ExtractDateTimeInfo, InString) == 0x000000, "Member 'AutoMovementUtil_ExtractDateTimeInfo::InString' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_ExtractDateTimeInfo, ReturnValue) == 0x000010, "Member 'AutoMovementUtil_ExtractDateTimeInfo::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.FormatTimeAuto
// 0x0020 (0x0020 - 0x0000)
struct AutoMovementUtil_FormatTimeAuto final
{
public:
	double                                        InDuration;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDigits;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementUtil_FormatTimeAuto) == 0x000008, "Wrong alignment on AutoMovementUtil_FormatTimeAuto");
//static_assert(sizeof(AutoMovementUtil_FormatTimeAuto) == 0x000020, "Wrong size on AutoMovementUtil_FormatTimeAuto");
//static_assert(offsetof(AutoMovementUtil_FormatTimeAuto, InDuration) == 0x000000, "Member 'AutoMovementUtil_FormatTimeAuto::InDuration' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_FormatTimeAuto, NumDigits) == 0x000008, "Member 'AutoMovementUtil_FormatTimeAuto::NumDigits' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_FormatTimeAuto, ReturnValue) == 0x000010, "Member 'AutoMovementUtil_FormatTimeAuto::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.FormatTimeSeconds
// 0x0018 (0x0018 - 0x0000)
struct AutoMovementUtil_FormatTimeSeconds final
{
public:
	float                                         InDuration;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementUtil_FormatTimeSeconds) == 0x000008, "Wrong alignment on AutoMovementUtil_FormatTimeSeconds");
//static_assert(sizeof(AutoMovementUtil_FormatTimeSeconds) == 0x000018, "Wrong size on AutoMovementUtil_FormatTimeSeconds");
//static_assert(offsetof(AutoMovementUtil_FormatTimeSeconds, InDuration) == 0x000000, "Member 'AutoMovementUtil_FormatTimeSeconds::InDuration' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_FormatTimeSeconds, ReturnValue) == 0x000008, "Member 'AutoMovementUtil_FormatTimeSeconds::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.FromTimestamp
// 0x0010 (0x0010 - 0x0000)
struct AutoMovementUtil_FromTimestamp final
{
public:
	int64                                         Time;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementUtil_FromTimestamp) == 0x000008, "Wrong alignment on AutoMovementUtil_FromTimestamp");
//static_assert(sizeof(AutoMovementUtil_FromTimestamp) == 0x000010, "Wrong size on AutoMovementUtil_FromTimestamp");
//static_assert(offsetof(AutoMovementUtil_FromTimestamp, Time) == 0x000000, "Member 'AutoMovementUtil_FromTimestamp::Time' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_FromTimestamp, ReturnValue) == 0x000008, "Member 'AutoMovementUtil_FromTimestamp::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.GetCurPointProcessedMetricsMap
// 0x00A0 (0x00A0 - 0x0000)
struct AutoMovementUtil_GetCurPointProcessedMetricsMap final
{
public:
	struct FCapturedInfoArrayPerPoint             InCapturedInfoPerPoint;                            // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    ReturnValue;                                       // 0x0050(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementUtil_GetCurPointProcessedMetricsMap) == 0x000008, "Wrong alignment on AutoMovementUtil_GetCurPointProcessedMetricsMap");
//static_assert(sizeof(AutoMovementUtil_GetCurPointProcessedMetricsMap) == 0x0000A0, "Wrong size on AutoMovementUtil_GetCurPointProcessedMetricsMap");
//static_assert(offsetof(AutoMovementUtil_GetCurPointProcessedMetricsMap, InCapturedInfoPerPoint) == 0x000000, "Member 'AutoMovementUtil_GetCurPointProcessedMetricsMap::InCapturedInfoPerPoint' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_GetCurPointProcessedMetricsMap, ReturnValue) == 0x000050, "Member 'AutoMovementUtil_GetCurPointProcessedMetricsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.GetNowTimestamp
// 0x0008 (0x0008 - 0x0000)
struct AutoMovementUtil_GetNowTimestamp final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementUtil_GetNowTimestamp) == 0x000008, "Wrong alignment on AutoMovementUtil_GetNowTimestamp");
//static_assert(sizeof(AutoMovementUtil_GetNowTimestamp) == 0x000008, "Wrong size on AutoMovementUtil_GetNowTimestamp");
//static_assert(offsetof(AutoMovementUtil_GetNowTimestamp, ReturnValue) == 0x000000, "Member 'AutoMovementUtil_GetNowTimestamp::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.GetOfflinePathPoints
// 0x0028 (0x0028 - 0x0000)
struct AutoMovementUtil_GetOfflinePathPoints final
{
public:
	class FString                                 InFilePathUnderProjDir;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSparsePoints;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementUtil_GetOfflinePathPoints) == 0x000008, "Wrong alignment on AutoMovementUtil_GetOfflinePathPoints");
//static_assert(sizeof(AutoMovementUtil_GetOfflinePathPoints) == 0x000028, "Wrong size on AutoMovementUtil_GetOfflinePathPoints");
//static_assert(offsetof(AutoMovementUtil_GetOfflinePathPoints, InFilePathUnderProjDir) == 0x000000, "Member 'AutoMovementUtil_GetOfflinePathPoints::InFilePathUnderProjDir' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_GetOfflinePathPoints, bUseSparsePoints) == 0x000010, "Member 'AutoMovementUtil_GetOfflinePathPoints::bUseSparsePoints' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_GetOfflinePathPoints, ReturnValue) == 0x000018, "Member 'AutoMovementUtil_GetOfflinePathPoints::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.GetVfxAutoPlayerRootFolderPath
// 0x0010 (0x0010 - 0x0000)
struct AutoMovementUtil_GetVfxAutoPlayerRootFolderPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementUtil_GetVfxAutoPlayerRootFolderPath) == 0x000008, "Wrong alignment on AutoMovementUtil_GetVfxAutoPlayerRootFolderPath");
//static_assert(sizeof(AutoMovementUtil_GetVfxAutoPlayerRootFolderPath) == 0x000010, "Wrong size on AutoMovementUtil_GetVfxAutoPlayerRootFolderPath");
//static_assert(offsetof(AutoMovementUtil_GetVfxAutoPlayerRootFolderPath, ReturnValue) == 0x000000, "Member 'AutoMovementUtil_GetVfxAutoPlayerRootFolderPath::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.InsertIntoCapturedInfoArrayPerPoint
// 0x00B0 (0x00B0 - 0x0000)
struct AutoMovementUtil_InsertIntoCapturedInfoArrayPerPoint final
{
public:
	TArray<struct FGSCapturedStatResult>          RawCapturedData;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCapturedInfoArrayPerPoint             CapturedInfoArrayPerPoint;                         // 0x0010(0x0050)(Parm, NativeAccessSpecifierPublic)
	struct FCapturedInfoArrayPerPoint             ReturnValue;                                       // 0x0060(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementUtil_InsertIntoCapturedInfoArrayPerPoint) == 0x000008, "Wrong alignment on AutoMovementUtil_InsertIntoCapturedInfoArrayPerPoint");
//static_assert(sizeof(AutoMovementUtil_InsertIntoCapturedInfoArrayPerPoint) == 0x0000B0, "Wrong size on AutoMovementUtil_InsertIntoCapturedInfoArrayPerPoint");
//static_assert(offsetof(AutoMovementUtil_InsertIntoCapturedInfoArrayPerPoint, RawCapturedData) == 0x000000, "Member 'AutoMovementUtil_InsertIntoCapturedInfoArrayPerPoint::RawCapturedData' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_InsertIntoCapturedInfoArrayPerPoint, CapturedInfoArrayPerPoint) == 0x000010, "Member 'AutoMovementUtil_InsertIntoCapturedInfoArrayPerPoint::CapturedInfoArrayPerPoint' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_InsertIntoCapturedInfoArrayPerPoint, ReturnValue) == 0x000060, "Member 'AutoMovementUtil_InsertIntoCapturedInfoArrayPerPoint::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.LoadStatsCapturerReport
// 0x0028 (0x0028 - 0x0000)
struct AutoMovementUtil_LoadStatsCapturerReport final
{
public:
	class FString                                 InFileNameUnderProjFolder;                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGSPathPointStatInfo>           AllPathPointStatInfo;                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PointNum;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AutoMovementUtil_LoadStatsCapturerReport) == 0x000008, "Wrong alignment on AutoMovementUtil_LoadStatsCapturerReport");
//static_assert(sizeof(AutoMovementUtil_LoadStatsCapturerReport) == 0x000028, "Wrong size on AutoMovementUtil_LoadStatsCapturerReport");
//static_assert(offsetof(AutoMovementUtil_LoadStatsCapturerReport, InFileNameUnderProjFolder) == 0x000000, "Member 'AutoMovementUtil_LoadStatsCapturerReport::InFileNameUnderProjFolder' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_LoadStatsCapturerReport, AllPathPointStatInfo) == 0x000010, "Member 'AutoMovementUtil_LoadStatsCapturerReport::AllPathPointStatInfo' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_LoadStatsCapturerReport, PointNum) == 0x000020, "Member 'AutoMovementUtil_LoadStatsCapturerReport::PointNum' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_LoadStatsCapturerReport, ReturnValue) == 0x000024, "Member 'AutoMovementUtil_LoadStatsCapturerReport::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.MergeMipReportsWithFileNameKeyword
// 0x0038 (0x0038 - 0x0000)
struct AutoMovementUtil_MergeMipReportsWithFileNameKeyword final
{
public:
	class FString                                 InDirectoryUnderProjDir;                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InFileNameKeyword;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutputMergedFileName;                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AutoMovementUtil_MergeMipReportsWithFileNameKeyword) == 0x000008, "Wrong alignment on AutoMovementUtil_MergeMipReportsWithFileNameKeyword");
//static_assert(sizeof(AutoMovementUtil_MergeMipReportsWithFileNameKeyword) == 0x000038, "Wrong size on AutoMovementUtil_MergeMipReportsWithFileNameKeyword");
//static_assert(offsetof(AutoMovementUtil_MergeMipReportsWithFileNameKeyword, InDirectoryUnderProjDir) == 0x000000, "Member 'AutoMovementUtil_MergeMipReportsWithFileNameKeyword::InDirectoryUnderProjDir' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_MergeMipReportsWithFileNameKeyword, InFileNameKeyword) == 0x000010, "Member 'AutoMovementUtil_MergeMipReportsWithFileNameKeyword::InFileNameKeyword' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_MergeMipReportsWithFileNameKeyword, OutputMergedFileName) == 0x000020, "Member 'AutoMovementUtil_MergeMipReportsWithFileNameKeyword::OutputMergedFileName' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_MergeMipReportsWithFileNameKeyword, ReturnValue) == 0x000030, "Member 'AutoMovementUtil_MergeMipReportsWithFileNameKeyword::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.MergeMultiTextureMipReports
// 0x0028 (0x0028 - 0x0000)
struct AutoMovementUtil_MergeMultiTextureMipReports final
{
public:
	TArray<class FString>                         InReportFilePaths;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 OutputMergedFileName;                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(AutoMovementUtil_MergeMultiTextureMipReports) == 0x000008, "Wrong alignment on AutoMovementUtil_MergeMultiTextureMipReports");
//static_assert(sizeof(AutoMovementUtil_MergeMultiTextureMipReports) == 0x000028, "Wrong size on AutoMovementUtil_MergeMultiTextureMipReports");
//static_assert(offsetof(AutoMovementUtil_MergeMultiTextureMipReports, InReportFilePaths) == 0x000000, "Member 'AutoMovementUtil_MergeMultiTextureMipReports::InReportFilePaths' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_MergeMultiTextureMipReports, OutputMergedFileName) == 0x000010, "Member 'AutoMovementUtil_MergeMultiTextureMipReports::OutputMergedFileName' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_MergeMultiTextureMipReports, ReturnValue) == 0x000020, "Member 'AutoMovementUtil_MergeMultiTextureMipReports::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.SaveOfflinePathPoints
// 0x0020 (0x0020 - 0x0000)
struct AutoMovementUtil_SaveOfflinePathPoints final
{
public:
	TArray<struct FVector>                        InPoints;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InFilePathUnderProjFolder;                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementUtil_SaveOfflinePathPoints) == 0x000008, "Wrong alignment on AutoMovementUtil_SaveOfflinePathPoints");
//static_assert(sizeof(AutoMovementUtil_SaveOfflinePathPoints) == 0x000020, "Wrong size on AutoMovementUtil_SaveOfflinePathPoints");
//static_assert(offsetof(AutoMovementUtil_SaveOfflinePathPoints, InPoints) == 0x000000, "Member 'AutoMovementUtil_SaveOfflinePathPoints::InPoints' has a wrong offset!");
//static_assert(offsetof(AutoMovementUtil_SaveOfflinePathPoints, InFilePathUnderProjFolder) == 0x000010, "Member 'AutoMovementUtil_SaveOfflinePathPoints::InFilePathUnderProjFolder' has a wrong offset!");

// Function UnrealExtent.AutoMovementUtil.SetVfxAutoPlayerRootFolderPath
// 0x0010 (0x0010 - 0x0000)
struct AutoMovementUtil_SetVfxAutoPlayerRootFolderPath final
{
public:
	class FString                                 InRootFolderPath;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMovementUtil_SetVfxAutoPlayerRootFolderPath) == 0x000008, "Wrong alignment on AutoMovementUtil_SetVfxAutoPlayerRootFolderPath");
//static_assert(sizeof(AutoMovementUtil_SetVfxAutoPlayerRootFolderPath) == 0x000010, "Wrong size on AutoMovementUtil_SetVfxAutoPlayerRootFolderPath");
//static_assert(offsetof(AutoMovementUtil_SetVfxAutoPlayerRootFolderPath, InRootFolderPath) == 0x000000, "Member 'AutoMovementUtil_SetVfxAutoPlayerRootFolderPath::InRootFolderPath' has a wrong offset!");

// Function UnrealExtent.AutoMoveTaskAssembler.IncreaseSubTaskViewingRotation
// 0x0001 (0x0001 - 0x0000)
struct AutoMoveTaskAssembler_IncreaseSubTaskViewingRotation final
{
public:
	ERotateType                                   InRotateType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMoveTaskAssembler_IncreaseSubTaskViewingRotation) == 0x000001, "Wrong alignment on AutoMoveTaskAssembler_IncreaseSubTaskViewingRotation");
//static_assert(sizeof(AutoMoveTaskAssembler_IncreaseSubTaskViewingRotation) == 0x000001, "Wrong size on AutoMoveTaskAssembler_IncreaseSubTaskViewingRotation");
//static_assert(offsetof(AutoMoveTaskAssembler_IncreaseSubTaskViewingRotation, InRotateType) == 0x000000, "Member 'AutoMoveTaskAssembler_IncreaseSubTaskViewingRotation::InRotateType' has a wrong offset!");

// Function UnrealExtent.AutoMoveTaskAssembler.TransportSubTaskViewingPosition
// 0x0030 (0x0030 - 0x0000)
struct AutoMoveTaskAssembler_TransportSubTaskViewingPosition final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotator;                                         // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AutoMoveTaskAssembler_TransportSubTaskViewingPosition) == 0x000008, "Wrong alignment on AutoMoveTaskAssembler_TransportSubTaskViewingPosition");
//static_assert(sizeof(AutoMoveTaskAssembler_TransportSubTaskViewingPosition) == 0x000030, "Wrong size on AutoMoveTaskAssembler_TransportSubTaskViewingPosition");
//static_assert(offsetof(AutoMoveTaskAssembler_TransportSubTaskViewingPosition, InLocation) == 0x000000, "Member 'AutoMoveTaskAssembler_TransportSubTaskViewingPosition::InLocation' has a wrong offset!");
//static_assert(offsetof(AutoMoveTaskAssembler_TransportSubTaskViewingPosition, InRotator) == 0x000018, "Member 'AutoMoveTaskAssembler_TransportSubTaskViewingPosition::InRotator' has a wrong offset!");

// Function UnrealExtent.GSE_NetFuncLib.GetAllActiveConnectionInfo
// 0x0018 (0x0018 - 0x0000)
struct GSE_NetFuncLib_GetAllActiveConnectionInfo final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGSConnectionInfo>              ConnectionInfos;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_NetFuncLib_GetAllActiveConnectionInfo) == 0x000008, "Wrong alignment on GSE_NetFuncLib_GetAllActiveConnectionInfo");
//static_assert(sizeof(GSE_NetFuncLib_GetAllActiveConnectionInfo) == 0x000018, "Wrong size on GSE_NetFuncLib_GetAllActiveConnectionInfo");
//static_assert(offsetof(GSE_NetFuncLib_GetAllActiveConnectionInfo, WorldContext) == 0x000000, "Member 'GSE_NetFuncLib_GetAllActiveConnectionInfo::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_NetFuncLib_GetAllActiveConnectionInfo, ConnectionInfos) == 0x000008, "Member 'GSE_NetFuncLib_GetAllActiveConnectionInfo::ConnectionInfos' has a wrong offset!");

// Function UnrealExtent.AssetDataArray.GetAssetDataCount
// 0x0004 (0x0004 - 0x0000)
struct AssetDataArray_GetAssetDataCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AssetDataArray_GetAssetDataCount) == 0x000004, "Wrong alignment on AssetDataArray_GetAssetDataCount");
//static_assert(sizeof(AssetDataArray_GetAssetDataCount) == 0x000004, "Wrong size on AssetDataArray_GetAssetDataCount");
//static_assert(offsetof(AssetDataArray_GetAssetDataCount, ReturnValue) == 0x000000, "Member 'AssetDataArray_GetAssetDataCount::ReturnValue' has a wrong offset!");

// Function UnrealExtent.AssetDataArray.SetActiveIdx
// 0x0004 (0x0004 - 0x0000)
struct AssetDataArray_SetActiveIdx final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(AssetDataArray_SetActiveIdx) == 0x000004, "Wrong alignment on AssetDataArray_SetActiveIdx");
//static_assert(sizeof(AssetDataArray_SetActiveIdx) == 0x000004, "Wrong size on AssetDataArray_SetActiveIdx");
//static_assert(offsetof(AssetDataArray_SetActiveIdx, Idx) == 0x000000, "Member 'AssetDataArray_SetActiveIdx::Idx' has a wrong offset!");

// Function UnrealExtent.GSE_GameIntentFuncLib.GetCachedActivityIntentReceivedParam
// 0x0038 (0x0038 - 0x0000)
struct GSE_GameIntentFuncLib_GetCachedActivityIntentReceivedParam final
{
public:
	struct FCachedActivityIntentReceivedParamCS   OutParamCS;                                        // 0x0000(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_GameIntentFuncLib_GetCachedActivityIntentReceivedParam) == 0x000008, "Wrong alignment on GSE_GameIntentFuncLib_GetCachedActivityIntentReceivedParam");
//static_assert(sizeof(GSE_GameIntentFuncLib_GetCachedActivityIntentReceivedParam) == 0x000038, "Wrong size on GSE_GameIntentFuncLib_GetCachedActivityIntentReceivedParam");
//static_assert(offsetof(GSE_GameIntentFuncLib_GetCachedActivityIntentReceivedParam, OutParamCS) == 0x000000, "Member 'GSE_GameIntentFuncLib_GetCachedActivityIntentReceivedParam::OutParamCS' has a wrong offset!");
//static_assert(offsetof(GSE_GameIntentFuncLib_GetCachedActivityIntentReceivedParam, ReturnValue) == 0x000030, "Member 'GSE_GameIntentFuncLib_GetCachedActivityIntentReceivedParam::ReturnValue' has a wrong offset!");

// Function UnrealExtent.BGUAsyncLineTraceObject.RequestAsyncLineTraceByChannelSingleStatic
// 0x0048 (0x0048 - 0x0000)
struct BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic final
{
public:
	class UBGUAsyncLineTraceObject*               InLineTraceObject;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Start;                                             // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x0042(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic) == 0x000008, "Wrong alignment on BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic");
//static_assert(sizeof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic) == 0x000048, "Wrong size on BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic, InLineTraceObject) == 0x000000, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic::InLineTraceObject' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic, ReqID) == 0x000008, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic::ReqID' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic, Start) == 0x000010, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic::Start' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic, End) == 0x000028, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic::End' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic, TraceChannel) == 0x000040, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic::TraceChannel' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic, bTraceComplex) == 0x000041, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic::bTraceComplex' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic, bDebug) == 0x000042, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingleStatic::bDebug' has a wrong offset!");

// Function UnrealExtent.BGUAsyncLineTraceObject.RequestAsyncLineTraceByObjectTypeSingleStatic
// 0x0058 (0x0058 - 0x0000)
struct BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic final
{
public:
	class UBGUAsyncLineTraceObject*               InLineTraceObject;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Start;                                             // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic) == 0x000008, "Wrong alignment on BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic");
//static_assert(sizeof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic) == 0x000058, "Wrong size on BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic, InLineTraceObject) == 0x000000, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic::InLineTraceObject' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic, ReqID) == 0x000008, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic::ReqID' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic, Start) == 0x000010, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic::Start' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic, End) == 0x000028, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic::End' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic, ObjectTypes) == 0x000040, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic::ObjectTypes' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic, bTraceComplex) == 0x000050, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic::bTraceComplex' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic, bDebug) == 0x000051, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingleStatic::bDebug' has a wrong offset!");

// Function UnrealExtent.BGUAsyncLineTraceObject.GetAndCleanLineTraceResults
// 0x0018 (0x0018 - 0x0000)
struct BGUAsyncLineTraceObject_GetAndCleanLineTraceResults final
{
public:
	TArray<struct FAsyncLineTraceSingleResult>    OutAsyncLineTraceResults;                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(BGUAsyncLineTraceObject_GetAndCleanLineTraceResults) == 0x000008, "Wrong alignment on BGUAsyncLineTraceObject_GetAndCleanLineTraceResults");
//static_assert(sizeof(BGUAsyncLineTraceObject_GetAndCleanLineTraceResults) == 0x000018, "Wrong size on BGUAsyncLineTraceObject_GetAndCleanLineTraceResults");
//static_assert(offsetof(BGUAsyncLineTraceObject_GetAndCleanLineTraceResults, OutAsyncLineTraceResults) == 0x000000, "Member 'BGUAsyncLineTraceObject_GetAndCleanLineTraceResults::OutAsyncLineTraceResults' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_GetAndCleanLineTraceResults, ReturnValue) == 0x000010, "Member 'BGUAsyncLineTraceObject_GetAndCleanLineTraceResults::ReturnValue' has a wrong offset!");

// Function UnrealExtent.BGUAsyncLineTraceObject.RequestAsyncLineTraceByChannelOnlyCheck
// 0x0040 (0x0040 - 0x0000)
struct BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck final
{
public:
	int32                                         ReqID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Start;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck) == 0x000008, "Wrong alignment on BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck");
//static_assert(sizeof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck) == 0x000040, "Wrong size on BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck, ReqID) == 0x000000, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck::ReqID' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck, Start) == 0x000008, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck::Start' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck, End) == 0x000020, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck::End' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck, TraceChannel) == 0x000038, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck::TraceChannel' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck, bTraceComplex) == 0x000039, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck::bTraceComplex' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck, bDebug) == 0x00003A, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelOnlyCheck::bDebug' has a wrong offset!");

// Function UnrealExtent.BGUAsyncLineTraceObject.RequestAsyncLineTraceByChannelSingle
// 0x0040 (0x0040 - 0x0000)
struct BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle final
{
public:
	int32                                         ReqID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Start;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle) == 0x000008, "Wrong alignment on BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle");
//static_assert(sizeof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle) == 0x000040, "Wrong size on BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle, ReqID) == 0x000000, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle::ReqID' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle, Start) == 0x000008, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle::Start' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle, End) == 0x000020, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle::End' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle, TraceChannel) == 0x000038, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle::TraceChannel' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle, bTraceComplex) == 0x000039, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle::bTraceComplex' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle, bDebug) == 0x00003A, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle::bDebug' has a wrong offset!");

// Function UnrealExtent.BGUAsyncLineTraceObject.RequestAsyncLineTraceByChannelSingle_Batch
// 0x0018 (0x0018 - 0x0000)
struct BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle_Batch final
{
public:
	TArray<struct FAsyncLineTraceReq>             ReqList;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle_Batch) == 0x000008, "Wrong alignment on BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle_Batch");
//static_assert(sizeof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle_Batch) == 0x000018, "Wrong size on BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle_Batch");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle_Batch, ReqList) == 0x000000, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle_Batch::ReqList' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle_Batch, TraceChannel) == 0x000010, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle_Batch::TraceChannel' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle_Batch, bTraceComplex) == 0x000011, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle_Batch::bTraceComplex' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle_Batch, bDebug) == 0x000012, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByChannelSingle_Batch::bDebug' has a wrong offset!");

// Function UnrealExtent.BGUAsyncLineTraceObject.RequestAsyncLineTraceByObjectTypeSingle
// 0x0050 (0x0050 - 0x0000)
struct BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle final
{
public:
	int32                                         ReqID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Start;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle) == 0x000008, "Wrong alignment on BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle");
//static_assert(sizeof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle) == 0x000050, "Wrong size on BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle, ReqID) == 0x000000, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle::ReqID' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle, Start) == 0x000008, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle::Start' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle, End) == 0x000020, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle::End' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle, ObjectTypes) == 0x000038, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle::ObjectTypes' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle, bTraceComplex) == 0x000048, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle::bTraceComplex' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle, bDebug) == 0x000049, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle::bDebug' has a wrong offset!");

// Function UnrealExtent.BGUAsyncLineTraceObject.RequestAsyncLineTraceByObjectTypeSingle_Batch
// 0x0028 (0x0028 - 0x0000)
struct BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle_Batch final
{
public:
	TArray<struct FAsyncLineTraceReq>             ReqList;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle_Batch) == 0x000008, "Wrong alignment on BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle_Batch");
//static_assert(sizeof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle_Batch) == 0x000028, "Wrong size on BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle_Batch");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle_Batch, ReqList) == 0x000000, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle_Batch::ReqList' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle_Batch, ObjectTypes) == 0x000010, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle_Batch::ObjectTypes' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle_Batch, bTraceComplex) == 0x000020, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle_Batch::bTraceComplex' has a wrong offset!");
//static_assert(offsetof(BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle_Batch, bDebug) == 0x000021, "Member 'BGUAsyncLineTraceObject_RequestAsyncLineTraceByObjectTypeSingle_Batch::bDebug' has a wrong offset!");

// Function UnrealExtent.BGUMovieSceneParameterSection.AddColorParameterKey
// 0x0038 (0x0038 - 0x0000)
struct BGUMovieSceneParameterSection_AddColorParameterKey final
{
public:
	struct FBGUMaterialParameterInfo              InParameterInfo;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           InTime;                                            // 0x0020(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InValue;                                           // 0x0024(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(BGUMovieSceneParameterSection_AddColorParameterKey) == 0x000008, "Wrong alignment on BGUMovieSceneParameterSection_AddColorParameterKey");
//static_assert(sizeof(BGUMovieSceneParameterSection_AddColorParameterKey) == 0x000038, "Wrong size on BGUMovieSceneParameterSection_AddColorParameterKey");
//static_assert(offsetof(BGUMovieSceneParameterSection_AddColorParameterKey, InParameterInfo) == 0x000000, "Member 'BGUMovieSceneParameterSection_AddColorParameterKey::InParameterInfo' has a wrong offset!");
//static_assert(offsetof(BGUMovieSceneParameterSection_AddColorParameterKey, InTime) == 0x000020, "Member 'BGUMovieSceneParameterSection_AddColorParameterKey::InTime' has a wrong offset!");
//static_assert(offsetof(BGUMovieSceneParameterSection_AddColorParameterKey, InValue) == 0x000024, "Member 'BGUMovieSceneParameterSection_AddColorParameterKey::InValue' has a wrong offset!");

// Function UnrealExtent.BGUMovieSceneParameterSection.AddScalarParameterKey
// 0x0028 (0x0028 - 0x0000)
struct BGUMovieSceneParameterSection_AddScalarParameterKey final
{
public:
	struct FBGUMaterialParameterInfo              InParameterInfo;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           InTime;                                            // 0x0020(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(BGUMovieSceneParameterSection_AddScalarParameterKey) == 0x000008, "Wrong alignment on BGUMovieSceneParameterSection_AddScalarParameterKey");
//static_assert(sizeof(BGUMovieSceneParameterSection_AddScalarParameterKey) == 0x000028, "Wrong size on BGUMovieSceneParameterSection_AddScalarParameterKey");
//static_assert(offsetof(BGUMovieSceneParameterSection_AddScalarParameterKey, InParameterInfo) == 0x000000, "Member 'BGUMovieSceneParameterSection_AddScalarParameterKey::InParameterInfo' has a wrong offset!");
//static_assert(offsetof(BGUMovieSceneParameterSection_AddScalarParameterKey, InTime) == 0x000020, "Member 'BGUMovieSceneParameterSection_AddScalarParameterKey::InTime' has a wrong offset!");
//static_assert(offsetof(BGUMovieSceneParameterSection_AddScalarParameterKey, InValue) == 0x000024, "Member 'BGUMovieSceneParameterSection_AddScalarParameterKey::InValue' has a wrong offset!");

// Function UnrealExtent.BGUMovieSceneParameterSection.AddVectorParameterKey
// 0x0040 (0x0040 - 0x0000)
struct BGUMovieSceneParameterSection_AddVectorParameterKey final
{
public:
	struct FBGUMaterialParameterInfo              InParameterInfo;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           InTime;                                            // 0x0020(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InValue;                                           // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(BGUMovieSceneParameterSection_AddVectorParameterKey) == 0x000008, "Wrong alignment on BGUMovieSceneParameterSection_AddVectorParameterKey");
//static_assert(sizeof(BGUMovieSceneParameterSection_AddVectorParameterKey) == 0x000040, "Wrong size on BGUMovieSceneParameterSection_AddVectorParameterKey");
//static_assert(offsetof(BGUMovieSceneParameterSection_AddVectorParameterKey, InParameterInfo) == 0x000000, "Member 'BGUMovieSceneParameterSection_AddVectorParameterKey::InParameterInfo' has a wrong offset!");
//static_assert(offsetof(BGUMovieSceneParameterSection_AddVectorParameterKey, InTime) == 0x000020, "Member 'BGUMovieSceneParameterSection_AddVectorParameterKey::InTime' has a wrong offset!");
//static_assert(offsetof(BGUMovieSceneParameterSection_AddVectorParameterKey, InValue) == 0x000028, "Member 'BGUMovieSceneParameterSection_AddVectorParameterKey::InValue' has a wrong offset!");

// Function UnrealExtent.BGUMovieSceneParameterSection.RemoveColorParameter
// 0x0028 (0x0028 - 0x0000)
struct BGUMovieSceneParameterSection_RemoveColorParameter final
{
public:
	struct FBGUMaterialParameterInfo              InParameterInfo;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(BGUMovieSceneParameterSection_RemoveColorParameter) == 0x000008, "Wrong alignment on BGUMovieSceneParameterSection_RemoveColorParameter");
//static_assert(sizeof(BGUMovieSceneParameterSection_RemoveColorParameter) == 0x000028, "Wrong size on BGUMovieSceneParameterSection_RemoveColorParameter");
//static_assert(offsetof(BGUMovieSceneParameterSection_RemoveColorParameter, InParameterInfo) == 0x000000, "Member 'BGUMovieSceneParameterSection_RemoveColorParameter::InParameterInfo' has a wrong offset!");
//static_assert(offsetof(BGUMovieSceneParameterSection_RemoveColorParameter, ReturnValue) == 0x000020, "Member 'BGUMovieSceneParameterSection_RemoveColorParameter::ReturnValue' has a wrong offset!");

// Function UnrealExtent.BGUMovieSceneParameterSection.RemoveColorParameterByName
// 0x000C (0x000C - 0x0000)
struct BGUMovieSceneParameterSection_RemoveColorParameterByName final
{
public:
	class FName                                   InParameterInfoName;                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(BGUMovieSceneParameterSection_RemoveColorParameterByName) == 0x000004, "Wrong alignment on BGUMovieSceneParameterSection_RemoveColorParameterByName");
//static_assert(sizeof(BGUMovieSceneParameterSection_RemoveColorParameterByName) == 0x00000C, "Wrong size on BGUMovieSceneParameterSection_RemoveColorParameterByName");
//static_assert(offsetof(BGUMovieSceneParameterSection_RemoveColorParameterByName, InParameterInfoName) == 0x000000, "Member 'BGUMovieSceneParameterSection_RemoveColorParameterByName::InParameterInfoName' has a wrong offset!");
//static_assert(offsetof(BGUMovieSceneParameterSection_RemoveColorParameterByName, ReturnValue) == 0x000008, "Member 'BGUMovieSceneParameterSection_RemoveColorParameterByName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.BGUMovieSceneParameterSection.RemoveScalarParameter
// 0x0028 (0x0028 - 0x0000)
struct BGUMovieSceneParameterSection_RemoveScalarParameter final
{
public:
	struct FBGUMaterialParameterInfo              InParameterInfo;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(BGUMovieSceneParameterSection_RemoveScalarParameter) == 0x000008, "Wrong alignment on BGUMovieSceneParameterSection_RemoveScalarParameter");
//static_assert(sizeof(BGUMovieSceneParameterSection_RemoveScalarParameter) == 0x000028, "Wrong size on BGUMovieSceneParameterSection_RemoveScalarParameter");
//static_assert(offsetof(BGUMovieSceneParameterSection_RemoveScalarParameter, InParameterInfo) == 0x000000, "Member 'BGUMovieSceneParameterSection_RemoveScalarParameter::InParameterInfo' has a wrong offset!");
//static_assert(offsetof(BGUMovieSceneParameterSection_RemoveScalarParameter, ReturnValue) == 0x000020, "Member 'BGUMovieSceneParameterSection_RemoveScalarParameter::ReturnValue' has a wrong offset!");

// Function UnrealExtent.BGUMovieSceneParameterSection.RemoveScalarParameterByName
// 0x000C (0x000C - 0x0000)
struct BGUMovieSceneParameterSection_RemoveScalarParameterByName final
{
public:
	class FName                                   InParameterInfoName;                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(BGUMovieSceneParameterSection_RemoveScalarParameterByName) == 0x000004, "Wrong alignment on BGUMovieSceneParameterSection_RemoveScalarParameterByName");
//static_assert(sizeof(BGUMovieSceneParameterSection_RemoveScalarParameterByName) == 0x00000C, "Wrong size on BGUMovieSceneParameterSection_RemoveScalarParameterByName");
//static_assert(offsetof(BGUMovieSceneParameterSection_RemoveScalarParameterByName, InParameterInfoName) == 0x000000, "Member 'BGUMovieSceneParameterSection_RemoveScalarParameterByName::InParameterInfoName' has a wrong offset!");
//static_assert(offsetof(BGUMovieSceneParameterSection_RemoveScalarParameterByName, ReturnValue) == 0x000008, "Member 'BGUMovieSceneParameterSection_RemoveScalarParameterByName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.BGUMovieSceneParameterSection.RemoveVectorParameter
// 0x0028 (0x0028 - 0x0000)
struct BGUMovieSceneParameterSection_RemoveVectorParameter final
{
public:
	struct FBGUMaterialParameterInfo              InParameterInfo;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(BGUMovieSceneParameterSection_RemoveVectorParameter) == 0x000008, "Wrong alignment on BGUMovieSceneParameterSection_RemoveVectorParameter");
//static_assert(sizeof(BGUMovieSceneParameterSection_RemoveVectorParameter) == 0x000028, "Wrong size on BGUMovieSceneParameterSection_RemoveVectorParameter");
//static_assert(offsetof(BGUMovieSceneParameterSection_RemoveVectorParameter, InParameterInfo) == 0x000000, "Member 'BGUMovieSceneParameterSection_RemoveVectorParameter::InParameterInfo' has a wrong offset!");
//static_assert(offsetof(BGUMovieSceneParameterSection_RemoveVectorParameter, ReturnValue) == 0x000020, "Member 'BGUMovieSceneParameterSection_RemoveVectorParameter::ReturnValue' has a wrong offset!");

// Function UnrealExtent.BGUMovieSceneParameterSection.RemoveVectorParameterByName
// 0x000C (0x000C - 0x0000)
struct BGUMovieSceneParameterSection_RemoveVectorParameterByName final
{
public:
	class FName                                   InParameterInfoName;                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(BGUMovieSceneParameterSection_RemoveVectorParameterByName) == 0x000004, "Wrong alignment on BGUMovieSceneParameterSection_RemoveVectorParameterByName");
//static_assert(sizeof(BGUMovieSceneParameterSection_RemoveVectorParameterByName) == 0x00000C, "Wrong size on BGUMovieSceneParameterSection_RemoveVectorParameterByName");
//static_assert(offsetof(BGUMovieSceneParameterSection_RemoveVectorParameterByName, InParameterInfoName) == 0x000000, "Member 'BGUMovieSceneParameterSection_RemoveVectorParameterByName::InParameterInfoName' has a wrong offset!");
//static_assert(offsetof(BGUMovieSceneParameterSection_RemoveVectorParameterByName, ReturnValue) == 0x000008, "Member 'BGUMovieSceneParameterSection_RemoveVectorParameterByName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.BGUMovieSceneParameterSection.GetParameterInfos
// 0x0050 (0x0050 - 0x0000)
struct BGUMovieSceneParameterSection_GetParameterInfos final
{
public:
	TSet<struct FBGUMaterialParameterInfo>        ParameterInfos;                                    // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(BGUMovieSceneParameterSection_GetParameterInfos) == 0x000008, "Wrong alignment on BGUMovieSceneParameterSection_GetParameterInfos");
//static_assert(sizeof(BGUMovieSceneParameterSection_GetParameterInfos) == 0x000050, "Wrong size on BGUMovieSceneParameterSection_GetParameterInfos");
//static_assert(offsetof(BGUMovieSceneParameterSection_GetParameterInfos, ParameterInfos) == 0x000000, "Member 'BGUMovieSceneParameterSection_GetParameterInfos::ParameterInfos' has a wrong offset!");

// Function UnrealExtent.GSBitmapFontBox.SetText
// 0x0018 (0x0018 - 0x0000)
struct GSBitmapFontBox_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSBitmapFontBox_SetText) == 0x000008, "Wrong alignment on GSBitmapFontBox_SetText");
//static_assert(sizeof(GSBitmapFontBox_SetText) == 0x000018, "Wrong size on GSBitmapFontBox_SetText");
//static_assert(offsetof(GSBitmapFontBox_SetText, InText) == 0x000000, "Member 'GSBitmapFontBox_SetText::InText' has a wrong offset!");

// Function UnrealExtent.GSE_AIFuncLib.AISetBT
// 0x0010 (0x0010 - 0x0000)
struct GSE_AIFuncLib_AISetBT final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          BTAsset;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AIFuncLib_AISetBT) == 0x000008, "Wrong alignment on GSE_AIFuncLib_AISetBT");
//static_assert(sizeof(GSE_AIFuncLib_AISetBT) == 0x000010, "Wrong size on GSE_AIFuncLib_AISetBT");
//static_assert(offsetof(GSE_AIFuncLib_AISetBT, Actor) == 0x000000, "Member 'GSE_AIFuncLib_AISetBT::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_AIFuncLib_AISetBT, BTAsset) == 0x000008, "Member 'GSE_AIFuncLib_AISetBT::BTAsset' has a wrong offset!");

// Function UnrealExtent.GSE_AIFuncLib.ListenerForgetsActor
// 0x0010 (0x0010 - 0x0000)
struct GSE_AIFuncLib_ListenerForgetsActor final
{
public:
	class UAIPerceptionComponent*                 PerceptionComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorToForget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AIFuncLib_ListenerForgetsActor) == 0x000008, "Wrong alignment on GSE_AIFuncLib_ListenerForgetsActor");
//static_assert(sizeof(GSE_AIFuncLib_ListenerForgetsActor) == 0x000010, "Wrong size on GSE_AIFuncLib_ListenerForgetsActor");
//static_assert(offsetof(GSE_AIFuncLib_ListenerForgetsActor, PerceptionComp) == 0x000000, "Member 'GSE_AIFuncLib_ListenerForgetsActor::PerceptionComp' has a wrong offset!");
//static_assert(offsetof(GSE_AIFuncLib_ListenerForgetsActor, ActorToForget) == 0x000008, "Member 'GSE_AIFuncLib_ListenerForgetsActor::ActorToForget' has a wrong offset!");

// Function UnrealExtent.GSE_AIFuncLib.SetAIBTPause
// 0x0010 (0x0010 - 0x0000)
struct GSE_AIFuncLib_SetAIBTPause final
{
public:
	class UBrainComponent*                        BrainComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AIFuncLib_SetAIBTPause) == 0x000008, "Wrong alignment on GSE_AIFuncLib_SetAIBTPause");
//static_assert(sizeof(GSE_AIFuncLib_SetAIBTPause) == 0x000010, "Wrong size on GSE_AIFuncLib_SetAIBTPause");
//static_assert(offsetof(GSE_AIFuncLib_SetAIBTPause, BrainComponent) == 0x000000, "Member 'GSE_AIFuncLib_SetAIBTPause::BrainComponent' has a wrong offset!");
//static_assert(offsetof(GSE_AIFuncLib_SetAIBTPause, bEnable) == 0x000008, "Member 'GSE_AIFuncLib_SetAIBTPause::bEnable' has a wrong offset!");

// Function UnrealExtent.GSE_AIFuncLib.SetAIBTStop
// 0x0008 (0x0008 - 0x0000)
struct GSE_AIFuncLib_SetAIBTStop final
{
public:
	class UBehaviorTreeComponent*                 BTComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AIFuncLib_SetAIBTStop) == 0x000008, "Wrong alignment on GSE_AIFuncLib_SetAIBTStop");
//static_assert(sizeof(GSE_AIFuncLib_SetAIBTStop) == 0x000008, "Wrong size on GSE_AIFuncLib_SetAIBTStop");
//static_assert(offsetof(GSE_AIFuncLib_SetAIBTStop, BTComp) == 0x000000, "Member 'GSE_AIFuncLib_SetAIBTStop::BTComp' has a wrong offset!");

// Function UnrealExtent.GSE_AIFuncLib.SetAISenseConfig
// 0x0020 (0x0020 - 0x0000)
struct GSE_AIFuncLib_SetAISenseConfig final
{
public:
	class UAIPerceptionComponent*                 PerceptionComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HearRange;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SightRange;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoseSightRange;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisionAngleDegrees;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ASRangeFromLastSeenLoc;                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSightDominantSense;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHearingSet;                                      // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSightSet;                                        // 0x001E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AIFuncLib_SetAISenseConfig) == 0x000008, "Wrong alignment on GSE_AIFuncLib_SetAISenseConfig");
//static_assert(sizeof(GSE_AIFuncLib_SetAISenseConfig) == 0x000020, "Wrong size on GSE_AIFuncLib_SetAISenseConfig");
//static_assert(offsetof(GSE_AIFuncLib_SetAISenseConfig, PerceptionComp) == 0x000000, "Member 'GSE_AIFuncLib_SetAISenseConfig::PerceptionComp' has a wrong offset!");
//static_assert(offsetof(GSE_AIFuncLib_SetAISenseConfig, HearRange) == 0x000008, "Member 'GSE_AIFuncLib_SetAISenseConfig::HearRange' has a wrong offset!");
//static_assert(offsetof(GSE_AIFuncLib_SetAISenseConfig, SightRange) == 0x00000C, "Member 'GSE_AIFuncLib_SetAISenseConfig::SightRange' has a wrong offset!");
//static_assert(offsetof(GSE_AIFuncLib_SetAISenseConfig, LoseSightRange) == 0x000010, "Member 'GSE_AIFuncLib_SetAISenseConfig::LoseSightRange' has a wrong offset!");
//static_assert(offsetof(GSE_AIFuncLib_SetAISenseConfig, VisionAngleDegrees) == 0x000014, "Member 'GSE_AIFuncLib_SetAISenseConfig::VisionAngleDegrees' has a wrong offset!");
//static_assert(offsetof(GSE_AIFuncLib_SetAISenseConfig, ASRangeFromLastSeenLoc) == 0x000018, "Member 'GSE_AIFuncLib_SetAISenseConfig::ASRangeFromLastSeenLoc' has a wrong offset!");
//static_assert(offsetof(GSE_AIFuncLib_SetAISenseConfig, IsSightDominantSense) == 0x00001C, "Member 'GSE_AIFuncLib_SetAISenseConfig::IsSightDominantSense' has a wrong offset!");
//static_assert(offsetof(GSE_AIFuncLib_SetAISenseConfig, IsHearingSet) == 0x00001D, "Member 'GSE_AIFuncLib_SetAISenseConfig::IsHearingSet' has a wrong offset!");
//static_assert(offsetof(GSE_AIFuncLib_SetAISenseConfig, IsSightSet) == 0x00001E, "Member 'GSE_AIFuncLib_SetAISenseConfig::IsSightSet' has a wrong offset!");

// Function UnrealExtent.GSE_AIFuncLib.SetPerceptionForgetAll
// 0x0008 (0x0008 - 0x0000)
struct GSE_AIFuncLib_SetPerceptionForgetAll final
{
public:
	class UAIPerceptionComponent*                 PerceptionComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AIFuncLib_SetPerceptionForgetAll) == 0x000008, "Wrong alignment on GSE_AIFuncLib_SetPerceptionForgetAll");
//static_assert(sizeof(GSE_AIFuncLib_SetPerceptionForgetAll) == 0x000008, "Wrong size on GSE_AIFuncLib_SetPerceptionForgetAll");
//static_assert(offsetof(GSE_AIFuncLib_SetPerceptionForgetAll, PerceptionComp) == 0x000000, "Member 'GSE_AIFuncLib_SetPerceptionForgetAll::PerceptionComp' has a wrong offset!");

// Function UnrealExtent.GSE_AIFuncLib.SinglePerceptionSetEnable
// 0x0010 (0x0010 - 0x0000)
struct GSE_AIFuncLib_SinglePerceptionSetEnable final
{
public:
	class UAIPerceptionComponent*                 PerceptionComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHearing;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AIFuncLib_SinglePerceptionSetEnable) == 0x000008, "Wrong alignment on GSE_AIFuncLib_SinglePerceptionSetEnable");
//static_assert(sizeof(GSE_AIFuncLib_SinglePerceptionSetEnable) == 0x000010, "Wrong size on GSE_AIFuncLib_SinglePerceptionSetEnable");
//static_assert(offsetof(GSE_AIFuncLib_SinglePerceptionSetEnable, PerceptionComp) == 0x000000, "Member 'GSE_AIFuncLib_SinglePerceptionSetEnable::PerceptionComp' has a wrong offset!");
//static_assert(offsetof(GSE_AIFuncLib_SinglePerceptionSetEnable, IsHearing) == 0x000008, "Member 'GSE_AIFuncLib_SinglePerceptionSetEnable::IsHearing' has a wrong offset!");
//static_assert(offsetof(GSE_AIFuncLib_SinglePerceptionSetEnable, bEnable) == 0x000009, "Member 'GSE_AIFuncLib_SinglePerceptionSetEnable::bEnable' has a wrong offset!");

// Function UnrealExtent.GSE_AnimationFuncLib.AnimationBindAllPossessableObject
// 0x0018 (0x0018 - 0x0000)
struct GSE_AnimationFuncLib_AnimationBindAllPossessableObject final
{
public:
	class UUserWidget*                            RootWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseDisplayName;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimationFuncLib_AnimationBindAllPossessableObject) == 0x000008, "Wrong alignment on GSE_AnimationFuncLib_AnimationBindAllPossessableObject");
//static_assert(sizeof(GSE_AnimationFuncLib_AnimationBindAllPossessableObject) == 0x000018, "Wrong size on GSE_AnimationFuncLib_AnimationBindAllPossessableObject");
//static_assert(offsetof(GSE_AnimationFuncLib_AnimationBindAllPossessableObject, RootWidget) == 0x000000, "Member 'GSE_AnimationFuncLib_AnimationBindAllPossessableObject::RootWidget' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_AnimationBindAllPossessableObject, Animation) == 0x000008, "Member 'GSE_AnimationFuncLib_AnimationBindAllPossessableObject::Animation' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_AnimationBindAllPossessableObject, UseDisplayName) == 0x000010, "Member 'GSE_AnimationFuncLib_AnimationBindAllPossessableObject::UseDisplayName' has a wrong offset!");

// Function UnrealExtent.GSE_AnimationFuncLib.AnimationBindPossessableObjectCS
// 0x0030 (0x0030 - 0x0000)
struct GSE_AnimationFuncLib_AnimationBindPossessableObjectCS final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequenceBindingIDInCS                 BindingID;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                BindObj;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Ctx;                                               // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimationFuncLib_AnimationBindPossessableObjectCS) == 0x000008, "Wrong alignment on GSE_AnimationFuncLib_AnimationBindPossessableObjectCS");
//static_assert(sizeof(GSE_AnimationFuncLib_AnimationBindPossessableObjectCS) == 0x000030, "Wrong size on GSE_AnimationFuncLib_AnimationBindPossessableObjectCS");
//static_assert(offsetof(GSE_AnimationFuncLib_AnimationBindPossessableObjectCS, Animation) == 0x000000, "Member 'GSE_AnimationFuncLib_AnimationBindPossessableObjectCS::Animation' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_AnimationBindPossessableObjectCS, BindingID) == 0x000008, "Member 'GSE_AnimationFuncLib_AnimationBindPossessableObjectCS::BindingID' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_AnimationBindPossessableObjectCS, BindObj) == 0x000020, "Member 'GSE_AnimationFuncLib_AnimationBindPossessableObjectCS::BindObj' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_AnimationBindPossessableObjectCS, Ctx) == 0x000028, "Member 'GSE_AnimationFuncLib_AnimationBindPossessableObjectCS::Ctx' has a wrong offset!");

// Function UnrealExtent.GSE_AnimationFuncLib.DuplicateAnimation
// 0x0020 (0x0020 - 0x0000)
struct GSE_AnimationFuncLib_DuplicateAnimation final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Outer_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimationFuncLib_DuplicateAnimation) == 0x000008, "Wrong alignment on GSE_AnimationFuncLib_DuplicateAnimation");
//static_assert(sizeof(GSE_AnimationFuncLib_DuplicateAnimation) == 0x000020, "Wrong size on GSE_AnimationFuncLib_DuplicateAnimation");
//static_assert(offsetof(GSE_AnimationFuncLib_DuplicateAnimation, InAnimation) == 0x000000, "Member 'GSE_AnimationFuncLib_DuplicateAnimation::InAnimation' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_DuplicateAnimation, Outer_0) == 0x000008, "Member 'GSE_AnimationFuncLib_DuplicateAnimation::Outer_0' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_DuplicateAnimation, Name_0) == 0x000010, "Member 'GSE_AnimationFuncLib_DuplicateAnimation::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_DuplicateAnimation, ReturnValue) == 0x000018, "Member 'GSE_AnimationFuncLib_DuplicateAnimation::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimationFuncLib.GetAnimationBindingIDByDisplayName
// 0x0028 (0x0028 - 0x0000)
struct GSE_AnimationFuncLib_GetAnimationBindingIDByDisplayName final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimationFuncLib_GetAnimationBindingIDByDisplayName) == 0x000008, "Wrong alignment on GSE_AnimationFuncLib_GetAnimationBindingIDByDisplayName");
//static_assert(sizeof(GSE_AnimationFuncLib_GetAnimationBindingIDByDisplayName) == 0x000028, "Wrong size on GSE_AnimationFuncLib_GetAnimationBindingIDByDisplayName");
//static_assert(offsetof(GSE_AnimationFuncLib_GetAnimationBindingIDByDisplayName, Animation) == 0x000000, "Member 'GSE_AnimationFuncLib_GetAnimationBindingIDByDisplayName::Animation' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_GetAnimationBindingIDByDisplayName, TargetName) == 0x000008, "Member 'GSE_AnimationFuncLib_GetAnimationBindingIDByDisplayName::TargetName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_GetAnimationBindingIDByDisplayName, ReturnValue) == 0x000010, "Member 'GSE_AnimationFuncLib_GetAnimationBindingIDByDisplayName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimationFuncLib.GetAnimationBindingIDByName
// 0x0028 (0x0028 - 0x0000)
struct GSE_AnimationFuncLib_GetAnimationBindingIDByName final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimationFuncLib_GetAnimationBindingIDByName) == 0x000008, "Wrong alignment on GSE_AnimationFuncLib_GetAnimationBindingIDByName");
//static_assert(sizeof(GSE_AnimationFuncLib_GetAnimationBindingIDByName) == 0x000028, "Wrong size on GSE_AnimationFuncLib_GetAnimationBindingIDByName");
//static_assert(offsetof(GSE_AnimationFuncLib_GetAnimationBindingIDByName, Animation) == 0x000000, "Member 'GSE_AnimationFuncLib_GetAnimationBindingIDByName::Animation' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_GetAnimationBindingIDByName, TargetName) == 0x000008, "Member 'GSE_AnimationFuncLib_GetAnimationBindingIDByName::TargetName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_GetAnimationBindingIDByName, ReturnValue) == 0x000010, "Member 'GSE_AnimationFuncLib_GetAnimationBindingIDByName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimationFuncLib.GetAnimationBindingIDByNameCS
// 0x0028 (0x0028 - 0x0000)
struct GSE_AnimationFuncLib_GetAnimationBindingIDByNameCS final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequenceBindingIDInCS                 ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimationFuncLib_GetAnimationBindingIDByNameCS) == 0x000008, "Wrong alignment on GSE_AnimationFuncLib_GetAnimationBindingIDByNameCS");
//static_assert(sizeof(GSE_AnimationFuncLib_GetAnimationBindingIDByNameCS) == 0x000028, "Wrong size on GSE_AnimationFuncLib_GetAnimationBindingIDByNameCS");
//static_assert(offsetof(GSE_AnimationFuncLib_GetAnimationBindingIDByNameCS, Animation) == 0x000000, "Member 'GSE_AnimationFuncLib_GetAnimationBindingIDByNameCS::Animation' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_GetAnimationBindingIDByNameCS, TargetName) == 0x000008, "Member 'GSE_AnimationFuncLib_GetAnimationBindingIDByNameCS::TargetName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_GetAnimationBindingIDByNameCS, ReturnValue) == 0x000010, "Member 'GSE_AnimationFuncLib_GetAnimationBindingIDByNameCS::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimationFuncLib.SaveAsset
// 0x0030 (0x0030 - 0x0000)
struct GSE_AnimationFuncLib_SaveAsset final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimationFuncLib_SaveAsset) == 0x000008, "Wrong alignment on GSE_AnimationFuncLib_SaveAsset");
//static_assert(sizeof(GSE_AnimationFuncLib_SaveAsset) == 0x000030, "Wrong size on GSE_AnimationFuncLib_SaveAsset");
//static_assert(offsetof(GSE_AnimationFuncLib_SaveAsset, InAnimation) == 0x000000, "Member 'GSE_AnimationFuncLib_SaveAsset::InAnimation' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_SaveAsset, Path) == 0x000008, "Member 'GSE_AnimationFuncLib_SaveAsset::Path' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_SaveAsset, Name_0) == 0x000018, "Member 'GSE_AnimationFuncLib_SaveAsset::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_AnimationFuncLib_SaveAsset, ReturnValue) == 0x000028, "Member 'GSE_AnimationFuncLib_SaveAsset::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimDistanceMatchingLibrary.AdvanceTimeByDistanceMatchToTarget
// 0x0050 (0x0050 - 0x0000)
struct GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget final
{
public:
	struct FAnimUpdateContext                     UpdateContext;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSequenceEvaluatorReference            SequenceEvaluator;                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DistanceToTarget;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DistanceCurveName;                                 // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PlayRateClamp;                                     // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequenceEvaluatorReference            ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget) == 0x000008, "Wrong alignment on GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget");
//static_assert(sizeof(GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget) == 0x000050, "Wrong size on GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget");
//static_assert(offsetof(GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget, UpdateContext) == 0x000000, "Member 'GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget::UpdateContext' has a wrong offset!");
//static_assert(offsetof(GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget, SequenceEvaluator) == 0x000010, "Member 'GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget::SequenceEvaluator' has a wrong offset!");
//static_assert(offsetof(GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget, DistanceToTarget) == 0x000020, "Member 'GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget::DistanceToTarget' has a wrong offset!");
//static_assert(offsetof(GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget, DistanceCurveName) == 0x000024, "Member 'GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget::DistanceCurveName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget, PlayRateClamp) == 0x000030, "Member 'GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget::PlayRateClamp' has a wrong offset!");
//static_assert(offsetof(GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget, ReturnValue) == 0x000040, "Member 'GSE_AnimDistanceMatchingLibrary_AdvanceTimeByDistanceMatchToTarget::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimDistanceMatchingLibrary.AdvanceTimeBySpeedMatching
// 0x0048 (0x0048 - 0x0000)
struct GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching final
{
public:
	struct FAnimUpdateContext                     UpdateContext;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSequenceEvaluatorReference            SequenceEvaluator;                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpeedToMatch;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PlayRateClamp;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequenceEvaluatorReference            ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching) == 0x000008, "Wrong alignment on GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching");
//static_assert(sizeof(GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching) == 0x000048, "Wrong size on GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching");
//static_assert(offsetof(GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching, UpdateContext) == 0x000000, "Member 'GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching::UpdateContext' has a wrong offset!");
//static_assert(offsetof(GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching, SequenceEvaluator) == 0x000010, "Member 'GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching::SequenceEvaluator' has a wrong offset!");
//static_assert(offsetof(GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching, SpeedToMatch) == 0x000020, "Member 'GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching::SpeedToMatch' has a wrong offset!");
//static_assert(offsetof(GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching, PlayRateClamp) == 0x000028, "Member 'GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching::PlayRateClamp' has a wrong offset!");
//static_assert(offsetof(GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching, ReturnValue) == 0x000038, "Member 'GSE_AnimDistanceMatchingLibrary_AdvanceTimeBySpeedMatching::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.ABPStateMachineGetGlobalWeight
// 0x0020 (0x0020 - 0x0000)
struct GSE_AnimFuncLib_ABPStateMachineGetGlobalWeight final
{
public:
	class UAnimInstance*                          AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateMachineName;                                  // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_ABPStateMachineGetGlobalWeight) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_ABPStateMachineGetGlobalWeight");
//static_assert(sizeof(GSE_AnimFuncLib_ABPStateMachineGetGlobalWeight) == 0x000020, "Wrong size on GSE_AnimFuncLib_ABPStateMachineGetGlobalWeight");
//static_assert(offsetof(GSE_AnimFuncLib_ABPStateMachineGetGlobalWeight, AnimInst) == 0x000000, "Member 'GSE_AnimFuncLib_ABPStateMachineGetGlobalWeight::AnimInst' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ABPStateMachineGetGlobalWeight, StateMachineName) == 0x000008, "Member 'GSE_AnimFuncLib_ABPStateMachineGetGlobalWeight::StateMachineName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ABPStateMachineGetGlobalWeight, StateName) == 0x000010, "Member 'GSE_AnimFuncLib_ABPStateMachineGetGlobalWeight::StateName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ABPStateMachineGetGlobalWeight, ReturnValue) == 0x000018, "Member 'GSE_AnimFuncLib_ABPStateMachineGetGlobalWeight::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.AddAnimSequence
// 0x0018 (0x0018 - 0x0000)
struct GSE_AnimFuncLib_AddAnimSequence final
{
public:
	class UAnimMontage*                           TargetMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Sequence;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_AddAnimSequence) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_AddAnimSequence");
//static_assert(sizeof(GSE_AnimFuncLib_AddAnimSequence) == 0x000018, "Wrong size on GSE_AnimFuncLib_AddAnimSequence");
//static_assert(offsetof(GSE_AnimFuncLib_AddAnimSequence, TargetMontage) == 0x000000, "Member 'GSE_AnimFuncLib_AddAnimSequence::TargetMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AddAnimSequence, Sequence) == 0x000008, "Member 'GSE_AnimFuncLib_AddAnimSequence::Sequence' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AddAnimSequence, ReturnValue) == 0x000010, "Member 'GSE_AnimFuncLib_AddAnimSequence::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.AddPoint
// 0x0030 (0x0030 - 0x0000)
struct GSE_AnimFuncLib_AddPoint final
{
public:
	class UBlendSpace*                            BlendSpace;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          PointSequence;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointValue;                                        // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_AddPoint) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_AddPoint");
//static_assert(sizeof(GSE_AnimFuncLib_AddPoint) == 0x000030, "Wrong size on GSE_AnimFuncLib_AddPoint");
//static_assert(offsetof(GSE_AnimFuncLib_AddPoint, BlendSpace) == 0x000000, "Member 'GSE_AnimFuncLib_AddPoint::BlendSpace' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AddPoint, PointSequence) == 0x000008, "Member 'GSE_AnimFuncLib_AddPoint::PointSequence' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AddPoint, PointValue) == 0x000010, "Member 'GSE_AnimFuncLib_AddPoint::PointValue' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AddPoint, ReturnValue) == 0x000028, "Member 'GSE_AnimFuncLib_AddPoint::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.AddPreviewAssetToSkeleton
// 0x0028 (0x0028 - 0x0000)
struct GSE_AnimFuncLib_AddPreviewAssetToSkeleton final
{
public:
	class USkeleton*                              InUSkeleton;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoneName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                PreviewAsset;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_AddPreviewAssetToSkeleton) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_AddPreviewAssetToSkeleton");
//static_assert(sizeof(GSE_AnimFuncLib_AddPreviewAssetToSkeleton) == 0x000028, "Wrong size on GSE_AnimFuncLib_AddPreviewAssetToSkeleton");
//static_assert(offsetof(GSE_AnimFuncLib_AddPreviewAssetToSkeleton, InUSkeleton) == 0x000000, "Member 'GSE_AnimFuncLib_AddPreviewAssetToSkeleton::InUSkeleton' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AddPreviewAssetToSkeleton, BoneName) == 0x000008, "Member 'GSE_AnimFuncLib_AddPreviewAssetToSkeleton::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AddPreviewAssetToSkeleton, PreviewAsset) == 0x000018, "Member 'GSE_AnimFuncLib_AddPreviewAssetToSkeleton::PreviewAsset' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AddPreviewAssetToSkeleton, ReturnValue) == 0x000020, "Member 'GSE_AnimFuncLib_AddPreviewAssetToSkeleton::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.AddSocketToSkeleton
// 0x00A0 (0x00A0 - 0x0000)
struct GSE_AnimFuncLib_AddSocketToSkeleton final
{
public:
	class USkeleton*                              InUSkeleton;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoneName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SocketName;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Offset;                                            // 0x0030(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0xF];                                       // 0x0091(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_AddSocketToSkeleton) == 0x000010, "Wrong alignment on GSE_AnimFuncLib_AddSocketToSkeleton");
//static_assert(sizeof(GSE_AnimFuncLib_AddSocketToSkeleton) == 0x0000A0, "Wrong size on GSE_AnimFuncLib_AddSocketToSkeleton");
//static_assert(offsetof(GSE_AnimFuncLib_AddSocketToSkeleton, InUSkeleton) == 0x000000, "Member 'GSE_AnimFuncLib_AddSocketToSkeleton::InUSkeleton' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AddSocketToSkeleton, BoneName) == 0x000008, "Member 'GSE_AnimFuncLib_AddSocketToSkeleton::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AddSocketToSkeleton, SocketName) == 0x000018, "Member 'GSE_AnimFuncLib_AddSocketToSkeleton::SocketName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AddSocketToSkeleton, Offset) == 0x000030, "Member 'GSE_AnimFuncLib_AddSocketToSkeleton::Offset' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AddSocketToSkeleton, ReturnValue) == 0x000090, "Member 'GSE_AnimFuncLib_AddSocketToSkeleton::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.AnimInstanceMontageSetPos
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_AnimInstanceMontageSetPos final
{
public:
	class UAnimInstance*                          AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MontagePos;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_AnimInstanceMontageSetPos) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_AnimInstanceMontageSetPos");
//static_assert(sizeof(GSE_AnimFuncLib_AnimInstanceMontageSetPos) == 0x000010, "Wrong size on GSE_AnimFuncLib_AnimInstanceMontageSetPos");
//static_assert(offsetof(GSE_AnimFuncLib_AnimInstanceMontageSetPos, AnimInst) == 0x000000, "Member 'GSE_AnimFuncLib_AnimInstanceMontageSetPos::AnimInst' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimInstanceMontageSetPos, MontagePos) == 0x000008, "Member 'GSE_AnimFuncLib_AnimInstanceMontageSetPos::MontagePos' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.AnimMontageGetBlendInAndOutTime
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_AnimMontageGetBlendInAndOutTime final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_AnimMontageGetBlendInAndOutTime) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_AnimMontageGetBlendInAndOutTime");
//static_assert(sizeof(GSE_AnimFuncLib_AnimMontageGetBlendInAndOutTime) == 0x000010, "Wrong size on GSE_AnimFuncLib_AnimMontageGetBlendInAndOutTime");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetBlendInAndOutTime, AnimMontage) == 0x000000, "Member 'GSE_AnimFuncLib_AnimMontageGetBlendInAndOutTime::AnimMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetBlendInAndOutTime, BlendInTime) == 0x000008, "Member 'GSE_AnimFuncLib_AnimMontageGetBlendInAndOutTime::BlendInTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetBlendInAndOutTime, BlendOutTime) == 0x00000C, "Member 'GSE_AnimFuncLib_AnimMontageGetBlendInAndOutTime::BlendOutTime' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.AnimMontageGetBoneTransformWS
// 0x00A0 (0x00A0 - 0x0000)
struct GSE_AnimFuncLib_AnimMontageGetBoneTransformWS final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USkeletalMeshComponent*           MeshComponent;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNeedFixRotator;                                  // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               FixRotator;                                        // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0040(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_AnimMontageGetBoneTransformWS) == 0x000010, "Wrong alignment on GSE_AnimFuncLib_AnimMontageGetBoneTransformWS");
//static_assert(sizeof(GSE_AnimFuncLib_AnimMontageGetBoneTransformWS) == 0x0000A0, "Wrong size on GSE_AnimFuncLib_AnimMontageGetBoneTransformWS");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetBoneTransformWS, AnimMontage) == 0x000000, "Member 'GSE_AnimFuncLib_AnimMontageGetBoneTransformWS::AnimMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetBoneTransformWS, MeshComponent) == 0x000008, "Member 'GSE_AnimFuncLib_AnimMontageGetBoneTransformWS::MeshComponent' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetBoneTransformWS, BoneName) == 0x000010, "Member 'GSE_AnimFuncLib_AnimMontageGetBoneTransformWS::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetBoneTransformWS, Pos) == 0x000018, "Member 'GSE_AnimFuncLib_AnimMontageGetBoneTransformWS::Pos' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetBoneTransformWS, IsNeedFixRotator) == 0x00001C, "Member 'GSE_AnimFuncLib_AnimMontageGetBoneTransformWS::IsNeedFixRotator' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetBoneTransformWS, FixRotator) == 0x000020, "Member 'GSE_AnimFuncLib_AnimMontageGetBoneTransformWS::FixRotator' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetBoneTransformWS, ReturnValue) == 0x000040, "Member 'GSE_AnimFuncLib_AnimMontageGetBoneTransformWS::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.AnimMontageGetMontageEndTimeForScale
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_AnimMontageGetMontageEndTimeForScale final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_AnimMontageGetMontageEndTimeForScale) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_AnimMontageGetMontageEndTimeForScale");
//static_assert(sizeof(GSE_AnimFuncLib_AnimMontageGetMontageEndTimeForScale) == 0x000010, "Wrong size on GSE_AnimFuncLib_AnimMontageGetMontageEndTimeForScale");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetMontageEndTimeForScale, AnimMontage) == 0x000000, "Member 'GSE_AnimFuncLib_AnimMontageGetMontageEndTimeForScale::AnimMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetMontageEndTimeForScale, ReturnValue) == 0x000008, "Member 'GSE_AnimFuncLib_AnimMontageGetMontageEndTimeForScale::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.AnimMontageGetQTEBoneTransform
// 0x0080 (0x0080 - 0x0000)
struct GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USkeletalMeshComponent*           MeshComponent;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform) == 0x000010, "Wrong alignment on GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform");
//static_assert(sizeof(GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform) == 0x000080, "Wrong size on GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform, AnimMontage) == 0x000000, "Member 'GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform::AnimMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform, MeshComponent) == 0x000008, "Member 'GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform::MeshComponent' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform, BoneName) == 0x000010, "Member 'GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform, Pos) == 0x000018, "Member 'GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform::Pos' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform, ReturnValue) == 0x000020, "Member 'GSE_AnimFuncLib_AnimMontageGetQTEBoneTransform::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.AnimMontageGetRootMotionLocationForScale
// 0x0048 (0x0048 - 0x0000)
struct GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutStartPos;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutEndPos;                                         // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftScaleTime;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightScaleTime;                                    // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale");
//static_assert(sizeof(GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale) == 0x000048, "Wrong size on GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale, AnimMontage) == 0x000000, "Member 'GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale::AnimMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale, OutStartPos) == 0x000008, "Member 'GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale::OutStartPos' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale, OutEndPos) == 0x000020, "Member 'GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale::OutEndPos' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale, LeftScaleTime) == 0x000038, "Member 'GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale::LeftScaleTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale, RightScaleTime) == 0x00003C, "Member 'GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale::RightScaleTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale, ReturnValue) == 0x000040, "Member 'GSE_AnimFuncLib_AnimMontageGetRootMotionLocationForScale::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.AnimMontageGetRootMotionRotationForScale
// 0x0048 (0x0048 - 0x0000)
struct GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutStartRotation;                                  // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               OutEndRotation;                                    // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LeftScaleTime;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightScaleTime;                                    // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale");
//static_assert(sizeof(GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale) == 0x000048, "Wrong size on GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale, AnimMontage) == 0x000000, "Member 'GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale::AnimMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale, OutStartRotation) == 0x000008, "Member 'GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale::OutStartRotation' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale, OutEndRotation) == 0x000020, "Member 'GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale::OutEndRotation' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale, LeftScaleTime) == 0x000038, "Member 'GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale::LeftScaleTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale, RightScaleTime) == 0x00003C, "Member 'GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale::RightScaleTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale, ReturnValue) == 0x000040, "Member 'GSE_AnimFuncLib_AnimMontageGetRootMotionRotationForScale::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.AnimMontageGetSocketLocationForScale
// 0x0040 (0x0040 - 0x0000)
struct GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutEndPos;                                         // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleTime;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SocketName;                                        // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale");
//static_assert(sizeof(GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale) == 0x000040, "Wrong size on GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale, AnimMontage) == 0x000000, "Member 'GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale::AnimMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale, OutEndPos) == 0x000008, "Member 'GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale::OutEndPos' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale, ScaleTime) == 0x000020, "Member 'GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale::ScaleTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale, SocketName) == 0x000028, "Member 'GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale::SocketName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale, ReturnValue) == 0x000038, "Member 'GSE_AnimFuncLib_AnimMontageGetSocketLocationForScale::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.AnimSequenceFindPosWithDistanceCurve
// 0x0018 (0x0018 - 0x0000)
struct GSE_AnimFuncLib_AnimSequenceFindPosWithDistanceCurve final
{
public:
	class UAnimSequence*                          AnimationSequence;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceValue;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_AnimSequenceFindPosWithDistanceCurve) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_AnimSequenceFindPosWithDistanceCurve");
//static_assert(sizeof(GSE_AnimFuncLib_AnimSequenceFindPosWithDistanceCurve) == 0x000018, "Wrong size on GSE_AnimFuncLib_AnimSequenceFindPosWithDistanceCurve");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceFindPosWithDistanceCurve, AnimationSequence) == 0x000000, "Member 'GSE_AnimFuncLib_AnimSequenceFindPosWithDistanceCurve::AnimationSequence' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceFindPosWithDistanceCurve, CurveName) == 0x000008, "Member 'GSE_AnimFuncLib_AnimSequenceFindPosWithDistanceCurve::CurveName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceFindPosWithDistanceCurve, DistanceValue) == 0x000010, "Member 'GSE_AnimFuncLib_AnimSequenceFindPosWithDistanceCurve::DistanceValue' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceFindPosWithDistanceCurve, ReturnValue) == 0x000014, "Member 'GSE_AnimFuncLib_AnimSequenceFindPosWithDistanceCurve::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.AnimSequenceGetRootMotionLocationForScale
// 0x0048 (0x0048 - 0x0000)
struct GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale final
{
public:
	class UAnimSequence*                          AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutStartPos;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutEndPos;                                         // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftScaleTime;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightScaleTime;                                    // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale");
//static_assert(sizeof(GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale) == 0x000048, "Wrong size on GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale, AnimMontage) == 0x000000, "Member 'GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale::AnimMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale, OutStartPos) == 0x000008, "Member 'GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale::OutStartPos' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale, OutEndPos) == 0x000020, "Member 'GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale::OutEndPos' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale, LeftScaleTime) == 0x000038, "Member 'GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale::LeftScaleTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale, RightScaleTime) == 0x00003C, "Member 'GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale::RightScaleTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale, ReturnValue) == 0x000040, "Member 'GSE_AnimFuncLib_AnimSequenceGetRootMotionLocationForScale::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.AnimSequenceGetRootMotionRotationForScale
// 0x0060 (0x0060 - 0x0000)
struct GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale final
{
public:
	class UAnimSequence*                          AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  OutStartPos;                                       // 0x0010(0x0020)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  OutEndPos;                                         // 0x0030(0x0020)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LeftScaleTime;                                     // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightScaleTime;                                    // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale) == 0x000010, "Wrong alignment on GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale");
//static_assert(sizeof(GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale) == 0x000060, "Wrong size on GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale, AnimMontage) == 0x000000, "Member 'GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale::AnimMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale, OutStartPos) == 0x000010, "Member 'GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale::OutStartPos' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale, OutEndPos) == 0x000030, "Member 'GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale::OutEndPos' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale, LeftScaleTime) == 0x000050, "Member 'GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale::LeftScaleTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale, RightScaleTime) == 0x000054, "Member 'GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale::RightScaleTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale, ReturnValue) == 0x000058, "Member 'GSE_AnimFuncLib_AnimSequenceGetRootMotionRotationForScale::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.ApplyDamage
// 0x0048 (0x0048 - 0x0000)
struct GSE_AnimFuncLib_ApplyDamage final
{
public:
	class UDestructibleComponent*                 Destructible;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDir;                                        // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseStrength;                                   // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_ApplyDamage) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_ApplyDamage");
//static_assert(sizeof(GSE_AnimFuncLib_ApplyDamage) == 0x000048, "Wrong size on GSE_AnimFuncLib_ApplyDamage");
//static_assert(offsetof(GSE_AnimFuncLib_ApplyDamage, Destructible) == 0x000000, "Member 'GSE_AnimFuncLib_ApplyDamage::Destructible' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ApplyDamage, DamageAmount) == 0x000008, "Member 'GSE_AnimFuncLib_ApplyDamage::DamageAmount' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ApplyDamage, HitLocation) == 0x000010, "Member 'GSE_AnimFuncLib_ApplyDamage::HitLocation' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ApplyDamage, ImpulseDir) == 0x000028, "Member 'GSE_AnimFuncLib_ApplyDamage::ImpulseDir' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ApplyDamage, ImpulseStrength) == 0x000040, "Member 'GSE_AnimFuncLib_ApplyDamage::ImpulseStrength' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.ApplyRadiusDamage
// 0x0038 (0x0038 - 0x0000)
struct GSE_AnimFuncLib_ApplyRadiusDamage final
{
public:
	class UDestructibleComponent*                 Destructible;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HurtOrigin;                                        // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRadius;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseStrength;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFullDamage;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_ApplyRadiusDamage) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_ApplyRadiusDamage");
//static_assert(sizeof(GSE_AnimFuncLib_ApplyRadiusDamage) == 0x000038, "Wrong size on GSE_AnimFuncLib_ApplyRadiusDamage");
//static_assert(offsetof(GSE_AnimFuncLib_ApplyRadiusDamage, Destructible) == 0x000000, "Member 'GSE_AnimFuncLib_ApplyRadiusDamage::Destructible' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ApplyRadiusDamage, BaseDamage) == 0x000008, "Member 'GSE_AnimFuncLib_ApplyRadiusDamage::BaseDamage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ApplyRadiusDamage, HurtOrigin) == 0x000010, "Member 'GSE_AnimFuncLib_ApplyRadiusDamage::HurtOrigin' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ApplyRadiusDamage, DamageRadius) == 0x000028, "Member 'GSE_AnimFuncLib_ApplyRadiusDamage::DamageRadius' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ApplyRadiusDamage, ImpulseStrength) == 0x00002C, "Member 'GSE_AnimFuncLib_ApplyRadiusDamage::ImpulseStrength' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ApplyRadiusDamage, bFullDamage) == 0x000030, "Member 'GSE_AnimFuncLib_ApplyRadiusDamage::bFullDamage' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.CalcSlotMontageLocalWeight
// 0x0018 (0x0018 - 0x0000)
struct GSE_AnimFuncLib_CalcSlotMontageLocalWeight final
{
public:
	class UAnimInstance*                          AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_CalcSlotMontageLocalWeight) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_CalcSlotMontageLocalWeight");
//static_assert(sizeof(GSE_AnimFuncLib_CalcSlotMontageLocalWeight) == 0x000018, "Wrong size on GSE_AnimFuncLib_CalcSlotMontageLocalWeight");
//static_assert(offsetof(GSE_AnimFuncLib_CalcSlotMontageLocalWeight, AnimInst) == 0x000000, "Member 'GSE_AnimFuncLib_CalcSlotMontageLocalWeight::AnimInst' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_CalcSlotMontageLocalWeight, SlotNodeName) == 0x000008, "Member 'GSE_AnimFuncLib_CalcSlotMontageLocalWeight::SlotNodeName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_CalcSlotMontageLocalWeight, ReturnValue) == 0x000010, "Member 'GSE_AnimFuncLib_CalcSlotMontageLocalWeight::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.ChangeAnimSeqParamAndSave
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_ChangeAnimSeqParamAndSave final
{
public:
	class UAnimSequence*                          AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRootMotion;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceRootLock;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_ChangeAnimSeqParamAndSave) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_ChangeAnimSeqParamAndSave");
//static_assert(sizeof(GSE_AnimFuncLib_ChangeAnimSeqParamAndSave) == 0x000010, "Wrong size on GSE_AnimFuncLib_ChangeAnimSeqParamAndSave");
//static_assert(offsetof(GSE_AnimFuncLib_ChangeAnimSeqParamAndSave, AnimMontage) == 0x000000, "Member 'GSE_AnimFuncLib_ChangeAnimSeqParamAndSave::AnimMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ChangeAnimSeqParamAndSave, bRootMotion) == 0x000008, "Member 'GSE_AnimFuncLib_ChangeAnimSeqParamAndSave::bRootMotion' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ChangeAnimSeqParamAndSave, bForceRootLock) == 0x000009, "Member 'GSE_AnimFuncLib_ChangeAnimSeqParamAndSave::bForceRootLock' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ChangeAnimSeqParamAndSave, ReturnValue) == 0x00000A, "Member 'GSE_AnimFuncLib_ChangeAnimSeqParamAndSave::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.ConditionallyDispatchQueuedAnimEvents
// 0x0008 (0x0008 - 0x0000)
struct GSE_AnimFuncLib_ConditionallyDispatchQueuedAnimEvents final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_ConditionallyDispatchQueuedAnimEvents) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_ConditionallyDispatchQueuedAnimEvents");
//static_assert(sizeof(GSE_AnimFuncLib_ConditionallyDispatchQueuedAnimEvents) == 0x000008, "Wrong size on GSE_AnimFuncLib_ConditionallyDispatchQueuedAnimEvents");
//static_assert(offsetof(GSE_AnimFuncLib_ConditionallyDispatchQueuedAnimEvents, SkeletalMeshComp) == 0x000000, "Member 'GSE_AnimFuncLib_ConditionallyDispatchQueuedAnimEvents::SkeletalMeshComp' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.CreateAimOffsetBlendSpace
// 0x0030 (0x0030 - 0x0000)
struct GSE_AnimFuncLib_CreateAimOffsetBlendSpace final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeleton*                              TargetSkeleton;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_CreateAimOffsetBlendSpace) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_CreateAimOffsetBlendSpace");
//static_assert(sizeof(GSE_AnimFuncLib_CreateAimOffsetBlendSpace) == 0x000030, "Wrong size on GSE_AnimFuncLib_CreateAimOffsetBlendSpace");
//static_assert(offsetof(GSE_AnimFuncLib_CreateAimOffsetBlendSpace, Path) == 0x000000, "Member 'GSE_AnimFuncLib_CreateAimOffsetBlendSpace::Path' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_CreateAimOffsetBlendSpace, Name_0) == 0x000010, "Member 'GSE_AnimFuncLib_CreateAimOffsetBlendSpace::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_CreateAimOffsetBlendSpace, TargetSkeleton) == 0x000020, "Member 'GSE_AnimFuncLib_CreateAimOffsetBlendSpace::TargetSkeleton' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_CreateAimOffsetBlendSpace, ReturnValue) == 0x000028, "Member 'GSE_AnimFuncLib_CreateAimOffsetBlendSpace::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.CreateAnimMontage
// 0x0030 (0x0030 - 0x0000)
struct GSE_AnimFuncLib_CreateAnimMontage final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeleton*                              TargetSkeleton;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_CreateAnimMontage) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_CreateAnimMontage");
//static_assert(sizeof(GSE_AnimFuncLib_CreateAnimMontage) == 0x000030, "Wrong size on GSE_AnimFuncLib_CreateAnimMontage");
//static_assert(offsetof(GSE_AnimFuncLib_CreateAnimMontage, Path) == 0x000000, "Member 'GSE_AnimFuncLib_CreateAnimMontage::Path' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_CreateAnimMontage, Name_0) == 0x000010, "Member 'GSE_AnimFuncLib_CreateAnimMontage::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_CreateAnimMontage, TargetSkeleton) == 0x000020, "Member 'GSE_AnimFuncLib_CreateAnimMontage::TargetSkeleton' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_CreateAnimMontage, ReturnValue) == 0x000028, "Member 'GSE_AnimFuncLib_CreateAnimMontage::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.CreateBlendSpace
// 0x0030 (0x0030 - 0x0000)
struct GSE_AnimFuncLib_CreateBlendSpace final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeleton*                              TargetSkeleton;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_CreateBlendSpace) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_CreateBlendSpace");
//static_assert(sizeof(GSE_AnimFuncLib_CreateBlendSpace) == 0x000030, "Wrong size on GSE_AnimFuncLib_CreateBlendSpace");
//static_assert(offsetof(GSE_AnimFuncLib_CreateBlendSpace, Path) == 0x000000, "Member 'GSE_AnimFuncLib_CreateBlendSpace::Path' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_CreateBlendSpace, Name_0) == 0x000010, "Member 'GSE_AnimFuncLib_CreateBlendSpace::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_CreateBlendSpace, TargetSkeleton) == 0x000020, "Member 'GSE_AnimFuncLib_CreateBlendSpace::TargetSkeleton' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_CreateBlendSpace, ReturnValue) == 0x000028, "Member 'GSE_AnimFuncLib_CreateBlendSpace::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.CreateBlendSpace1D
// 0x0030 (0x0030 - 0x0000)
struct GSE_AnimFuncLib_CreateBlendSpace1D final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeleton*                              TargetSkeleton;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_CreateBlendSpace1D) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_CreateBlendSpace1D");
//static_assert(sizeof(GSE_AnimFuncLib_CreateBlendSpace1D) == 0x000030, "Wrong size on GSE_AnimFuncLib_CreateBlendSpace1D");
//static_assert(offsetof(GSE_AnimFuncLib_CreateBlendSpace1D, Path) == 0x000000, "Member 'GSE_AnimFuncLib_CreateBlendSpace1D::Path' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_CreateBlendSpace1D, Name_0) == 0x000010, "Member 'GSE_AnimFuncLib_CreateBlendSpace1D::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_CreateBlendSpace1D, TargetSkeleton) == 0x000020, "Member 'GSE_AnimFuncLib_CreateBlendSpace1D::TargetSkeleton' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_CreateBlendSpace1D, ReturnValue) == 0x000028, "Member 'GSE_AnimFuncLib_CreateBlendSpace1D::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.DisableMontageRootMotionByInstanceID
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_DisableMontageRootMotionByInstanceID final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MontageInstanceID;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_DisableMontageRootMotionByInstanceID) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_DisableMontageRootMotionByInstanceID");
//static_assert(sizeof(GSE_AnimFuncLib_DisableMontageRootMotionByInstanceID) == 0x000010, "Wrong size on GSE_AnimFuncLib_DisableMontageRootMotionByInstanceID");
//static_assert(offsetof(GSE_AnimFuncLib_DisableMontageRootMotionByInstanceID, Character) == 0x000000, "Member 'GSE_AnimFuncLib_DisableMontageRootMotionByInstanceID::Character' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_DisableMontageRootMotionByInstanceID, MontageInstanceID) == 0x000008, "Member 'GSE_AnimFuncLib_DisableMontageRootMotionByInstanceID::MontageInstanceID' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.ExtractRootMotionFromAnimation
// 0x0070 (0x0070 - 0x0000)
struct GSE_AnimFuncLib_ExtractRootMotionFromAnimation final
{
public:
	const class UAnimSequenceBase*                Animation;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_ExtractRootMotionFromAnimation) == 0x000010, "Wrong alignment on GSE_AnimFuncLib_ExtractRootMotionFromAnimation");
//static_assert(sizeof(GSE_AnimFuncLib_ExtractRootMotionFromAnimation) == 0x000070, "Wrong size on GSE_AnimFuncLib_ExtractRootMotionFromAnimation");
//static_assert(offsetof(GSE_AnimFuncLib_ExtractRootMotionFromAnimation, Animation) == 0x000000, "Member 'GSE_AnimFuncLib_ExtractRootMotionFromAnimation::Animation' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ExtractRootMotionFromAnimation, StartTime) == 0x000008, "Member 'GSE_AnimFuncLib_ExtractRootMotionFromAnimation::StartTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ExtractRootMotionFromAnimation, EndTime) == 0x00000C, "Member 'GSE_AnimFuncLib_ExtractRootMotionFromAnimation::EndTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_ExtractRootMotionFromAnimation, ReturnValue) == 0x000010, "Member 'GSE_AnimFuncLib_ExtractRootMotionFromAnimation::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.FindAsset
// 0x0028 (0x0028 - 0x0000)
struct GSE_AnimFuncLib_FindAsset final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 InClass;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAssetData>                     AssetData;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_FindAsset) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_FindAsset");
//static_assert(sizeof(GSE_AnimFuncLib_FindAsset) == 0x000028, "Wrong size on GSE_AnimFuncLib_FindAsset");
//static_assert(offsetof(GSE_AnimFuncLib_FindAsset, Path) == 0x000000, "Member 'GSE_AnimFuncLib_FindAsset::Path' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_FindAsset, InClass) == 0x000010, "Member 'GSE_AnimFuncLib_FindAsset::InClass' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_FindAsset, AssetData) == 0x000018, "Member 'GSE_AnimFuncLib_FindAsset::AssetData' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.FindDestructibleMeshFromPathByBoneName
// 0x0028 (0x0028 - 0x0000)
struct GSE_AnimFuncLib_FindDestructibleMeshFromPathByBoneName final
{
public:
	class FString                                 FolderPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoneName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_FindDestructibleMeshFromPathByBoneName) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_FindDestructibleMeshFromPathByBoneName");
//static_assert(sizeof(GSE_AnimFuncLib_FindDestructibleMeshFromPathByBoneName) == 0x000028, "Wrong size on GSE_AnimFuncLib_FindDestructibleMeshFromPathByBoneName");
//static_assert(offsetof(GSE_AnimFuncLib_FindDestructibleMeshFromPathByBoneName, FolderPath) == 0x000000, "Member 'GSE_AnimFuncLib_FindDestructibleMeshFromPathByBoneName::FolderPath' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_FindDestructibleMeshFromPathByBoneName, BoneName) == 0x000010, "Member 'GSE_AnimFuncLib_FindDestructibleMeshFromPathByBoneName::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_FindDestructibleMeshFromPathByBoneName, ReturnValue) == 0x000020, "Member 'GSE_AnimFuncLib_FindDestructibleMeshFromPathByBoneName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GenerateAimOffsetBlendSpace
// 0x0030 (0x0030 - 0x0000)
struct GSE_AnimFuncLib_GenerateAimOffsetBlendSpace final
{
public:
	class UAimOffsetBlendSpace*                   AimOffset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExampleName;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_GenerateAimOffsetBlendSpace) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GenerateAimOffsetBlendSpace");
//static_assert(sizeof(GSE_AnimFuncLib_GenerateAimOffsetBlendSpace) == 0x000030, "Wrong size on GSE_AnimFuncLib_GenerateAimOffsetBlendSpace");
//static_assert(offsetof(GSE_AnimFuncLib_GenerateAimOffsetBlendSpace, AimOffset) == 0x000000, "Member 'GSE_AnimFuncLib_GenerateAimOffsetBlendSpace::AimOffset' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GenerateAimOffsetBlendSpace, Path) == 0x000008, "Member 'GSE_AnimFuncLib_GenerateAimOffsetBlendSpace::Path' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GenerateAimOffsetBlendSpace, ExampleName) == 0x000018, "Member 'GSE_AnimFuncLib_GenerateAimOffsetBlendSpace::ExampleName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GenerateAimOffsetBlendSpace, ReturnValue) == 0x000028, "Member 'GSE_AnimFuncLib_GenerateAimOffsetBlendSpace::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GenerateDefaultAxisParameters
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_GenerateDefaultAxisParameters final
{
public:
	class UBlendSpace*                            BlendSpace;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_GenerateDefaultAxisParameters) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GenerateDefaultAxisParameters");
//static_assert(sizeof(GSE_AnimFuncLib_GenerateDefaultAxisParameters) == 0x000010, "Wrong size on GSE_AnimFuncLib_GenerateDefaultAxisParameters");
//static_assert(offsetof(GSE_AnimFuncLib_GenerateDefaultAxisParameters, BlendSpace) == 0x000000, "Member 'GSE_AnimFuncLib_GenerateDefaultAxisParameters::BlendSpace' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GenerateDefaultAxisParameters, ReturnValue) == 0x000008, "Member 'GSE_AnimFuncLib_GenerateDefaultAxisParameters::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GenerateDestructibleComponentFromPath
// 0x0040 (0x0040 - 0x0000)
struct GSE_AnimFuncLib_GenerateDestructibleComponentFromPath final
{
public:
	class FString                                 FolderPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 TargetSkeletalMeshComp;                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDestructibleComponent*>         DestructibleMeshArray;                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneNameArray;                                     // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_GenerateDestructibleComponentFromPath) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GenerateDestructibleComponentFromPath");
//static_assert(sizeof(GSE_AnimFuncLib_GenerateDestructibleComponentFromPath) == 0x000040, "Wrong size on GSE_AnimFuncLib_GenerateDestructibleComponentFromPath");
//static_assert(offsetof(GSE_AnimFuncLib_GenerateDestructibleComponentFromPath, FolderPath) == 0x000000, "Member 'GSE_AnimFuncLib_GenerateDestructibleComponentFromPath::FolderPath' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GenerateDestructibleComponentFromPath, TargetSkeletalMeshComp) == 0x000010, "Member 'GSE_AnimFuncLib_GenerateDestructibleComponentFromPath::TargetSkeletalMeshComp' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GenerateDestructibleComponentFromPath, DestructibleMeshArray) == 0x000018, "Member 'GSE_AnimFuncLib_GenerateDestructibleComponentFromPath::DestructibleMeshArray' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GenerateDestructibleComponentFromPath, BoneNameArray) == 0x000028, "Member 'GSE_AnimFuncLib_GenerateDestructibleComponentFromPath::BoneNameArray' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GenerateDestructibleComponentFromPath, ReturnValue) == 0x000038, "Member 'GSE_AnimFuncLib_GenerateDestructibleComponentFromPath::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GenerateDestructibleComponentFromPathWithEditor
// 0x0020 (0x0020 - 0x0000)
struct GSE_AnimFuncLib_GenerateDestructibleComponentFromPathWithEditor final
{
public:
	class FString                                 FolderPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TargetActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_GenerateDestructibleComponentFromPathWithEditor) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GenerateDestructibleComponentFromPathWithEditor");
//static_assert(sizeof(GSE_AnimFuncLib_GenerateDestructibleComponentFromPathWithEditor) == 0x000020, "Wrong size on GSE_AnimFuncLib_GenerateDestructibleComponentFromPathWithEditor");
//static_assert(offsetof(GSE_AnimFuncLib_GenerateDestructibleComponentFromPathWithEditor, FolderPath) == 0x000000, "Member 'GSE_AnimFuncLib_GenerateDestructibleComponentFromPathWithEditor::FolderPath' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GenerateDestructibleComponentFromPathWithEditor, TargetActor) == 0x000010, "Member 'GSE_AnimFuncLib_GenerateDestructibleComponentFromPathWithEditor::TargetActor' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GenerateDestructibleComponentFromPathWithEditor, ReturnValue) == 0x000018, "Member 'GSE_AnimFuncLib_GenerateDestructibleComponentFromPathWithEditor::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetActiveMontageInstanceID
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_GetActiveMontageInstanceID final
{
public:
	const class UAnimInstance*                    AnimInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_GetActiveMontageInstanceID) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetActiveMontageInstanceID");
//static_assert(sizeof(GSE_AnimFuncLib_GetActiveMontageInstanceID) == 0x000010, "Wrong size on GSE_AnimFuncLib_GetActiveMontageInstanceID");
//static_assert(offsetof(GSE_AnimFuncLib_GetActiveMontageInstanceID, AnimInstance) == 0x000000, "Member 'GSE_AnimFuncLib_GetActiveMontageInstanceID::AnimInstance' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetActiveMontageInstanceID, ReturnValue) == 0x000008, "Member 'GSE_AnimFuncLib_GetActiveMontageInstanceID::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetAllAnimationsOfSkeleton
// 0x0028 (0x0028 - 0x0000)
struct GSE_AnimFuncLib_GetAllAnimationsOfSkeleton final
{
public:
	class USkeletalMesh*                          SkeletonMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AnimationBasePath;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimationAsset*>                ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetAllAnimationsOfSkeleton) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetAllAnimationsOfSkeleton");
//static_assert(sizeof(GSE_AnimFuncLib_GetAllAnimationsOfSkeleton) == 0x000028, "Wrong size on GSE_AnimFuncLib_GetAllAnimationsOfSkeleton");
//static_assert(offsetof(GSE_AnimFuncLib_GetAllAnimationsOfSkeleton, SkeletonMesh) == 0x000000, "Member 'GSE_AnimFuncLib_GetAllAnimationsOfSkeleton::SkeletonMesh' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetAllAnimationsOfSkeleton, AnimationBasePath) == 0x000008, "Member 'GSE_AnimFuncLib_GetAllAnimationsOfSkeleton::AnimationBasePath' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetAllAnimationsOfSkeleton, ReturnValue) == 0x000018, "Member 'GSE_AnimFuncLib_GetAllAnimationsOfSkeleton::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetAllAnimSyncMarkers
// 0x0020 (0x0020 - 0x0000)
struct GSE_AnimFuncLib_GetAllAnimSyncMarkers final
{
public:
	const class UAnimSequence*                    AnimSequence;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimSyncMarker>                OutSyncMarkers;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_GetAllAnimSyncMarkers) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetAllAnimSyncMarkers");
//static_assert(sizeof(GSE_AnimFuncLib_GetAllAnimSyncMarkers) == 0x000020, "Wrong size on GSE_AnimFuncLib_GetAllAnimSyncMarkers");
//static_assert(offsetof(GSE_AnimFuncLib_GetAllAnimSyncMarkers, AnimSequence) == 0x000000, "Member 'GSE_AnimFuncLib_GetAllAnimSyncMarkers::AnimSequence' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetAllAnimSyncMarkers, OutSyncMarkers) == 0x000008, "Member 'GSE_AnimFuncLib_GetAllAnimSyncMarkers::OutSyncMarkers' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetAllAnimSyncMarkers, ReturnValue) == 0x000018, "Member 'GSE_AnimFuncLib_GetAllAnimSyncMarkers::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetAllNotifyEvent
// 0x0018 (0x0018 - 0x0000)
struct GSE_AnimFuncLib_GetAllNotifyEvent final
{
public:
	class UAnimMontage*                           TargetMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>               AnimNotifyEventList;                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetAllNotifyEvent) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetAllNotifyEvent");
//static_assert(sizeof(GSE_AnimFuncLib_GetAllNotifyEvent) == 0x000018, "Wrong size on GSE_AnimFuncLib_GetAllNotifyEvent");
//static_assert(offsetof(GSE_AnimFuncLib_GetAllNotifyEvent, TargetMontage) == 0x000000, "Member 'GSE_AnimFuncLib_GetAllNotifyEvent::TargetMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetAllNotifyEvent, AnimNotifyEventList) == 0x000008, "Member 'GSE_AnimFuncLib_GetAllNotifyEvent::AnimNotifyEventList' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetAllNotifyEventInAM
// 0x0028 (0x0028 - 0x0000)
struct GSE_AnimFuncLib_GetAllNotifyEventInAM final
{
public:
	class UAnimMontage*                           TargetMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGSNotifyEventTimeInfo>         TimeInfoList;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>               ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetAllNotifyEventInAM) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetAllNotifyEventInAM");
//static_assert(sizeof(GSE_AnimFuncLib_GetAllNotifyEventInAM) == 0x000028, "Wrong size on GSE_AnimFuncLib_GetAllNotifyEventInAM");
//static_assert(offsetof(GSE_AnimFuncLib_GetAllNotifyEventInAM, TargetMontage) == 0x000000, "Member 'GSE_AnimFuncLib_GetAllNotifyEventInAM::TargetMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetAllNotifyEventInAM, TimeInfoList) == 0x000008, "Member 'GSE_AnimFuncLib_GetAllNotifyEventInAM::TimeInfoList' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetAllNotifyEventInAM, ReturnValue) == 0x000018, "Member 'GSE_AnimFuncLib_GetAllNotifyEventInAM::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetAnimAllNotifyEventIncludeAS
// 0x0020 (0x0020 - 0x0000)
struct GSE_AnimFuncLib_GetAnimAllNotifyEventIncludeAS final
{
public:
	TArray<class UAnimSequenceBase*>              AnimBases;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>               AnimNotifyEventList;                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetAnimAllNotifyEventIncludeAS) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetAnimAllNotifyEventIncludeAS");
//static_assert(sizeof(GSE_AnimFuncLib_GetAnimAllNotifyEventIncludeAS) == 0x000020, "Wrong size on GSE_AnimFuncLib_GetAnimAllNotifyEventIncludeAS");
//static_assert(offsetof(GSE_AnimFuncLib_GetAnimAllNotifyEventIncludeAS, AnimBases) == 0x000000, "Member 'GSE_AnimFuncLib_GetAnimAllNotifyEventIncludeAS::AnimBases' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetAnimAllNotifyEventIncludeAS, AnimNotifyEventList) == 0x000010, "Member 'GSE_AnimFuncLib_GetAnimAllNotifyEventIncludeAS::AnimNotifyEventList' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetAnimCurrentTime
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_GetAnimCurrentTime final
{
public:
	class UAnimInstance*                          AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromInstanceID;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetAnimCurrentTime) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetAnimCurrentTime");
//static_assert(sizeof(GSE_AnimFuncLib_GetAnimCurrentTime) == 0x000010, "Wrong size on GSE_AnimFuncLib_GetAnimCurrentTime");
//static_assert(offsetof(GSE_AnimFuncLib_GetAnimCurrentTime, AnimInst) == 0x000000, "Member 'GSE_AnimFuncLib_GetAnimCurrentTime::AnimInst' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetAnimCurrentTime, FromInstanceID) == 0x000008, "Member 'GSE_AnimFuncLib_GetAnimCurrentTime::FromInstanceID' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetAnimCurrentTime, ReturnValue) == 0x00000C, "Member 'GSE_AnimFuncLib_GetAnimCurrentTime::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetBoneTransform
// 0x0070 (0x0070 - 0x0000)
struct GSE_AnimFuncLib_GetBoneTransform final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetBoneTransform) == 0x000010, "Wrong alignment on GSE_AnimFuncLib_GetBoneTransform");
//static_assert(sizeof(GSE_AnimFuncLib_GetBoneTransform) == 0x000070, "Wrong size on GSE_AnimFuncLib_GetBoneTransform");
//static_assert(offsetof(GSE_AnimFuncLib_GetBoneTransform, Mesh) == 0x000000, "Member 'GSE_AnimFuncLib_GetBoneTransform::Mesh' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetBoneTransform, BoneIndex) == 0x000008, "Member 'GSE_AnimFuncLib_GetBoneTransform::BoneIndex' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetBoneTransform, ReturnValue) == 0x000010, "Member 'GSE_AnimFuncLib_GetBoneTransform::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetBoneTransformByTime
// 0x0080 (0x0080 - 0x0000)
struct GSE_AnimFuncLib_GetBoneTransformByTime final
{
public:
	class UAnimSequence*                          AnimationSequence;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrackIndex;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRawData;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetBoneTransformByTime) == 0x000010, "Wrong alignment on GSE_AnimFuncLib_GetBoneTransformByTime");
//static_assert(sizeof(GSE_AnimFuncLib_GetBoneTransformByTime) == 0x000080, "Wrong size on GSE_AnimFuncLib_GetBoneTransformByTime");
//static_assert(offsetof(GSE_AnimFuncLib_GetBoneTransformByTime, AnimationSequence) == 0x000000, "Member 'GSE_AnimFuncLib_GetBoneTransformByTime::AnimationSequence' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetBoneTransformByTime, Time) == 0x000008, "Member 'GSE_AnimFuncLib_GetBoneTransformByTime::Time' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetBoneTransformByTime, TrackIndex) == 0x00000C, "Member 'GSE_AnimFuncLib_GetBoneTransformByTime::TrackIndex' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetBoneTransformByTime, UseRawData) == 0x000010, "Member 'GSE_AnimFuncLib_GetBoneTransformByTime::UseRawData' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetBoneTransformByTime, ReturnValue) == 0x000020, "Member 'GSE_AnimFuncLib_GetBoneTransformByTime::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetChildBones
// 0x0078 (0x0078 - 0x0000)
struct GSE_AnimFuncLib_GetChildBones final
{
public:
	class USkeleton*                              InSkeleton;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentBoneName;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneNameFilter;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TSet<class FName>                             ChildBones;                                        // 0x0020(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_GetChildBones) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetChildBones");
//static_assert(sizeof(GSE_AnimFuncLib_GetChildBones) == 0x000078, "Wrong size on GSE_AnimFuncLib_GetChildBones");
//static_assert(offsetof(GSE_AnimFuncLib_GetChildBones, InSkeleton) == 0x000000, "Member 'GSE_AnimFuncLib_GetChildBones::InSkeleton' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetChildBones, ParentBoneName) == 0x000008, "Member 'GSE_AnimFuncLib_GetChildBones::ParentBoneName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetChildBones, BoneNameFilter) == 0x000010, "Member 'GSE_AnimFuncLib_GetChildBones::BoneNameFilter' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetChildBones, ChildBones) == 0x000020, "Member 'GSE_AnimFuncLib_GetChildBones::ChildBones' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetChildBones, ReturnValue) == 0x000070, "Member 'GSE_AnimFuncLib_GetChildBones::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetChildSockets
// 0x0020 (0x0020 - 0x0000)
struct GSE_AnimFuncLib_GetChildSockets final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseBoneName;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ChildSocketNames;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetChildSockets) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetChildSockets");
//static_assert(sizeof(GSE_AnimFuncLib_GetChildSockets) == 0x000020, "Wrong size on GSE_AnimFuncLib_GetChildSockets");
//static_assert(offsetof(GSE_AnimFuncLib_GetChildSockets, SkeletalMeshComp) == 0x000000, "Member 'GSE_AnimFuncLib_GetChildSockets::SkeletalMeshComp' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetChildSockets, BaseBoneName) == 0x000008, "Member 'GSE_AnimFuncLib_GetChildSockets::BaseBoneName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetChildSockets, ChildSocketNames) == 0x000010, "Member 'GSE_AnimFuncLib_GetChildSockets::ChildSocketNames' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetCurrentActiveMontageInstanceID
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_GetCurrentActiveMontageInstanceID final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_GetCurrentActiveMontageInstanceID) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetCurrentActiveMontageInstanceID");
//static_assert(sizeof(GSE_AnimFuncLib_GetCurrentActiveMontageInstanceID) == 0x000010, "Wrong size on GSE_AnimFuncLib_GetCurrentActiveMontageInstanceID");
//static_assert(offsetof(GSE_AnimFuncLib_GetCurrentActiveMontageInstanceID, Character) == 0x000000, "Member 'GSE_AnimFuncLib_GetCurrentActiveMontageInstanceID::Character' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetCurrentActiveMontageInstanceID, ReturnValue) == 0x000008, "Member 'GSE_AnimFuncLib_GetCurrentActiveMontageInstanceID::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetFolderPathFromFullPath
// 0x0020 (0x0020 - 0x0000)
struct GSE_AnimFuncLib_GetFolderPathFromFullPath final
{
public:
	class FString                                 FullPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetFolderPathFromFullPath) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetFolderPathFromFullPath");
//static_assert(sizeof(GSE_AnimFuncLib_GetFolderPathFromFullPath) == 0x000020, "Wrong size on GSE_AnimFuncLib_GetFolderPathFromFullPath");
//static_assert(offsetof(GSE_AnimFuncLib_GetFolderPathFromFullPath, FullPath) == 0x000000, "Member 'GSE_AnimFuncLib_GetFolderPathFromFullPath::FullPath' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetFolderPathFromFullPath, ReturnValue) == 0x000010, "Member 'GSE_AnimFuncLib_GetFolderPathFromFullPath::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetMontageComboSkillID
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_GetMontageComboSkillID final
{
public:
	class UAnimMontage*                           AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetMontageComboSkillID) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetMontageComboSkillID");
//static_assert(sizeof(GSE_AnimFuncLib_GetMontageComboSkillID) == 0x000010, "Wrong size on GSE_AnimFuncLib_GetMontageComboSkillID");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageComboSkillID, AnimInst) == 0x000000, "Member 'GSE_AnimFuncLib_GetMontageComboSkillID::AnimInst' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageComboSkillID, Index_0) == 0x000008, "Member 'GSE_AnimFuncLib_GetMontageComboSkillID::Index_0' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageComboSkillID, ReturnValue) == 0x00000C, "Member 'GSE_AnimFuncLib_GetMontageComboSkillID::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetMontageEffectID
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_GetMontageEffectID final
{
public:
	class UAnimMontage*                           AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetMontageEffectID) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetMontageEffectID");
//static_assert(sizeof(GSE_AnimFuncLib_GetMontageEffectID) == 0x000010, "Wrong size on GSE_AnimFuncLib_GetMontageEffectID");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageEffectID, AnimInst) == 0x000000, "Member 'GSE_AnimFuncLib_GetMontageEffectID::AnimInst' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageEffectID, Index_0) == 0x000008, "Member 'GSE_AnimFuncLib_GetMontageEffectID::Index_0' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageEffectID, ReturnValue) == 0x00000C, "Member 'GSE_AnimFuncLib_GetMontageEffectID::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetMontageNextSection
// 0x0018 (0x0018 - 0x0000)
struct GSE_AnimFuncLib_GetMontageNextSection final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetMontageNextSection) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetMontageNextSection");
//static_assert(sizeof(GSE_AnimFuncLib_GetMontageNextSection) == 0x000018, "Wrong size on GSE_AnimFuncLib_GetMontageNextSection");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageNextSection, AnimInstance) == 0x000000, "Member 'GSE_AnimFuncLib_GetMontageNextSection::AnimInstance' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageNextSection, AnimMontage) == 0x000008, "Member 'GSE_AnimFuncLib_GetMontageNextSection::AnimMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageNextSection, ReturnValue) == 0x000010, "Member 'GSE_AnimFuncLib_GetMontageNextSection::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetMontageNotifyName
// 0x0020 (0x0020 - 0x0000)
struct GSE_AnimFuncLib_GetMontageNotifyName final
{
public:
	class UAnimMontage*                           AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetMontageNotifyName) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetMontageNotifyName");
//static_assert(sizeof(GSE_AnimFuncLib_GetMontageNotifyName) == 0x000020, "Wrong size on GSE_AnimFuncLib_GetMontageNotifyName");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageNotifyName, AnimInst) == 0x000000, "Member 'GSE_AnimFuncLib_GetMontageNotifyName::AnimInst' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageNotifyName, Index_0) == 0x000008, "Member 'GSE_AnimFuncLib_GetMontageNotifyName::Index_0' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageNotifyName, ReturnValue) == 0x000010, "Member 'GSE_AnimFuncLib_GetMontageNotifyName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetMontageNotifyTriggerTime
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_GetMontageNotifyTriggerTime final
{
public:
	class UAnimMontage*                           AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromInstanceID;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetMontageNotifyTriggerTime) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetMontageNotifyTriggerTime");
//static_assert(sizeof(GSE_AnimFuncLib_GetMontageNotifyTriggerTime) == 0x000010, "Wrong size on GSE_AnimFuncLib_GetMontageNotifyTriggerTime");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageNotifyTriggerTime, AnimInst) == 0x000000, "Member 'GSE_AnimFuncLib_GetMontageNotifyTriggerTime::AnimInst' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageNotifyTriggerTime, FromInstanceID) == 0x000008, "Member 'GSE_AnimFuncLib_GetMontageNotifyTriggerTime::FromInstanceID' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageNotifyTriggerTime, ReturnValue) == 0x00000C, "Member 'GSE_AnimFuncLib_GetMontageNotifyTriggerTime::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetMontageSectionName
// 0x0018 (0x0018 - 0x0000)
struct GSE_AnimFuncLib_GetMontageSectionName final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_GetMontageSectionName) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetMontageSectionName");
//static_assert(sizeof(GSE_AnimFuncLib_GetMontageSectionName) == 0x000018, "Wrong size on GSE_AnimFuncLib_GetMontageSectionName");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageSectionName, AnimMontage) == 0x000000, "Member 'GSE_AnimFuncLib_GetMontageSectionName::AnimMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageSectionName, Index_0) == 0x000008, "Member 'GSE_AnimFuncLib_GetMontageSectionName::Index_0' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageSectionName, ReturnValue) == 0x00000C, "Member 'GSE_AnimFuncLib_GetMontageSectionName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetMontageSectionStartAndEndTime
// 0x0018 (0x0018 - 0x0000)
struct GSE_AnimFuncLib_GetMontageSectionStartAndEndTime final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutStartTime;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutEndTime;                                        // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetMontageSectionStartAndEndTime) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetMontageSectionStartAndEndTime");
//static_assert(sizeof(GSE_AnimFuncLib_GetMontageSectionStartAndEndTime) == 0x000018, "Wrong size on GSE_AnimFuncLib_GetMontageSectionStartAndEndTime");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageSectionStartAndEndTime, AnimMontage) == 0x000000, "Member 'GSE_AnimFuncLib_GetMontageSectionStartAndEndTime::AnimMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageSectionStartAndEndTime, SectionName) == 0x000008, "Member 'GSE_AnimFuncLib_GetMontageSectionStartAndEndTime::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageSectionStartAndEndTime, OutStartTime) == 0x000010, "Member 'GSE_AnimFuncLib_GetMontageSectionStartAndEndTime::OutStartTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageSectionStartAndEndTime, OutEndTime) == 0x000014, "Member 'GSE_AnimFuncLib_GetMontageSectionStartAndEndTime::OutEndTime' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetMontageSlotName
// 0x0018 (0x0018 - 0x0000)
struct GSE_AnimFuncLib_GetMontageSlotName final
{
public:
	const class UAnimMontage*                     Montage;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_GetMontageSlotName) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetMontageSlotName");
//static_assert(sizeof(GSE_AnimFuncLib_GetMontageSlotName) == 0x000018, "Wrong size on GSE_AnimFuncLib_GetMontageSlotName");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageSlotName, Montage) == 0x000000, "Member 'GSE_AnimFuncLib_GetMontageSlotName::Montage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageSlotName, SlotIndex) == 0x000008, "Member 'GSE_AnimFuncLib_GetMontageSlotName::SlotIndex' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetMontageSlotName, ReturnValue) == 0x00000C, "Member 'GSE_AnimFuncLib_GetMontageSlotName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetNotifyComboEndTime
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_GetNotifyComboEndTime final
{
public:
	class UAnimMontage*                           AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetNotifyComboEndTime) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetNotifyComboEndTime");
//static_assert(sizeof(GSE_AnimFuncLib_GetNotifyComboEndTime) == 0x000010, "Wrong size on GSE_AnimFuncLib_GetNotifyComboEndTime");
//static_assert(offsetof(GSE_AnimFuncLib_GetNotifyComboEndTime, AnimInst) == 0x000000, "Member 'GSE_AnimFuncLib_GetNotifyComboEndTime::AnimInst' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetNotifyComboEndTime, Index_0) == 0x000008, "Member 'GSE_AnimFuncLib_GetNotifyComboEndTime::Index_0' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetNotifyComboEndTime, ReturnValue) == 0x00000C, "Member 'GSE_AnimFuncLib_GetNotifyComboEndTime::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetNotifyEndTriggerTime
// 0x00C0 (0x00C0 - 0x0000)
struct GSE_AnimFuncLib_GetNotifyEndTriggerTime final
{
public:
	struct FAnimNotifyEvent                       AnimNotifyEvent;                                   // 0x0000(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x00B8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_GetNotifyEndTriggerTime) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetNotifyEndTriggerTime");
//static_assert(sizeof(GSE_AnimFuncLib_GetNotifyEndTriggerTime) == 0x0000C0, "Wrong size on GSE_AnimFuncLib_GetNotifyEndTriggerTime");
//static_assert(offsetof(GSE_AnimFuncLib_GetNotifyEndTriggerTime, AnimNotifyEvent) == 0x000000, "Member 'GSE_AnimFuncLib_GetNotifyEndTriggerTime::AnimNotifyEvent' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetNotifyEndTriggerTime, ReturnValue) == 0x0000B8, "Member 'GSE_AnimFuncLib_GetNotifyEndTriggerTime::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetNotifyTriggerTime
// 0x00C0 (0x00C0 - 0x0000)
struct GSE_AnimFuncLib_GetNotifyTriggerTime final
{
public:
	struct FAnimNotifyEvent                       AnimNotifyEvent;                                   // 0x0000(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x00B8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_GetNotifyTriggerTime) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetNotifyTriggerTime");
//static_assert(sizeof(GSE_AnimFuncLib_GetNotifyTriggerTime) == 0x0000C0, "Wrong size on GSE_AnimFuncLib_GetNotifyTriggerTime");
//static_assert(offsetof(GSE_AnimFuncLib_GetNotifyTriggerTime, AnimNotifyEvent) == 0x000000, "Member 'GSE_AnimFuncLib_GetNotifyTriggerTime::AnimNotifyEvent' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetNotifyTriggerTime, ReturnValue) == 0x0000B8, "Member 'GSE_AnimFuncLib_GetNotifyTriggerTime::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetOneAnimAllNotifyEventIncludeAS
// 0x0018 (0x0018 - 0x0000)
struct GSE_AnimFuncLib_GetOneAnimAllNotifyEventIncludeAS final
{
public:
	class UAnimSequenceBase*                      TargetAnim;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>               AnimNotifyEventList;                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetOneAnimAllNotifyEventIncludeAS) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetOneAnimAllNotifyEventIncludeAS");
//static_assert(sizeof(GSE_AnimFuncLib_GetOneAnimAllNotifyEventIncludeAS) == 0x000018, "Wrong size on GSE_AnimFuncLib_GetOneAnimAllNotifyEventIncludeAS");
//static_assert(offsetof(GSE_AnimFuncLib_GetOneAnimAllNotifyEventIncludeAS, TargetAnim) == 0x000000, "Member 'GSE_AnimFuncLib_GetOneAnimAllNotifyEventIncludeAS::TargetAnim' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetOneAnimAllNotifyEventIncludeAS, AnimNotifyEventList) == 0x000008, "Member 'GSE_AnimFuncLib_GetOneAnimAllNotifyEventIncludeAS::AnimNotifyEventList' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.GetSkeleton
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_GetSkeleton final
{
public:
	class UAnimSequenceBase*                      AnimSequenceBase;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeleton*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_GetSkeleton) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_GetSkeleton");
//static_assert(sizeof(GSE_AnimFuncLib_GetSkeleton) == 0x000010, "Wrong size on GSE_AnimFuncLib_GetSkeleton");
//static_assert(offsetof(GSE_AnimFuncLib_GetSkeleton, AnimSequenceBase) == 0x000000, "Member 'GSE_AnimFuncLib_GetSkeleton::AnimSequenceBase' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_GetSkeleton, ReturnValue) == 0x000008, "Member 'GSE_AnimFuncLib_GetSkeleton::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.InitAnimGraphNode
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_InitAnimGraphNode final
{
public:
	class UAnimInstance*                          AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_InitAnimGraphNode) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_InitAnimGraphNode");
//static_assert(sizeof(GSE_AnimFuncLib_InitAnimGraphNode) == 0x000010, "Wrong size on GSE_AnimFuncLib_InitAnimGraphNode");
//static_assert(offsetof(GSE_AnimFuncLib_InitAnimGraphNode, AnimInst) == 0x000000, "Member 'GSE_AnimFuncLib_InitAnimGraphNode::AnimInst' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_InitAnimGraphNode, Tag) == 0x000008, "Member 'GSE_AnimFuncLib_InitAnimGraphNode::Tag' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.IsInRootMotionAM
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_IsInRootMotionAM final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_IsInRootMotionAM) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_IsInRootMotionAM");
//static_assert(sizeof(GSE_AnimFuncLib_IsInRootMotionAM) == 0x000010, "Wrong size on GSE_AnimFuncLib_IsInRootMotionAM");
//static_assert(offsetof(GSE_AnimFuncLib_IsInRootMotionAM, Character) == 0x000000, "Member 'GSE_AnimFuncLib_IsInRootMotionAM::Character' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_IsInRootMotionAM, ReturnValue) == 0x000008, "Member 'GSE_AnimFuncLib_IsInRootMotionAM::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.IsSlotPlayingMontage
// 0x0018 (0x0018 - 0x0000)
struct GSE_AnimFuncLib_IsSlotPlayingMontage final
{
public:
	class UAnimInstance*                          AnimInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_IsSlotPlayingMontage) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_IsSlotPlayingMontage");
//static_assert(sizeof(GSE_AnimFuncLib_IsSlotPlayingMontage) == 0x000018, "Wrong size on GSE_AnimFuncLib_IsSlotPlayingMontage");
//static_assert(offsetof(GSE_AnimFuncLib_IsSlotPlayingMontage, AnimInst) == 0x000000, "Member 'GSE_AnimFuncLib_IsSlotPlayingMontage::AnimInst' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_IsSlotPlayingMontage, SlotNodeName) == 0x000008, "Member 'GSE_AnimFuncLib_IsSlotPlayingMontage::SlotNodeName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_IsSlotPlayingMontage, ReturnValue) == 0x000010, "Member 'GSE_AnimFuncLib_IsSlotPlayingMontage::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.MarkDirty
// 0x0008 (0x0008 - 0x0000)
struct GSE_AnimFuncLib_MarkDirty final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_MarkDirty) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_MarkDirty");
//static_assert(sizeof(GSE_AnimFuncLib_MarkDirty) == 0x000008, "Wrong size on GSE_AnimFuncLib_MarkDirty");
//static_assert(offsetof(GSE_AnimFuncLib_MarkDirty, Obj) == 0x000000, "Member 'GSE_AnimFuncLib_MarkDirty::Obj' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.Montage_GetBoneRelativeTransformCS
// 0x0080 (0x0080 - 0x0000)
struct GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS final
{
public:
	const class UAnimMontage*                     InMontage;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBoneName;                                        // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSlotName;                                        // 0x0014(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExtractRootMotion;                                // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS) == 0x000010, "Wrong alignment on GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS");
//static_assert(sizeof(GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS) == 0x000080, "Wrong size on GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS");
//static_assert(offsetof(GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS, InMontage) == 0x000000, "Member 'GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS::InMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS, InTime) == 0x000008, "Member 'GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS::InTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS, InBoneName) == 0x00000C, "Member 'GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS::InBoneName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS, InSlotName) == 0x000014, "Member 'GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS::InSlotName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS, bExtractRootMotion) == 0x00001C, "Member 'GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS::bExtractRootMotion' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS, ReturnValue) == 0x000020, "Member 'GSE_AnimFuncLib_Montage_GetBoneRelativeTransformCS::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.Montage_GetBoneTransformCS
// 0x0080 (0x0080 - 0x0000)
struct GSE_AnimFuncLib_Montage_GetBoneTransformCS final
{
public:
	const class UAnimMontage*                     InMontage;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBoneName;                                        // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSlotName;                                        // 0x0014(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExtractRootMotion;                                // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_Montage_GetBoneTransformCS) == 0x000010, "Wrong alignment on GSE_AnimFuncLib_Montage_GetBoneTransformCS");
//static_assert(sizeof(GSE_AnimFuncLib_Montage_GetBoneTransformCS) == 0x000080, "Wrong size on GSE_AnimFuncLib_Montage_GetBoneTransformCS");
//static_assert(offsetof(GSE_AnimFuncLib_Montage_GetBoneTransformCS, InMontage) == 0x000000, "Member 'GSE_AnimFuncLib_Montage_GetBoneTransformCS::InMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Montage_GetBoneTransformCS, InTime) == 0x000008, "Member 'GSE_AnimFuncLib_Montage_GetBoneTransformCS::InTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Montage_GetBoneTransformCS, InBoneName) == 0x00000C, "Member 'GSE_AnimFuncLib_Montage_GetBoneTransformCS::InBoneName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Montage_GetBoneTransformCS, InSlotName) == 0x000014, "Member 'GSE_AnimFuncLib_Montage_GetBoneTransformCS::InSlotName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Montage_GetBoneTransformCS, bExtractRootMotion) == 0x00001C, "Member 'GSE_AnimFuncLib_Montage_GetBoneTransformCS::bExtractRootMotion' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Montage_GetBoneTransformCS, ReturnValue) == 0x000020, "Member 'GSE_AnimFuncLib_Montage_GetBoneTransformCS::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.ReinitAnim
// 0x0008 (0x0008 - 0x0000)
struct GSE_AnimFuncLib_ReinitAnim final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_ReinitAnim) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_ReinitAnim");
//static_assert(sizeof(GSE_AnimFuncLib_ReinitAnim) == 0x000008, "Wrong size on GSE_AnimFuncLib_ReinitAnim");
//static_assert(offsetof(GSE_AnimFuncLib_ReinitAnim, Owner) == 0x000000, "Member 'GSE_AnimFuncLib_ReinitAnim::Owner' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.RemoveAllPoints
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_RemoveAllPoints final
{
public:
	class UBlendSpace*                            BlendSpace;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_RemoveAllPoints) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_RemoveAllPoints");
//static_assert(sizeof(GSE_AnimFuncLib_RemoveAllPoints) == 0x000010, "Wrong size on GSE_AnimFuncLib_RemoveAllPoints");
//static_assert(offsetof(GSE_AnimFuncLib_RemoveAllPoints, BlendSpace) == 0x000000, "Member 'GSE_AnimFuncLib_RemoveAllPoints::BlendSpace' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_RemoveAllPoints, ReturnValue) == 0x000008, "Member 'GSE_AnimFuncLib_RemoveAllPoints::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.RemoveNotifyEventByIndex
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_RemoveNotifyEventByIndex final
{
public:
	class UAnimMontage*                           TargetMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_RemoveNotifyEventByIndex) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_RemoveNotifyEventByIndex");
//static_assert(sizeof(GSE_AnimFuncLib_RemoveNotifyEventByIndex) == 0x000010, "Wrong size on GSE_AnimFuncLib_RemoveNotifyEventByIndex");
//static_assert(offsetof(GSE_AnimFuncLib_RemoveNotifyEventByIndex, TargetMontage) == 0x000000, "Member 'GSE_AnimFuncLib_RemoveNotifyEventByIndex::TargetMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_RemoveNotifyEventByIndex, Index_0) == 0x000008, "Member 'GSE_AnimFuncLib_RemoveNotifyEventByIndex::Index_0' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.RemoveNotifyTrackByName
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_RemoveNotifyTrackByName final
{
public:
	class UAnimMontage*                           TargetMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_RemoveNotifyTrackByName) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_RemoveNotifyTrackByName");
//static_assert(sizeof(GSE_AnimFuncLib_RemoveNotifyTrackByName) == 0x000010, "Wrong size on GSE_AnimFuncLib_RemoveNotifyTrackByName");
//static_assert(offsetof(GSE_AnimFuncLib_RemoveNotifyTrackByName, TargetMontage) == 0x000000, "Member 'GSE_AnimFuncLib_RemoveNotifyTrackByName::TargetMontage' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_RemoveNotifyTrackByName, Name_0) == 0x000008, "Member 'GSE_AnimFuncLib_RemoveNotifyTrackByName::Name_0' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.RemovePreviewAssetFromSkeleton
// 0x0020 (0x0020 - 0x0000)
struct GSE_AnimFuncLib_RemovePreviewAssetFromSkeleton final
{
public:
	class USkeleton*                              InUSkeleton;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoneName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_RemovePreviewAssetFromSkeleton) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_RemovePreviewAssetFromSkeleton");
//static_assert(sizeof(GSE_AnimFuncLib_RemovePreviewAssetFromSkeleton) == 0x000020, "Wrong size on GSE_AnimFuncLib_RemovePreviewAssetFromSkeleton");
//static_assert(offsetof(GSE_AnimFuncLib_RemovePreviewAssetFromSkeleton, InUSkeleton) == 0x000000, "Member 'GSE_AnimFuncLib_RemovePreviewAssetFromSkeleton::InUSkeleton' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_RemovePreviewAssetFromSkeleton, BoneName) == 0x000008, "Member 'GSE_AnimFuncLib_RemovePreviewAssetFromSkeleton::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_RemovePreviewAssetFromSkeleton, ReturnValue) == 0x000018, "Member 'GSE_AnimFuncLib_RemovePreviewAssetFromSkeleton::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.Sequence_GetBoneTransformCS
// 0x0080 (0x0080 - 0x0000)
struct GSE_AnimFuncLib_Sequence_GetBoneTransformCS final
{
public:
	const class UAnimSequence*                    AnimSeq;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExtractRootMotion;                                // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0xB];                                       // 0x0015(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_Sequence_GetBoneTransformCS) == 0x000010, "Wrong alignment on GSE_AnimFuncLib_Sequence_GetBoneTransformCS");
//static_assert(sizeof(GSE_AnimFuncLib_Sequence_GetBoneTransformCS) == 0x000080, "Wrong size on GSE_AnimFuncLib_Sequence_GetBoneTransformCS");
//static_assert(offsetof(GSE_AnimFuncLib_Sequence_GetBoneTransformCS, AnimSeq) == 0x000000, "Member 'GSE_AnimFuncLib_Sequence_GetBoneTransformCS::AnimSeq' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Sequence_GetBoneTransformCS, InTime) == 0x000008, "Member 'GSE_AnimFuncLib_Sequence_GetBoneTransformCS::InTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Sequence_GetBoneTransformCS, BoneName) == 0x00000C, "Member 'GSE_AnimFuncLib_Sequence_GetBoneTransformCS::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Sequence_GetBoneTransformCS, bExtractRootMotion) == 0x000014, "Member 'GSE_AnimFuncLib_Sequence_GetBoneTransformCS::bExtractRootMotion' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Sequence_GetBoneTransformCS, ReturnValue) == 0x000020, "Member 'GSE_AnimFuncLib_Sequence_GetBoneTransformCS::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.Sequence_GetRelativeBoneTransformCS
// 0x0080 (0x0080 - 0x0000)
struct GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS final
{
public:
	const class UAnimSequence*                    AnimSeq;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExtractRootMotion;                                // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0xB];                                       // 0x0015(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS) == 0x000010, "Wrong alignment on GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS");
//static_assert(sizeof(GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS) == 0x000080, "Wrong size on GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS");
//static_assert(offsetof(GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS, AnimSeq) == 0x000000, "Member 'GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS::AnimSeq' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS, InTime) == 0x000008, "Member 'GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS::InTime' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS, BoneName) == 0x00000C, "Member 'GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS, bExtractRootMotion) == 0x000014, "Member 'GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS::bExtractRootMotion' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS, ReturnValue) == 0x000020, "Member 'GSE_AnimFuncLib_Sequence_GetRelativeBoneTransformCS::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.SetAnimcurveType
// 0x0020 (0x0020 - 0x0000)
struct GSE_AnimFuncLib_SetAnimcurveType final
{
public:
	class USkeleton*                              Skeleton;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurveName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_SetAnimcurveType) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_SetAnimcurveType");
//static_assert(sizeof(GSE_AnimFuncLib_SetAnimcurveType) == 0x000020, "Wrong size on GSE_AnimFuncLib_SetAnimcurveType");
//static_assert(offsetof(GSE_AnimFuncLib_SetAnimcurveType, Skeleton) == 0x000000, "Member 'GSE_AnimFuncLib_SetAnimcurveType::Skeleton' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_SetAnimcurveType, CurveName) == 0x000008, "Member 'GSE_AnimFuncLib_SetAnimcurveType::CurveName' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_SetAnimcurveType, Value) == 0x000018, "Member 'GSE_AnimFuncLib_SetAnimcurveType::Value' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_SetAnimcurveType, ReturnValue) == 0x000019, "Member 'GSE_AnimFuncLib_SetAnimcurveType::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.SetBlendSpaceInput
// 0x0020 (0x0020 - 0x0000)
struct GSE_AnimFuncLib_SetBlendSpaceInput final
{
public:
	class USkeletalMeshComponent*                 Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BlendParams;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_SetBlendSpaceInput) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_SetBlendSpaceInput");
//static_assert(sizeof(GSE_AnimFuncLib_SetBlendSpaceInput) == 0x000020, "Wrong size on GSE_AnimFuncLib_SetBlendSpaceInput");
//static_assert(offsetof(GSE_AnimFuncLib_SetBlendSpaceInput, Obj) == 0x000000, "Member 'GSE_AnimFuncLib_SetBlendSpaceInput::Obj' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_SetBlendSpaceInput, BlendParams) == 0x000008, "Member 'GSE_AnimFuncLib_SetBlendSpaceInput::BlendParams' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.SetMaterial
// 0x0018 (0x0018 - 0x0000)
struct GSE_AnimFuncLib_SetMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDestructibleMesh*                      TargetMesh;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_SetMaterial) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_SetMaterial");
//static_assert(sizeof(GSE_AnimFuncLib_SetMaterial) == 0x000018, "Wrong size on GSE_AnimFuncLib_SetMaterial");
//static_assert(offsetof(GSE_AnimFuncLib_SetMaterial, Material) == 0x000000, "Member 'GSE_AnimFuncLib_SetMaterial::Material' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_SetMaterial, TargetMesh) == 0x000008, "Member 'GSE_AnimFuncLib_SetMaterial::TargetMesh' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_SetMaterial, Index_0) == 0x000010, "Member 'GSE_AnimFuncLib_SetMaterial::Index_0' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.SetRootMotionFromEverythingSwitch
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_SetRootMotionFromEverythingSwitch final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOpen;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_SetRootMotionFromEverythingSwitch) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_SetRootMotionFromEverythingSwitch");
//static_assert(sizeof(GSE_AnimFuncLib_SetRootMotionFromEverythingSwitch) == 0x000010, "Wrong size on GSE_AnimFuncLib_SetRootMotionFromEverythingSwitch");
//static_assert(offsetof(GSE_AnimFuncLib_SetRootMotionFromEverythingSwitch, Character) == 0x000000, "Member 'GSE_AnimFuncLib_SetRootMotionFromEverythingSwitch::Character' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_SetRootMotionFromEverythingSwitch, IsOpen) == 0x000008, "Member 'GSE_AnimFuncLib_SetRootMotionFromEverythingSwitch::IsOpen' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.StopAllMontages
// 0x0010 (0x0010 - 0x0000)
struct GSE_AnimFuncLib_StopAllMontages final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_AnimFuncLib_StopAllMontages) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_StopAllMontages");
//static_assert(sizeof(GSE_AnimFuncLib_StopAllMontages) == 0x000010, "Wrong size on GSE_AnimFuncLib_StopAllMontages");
//static_assert(offsetof(GSE_AnimFuncLib_StopAllMontages, Owner) == 0x000000, "Member 'GSE_AnimFuncLib_StopAllMontages::Owner' has a wrong offset!");
//static_assert(offsetof(GSE_AnimFuncLib_StopAllMontages, BlendOutTime) == 0x000008, "Member 'GSE_AnimFuncLib_StopAllMontages::BlendOutTime' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.TickAnimation
// 0x0008 (0x0008 - 0x0000)
struct GSE_AnimFuncLib_TickAnimation final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_TickAnimation) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_TickAnimation");
//static_assert(sizeof(GSE_AnimFuncLib_TickAnimation) == 0x000008, "Wrong size on GSE_AnimFuncLib_TickAnimation");
//static_assert(offsetof(GSE_AnimFuncLib_TickAnimation, Owner) == 0x000000, "Member 'GSE_AnimFuncLib_TickAnimation::Owner' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.TickAnimationAndRefreshBone
// 0x0008 (0x0008 - 0x0000)
struct GSE_AnimFuncLib_TickAnimationAndRefreshBone final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_TickAnimationAndRefreshBone) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_TickAnimationAndRefreshBone");
//static_assert(sizeof(GSE_AnimFuncLib_TickAnimationAndRefreshBone) == 0x000008, "Wrong size on GSE_AnimFuncLib_TickAnimationAndRefreshBone");
//static_assert(offsetof(GSE_AnimFuncLib_TickAnimationAndRefreshBone, Owner) == 0x000000, "Member 'GSE_AnimFuncLib_TickAnimationAndRefreshBone::Owner' has a wrong offset!");

// Function UnrealExtent.GSE_AnimFuncLib.TickAnimationAndRefreshBone_SkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct GSE_AnimFuncLib_TickAnimationAndRefreshBone_SkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AnimFuncLib_TickAnimationAndRefreshBone_SkeletalMesh) == 0x000008, "Wrong alignment on GSE_AnimFuncLib_TickAnimationAndRefreshBone_SkeletalMesh");
//static_assert(sizeof(GSE_AnimFuncLib_TickAnimationAndRefreshBone_SkeletalMesh) == 0x000008, "Wrong size on GSE_AnimFuncLib_TickAnimationAndRefreshBone_SkeletalMesh");
//static_assert(offsetof(GSE_AnimFuncLib_TickAnimationAndRefreshBone_SkeletalMesh, SkeletalMeshComp) == 0x000000, "Member 'GSE_AnimFuncLib_TickAnimationAndRefreshBone_SkeletalMesh::SkeletalMeshComp' has a wrong offset!");

// Function UnrealExtent.GSE_BehaviorTreeFuncLib.BTDecoratorOverrideChildIdx
// 0x0010 (0x0010 - 0x0000)
struct GSE_BehaviorTreeFuncLib_BTDecoratorOverrideChildIdx final
{
public:
	class UBTDecorator_BlueprintBase*             BTDecorator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_BehaviorTreeFuncLib_BTDecoratorOverrideChildIdx) == 0x000008, "Wrong alignment on GSE_BehaviorTreeFuncLib_BTDecoratorOverrideChildIdx");
//static_assert(sizeof(GSE_BehaviorTreeFuncLib_BTDecoratorOverrideChildIdx) == 0x000010, "Wrong size on GSE_BehaviorTreeFuncLib_BTDecoratorOverrideChildIdx");
//static_assert(offsetof(GSE_BehaviorTreeFuncLib_BTDecoratorOverrideChildIdx, BTDecorator) == 0x000000, "Member 'GSE_BehaviorTreeFuncLib_BTDecoratorOverrideChildIdx::BTDecorator' has a wrong offset!");
//static_assert(offsetof(GSE_BehaviorTreeFuncLib_BTDecoratorOverrideChildIdx, NewIndex) == 0x000008, "Member 'GSE_BehaviorTreeFuncLib_BTDecoratorOverrideChildIdx::NewIndex' has a wrong offset!");
//static_assert(offsetof(GSE_BehaviorTreeFuncLib_BTDecoratorOverrideChildIdx, ReturnValue) == 0x00000C, "Member 'GSE_BehaviorTreeFuncLib_BTDecoratorOverrideChildIdx::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_BehaviorTreeFuncLib.GetBTTaskNodes
// 0x0018 (0x0018 - 0x0000)
struct GSE_BehaviorTreeFuncLib_GetBTTaskNodes final
{
public:
	class UBehaviorTree*                          BT;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBehaviorTreeNodeData                  NodeData;                                          // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_BehaviorTreeFuncLib_GetBTTaskNodes) == 0x000008, "Wrong alignment on GSE_BehaviorTreeFuncLib_GetBTTaskNodes");
//static_assert(sizeof(GSE_BehaviorTreeFuncLib_GetBTTaskNodes) == 0x000018, "Wrong size on GSE_BehaviorTreeFuncLib_GetBTTaskNodes");
//static_assert(offsetof(GSE_BehaviorTreeFuncLib_GetBTTaskNodes, BT) == 0x000000, "Member 'GSE_BehaviorTreeFuncLib_GetBTTaskNodes::BT' has a wrong offset!");
//static_assert(offsetof(GSE_BehaviorTreeFuncLib_GetBTTaskNodes, NodeData) == 0x000008, "Member 'GSE_BehaviorTreeFuncLib_GetBTTaskNodes::NodeData' has a wrong offset!");

// Function UnrealExtent.GSE_BehaviorTreeFuncLib.GetCurrentBTActiveNodeInfo
// 0x0018 (0x0018 - 0x0000)
struct GSE_BehaviorTreeFuncLib_GetCurrentBTActiveNodeInfo final
{
public:
	class UBehaviorTreeComponent*                 BehaviorTreeComp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_BehaviorTreeFuncLib_GetCurrentBTActiveNodeInfo) == 0x000008, "Wrong alignment on GSE_BehaviorTreeFuncLib_GetCurrentBTActiveNodeInfo");
//static_assert(sizeof(GSE_BehaviorTreeFuncLib_GetCurrentBTActiveNodeInfo) == 0x000018, "Wrong size on GSE_BehaviorTreeFuncLib_GetCurrentBTActiveNodeInfo");
//static_assert(offsetof(GSE_BehaviorTreeFuncLib_GetCurrentBTActiveNodeInfo, BehaviorTreeComp) == 0x000000, "Member 'GSE_BehaviorTreeFuncLib_GetCurrentBTActiveNodeInfo::BehaviorTreeComp' has a wrong offset!");
//static_assert(offsetof(GSE_BehaviorTreeFuncLib_GetCurrentBTActiveNodeInfo, ReturnValue) == 0x000008, "Member 'GSE_BehaviorTreeFuncLib_GetCurrentBTActiveNodeInfo::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_BehaviorTreeFuncLib.GetCurrentTree
// 0x0010 (0x0010 - 0x0000)
struct GSE_BehaviorTreeFuncLib_GetCurrentTree final
{
public:
	class AAIController*                          AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_BehaviorTreeFuncLib_GetCurrentTree) == 0x000008, "Wrong alignment on GSE_BehaviorTreeFuncLib_GetCurrentTree");
//static_assert(sizeof(GSE_BehaviorTreeFuncLib_GetCurrentTree) == 0x000010, "Wrong size on GSE_BehaviorTreeFuncLib_GetCurrentTree");
//static_assert(offsetof(GSE_BehaviorTreeFuncLib_GetCurrentTree, AIController) == 0x000000, "Member 'GSE_BehaviorTreeFuncLib_GetCurrentTree::AIController' has a wrong offset!");
//static_assert(offsetof(GSE_BehaviorTreeFuncLib_GetCurrentTree, ReturnValue) == 0x000008, "Member 'GSE_BehaviorTreeFuncLib_GetCurrentTree::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.AddComponentByClass
// 0x0090 (0x0090 - 0x0000)
struct GSE_ActorFuncLib_AddComponentByClass final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bManualAttachment;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0020(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDeferredFinish;                                   // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        ReturnValue;                                       // 0x0088(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_AddComponentByClass) == 0x000010, "Wrong alignment on GSE_ActorFuncLib_AddComponentByClass");
//static_assert(sizeof(GSE_ActorFuncLib_AddComponentByClass) == 0x000090, "Wrong size on GSE_ActorFuncLib_AddComponentByClass");
//static_assert(offsetof(GSE_ActorFuncLib_AddComponentByClass, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_AddComponentByClass::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_AddComponentByClass, Class_0) == 0x000008, "Member 'GSE_ActorFuncLib_AddComponentByClass::Class_0' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_AddComponentByClass, bManualAttachment) == 0x000010, "Member 'GSE_ActorFuncLib_AddComponentByClass::bManualAttachment' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_AddComponentByClass, RelativeTransform) == 0x000020, "Member 'GSE_ActorFuncLib_AddComponentByClass::RelativeTransform' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_AddComponentByClass, bDeferredFinish) == 0x000080, "Member 'GSE_ActorFuncLib_AddComponentByClass::bDeferredFinish' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_AddComponentByClass, ReturnValue) == 0x000088, "Member 'GSE_ActorFuncLib_AddComponentByClass::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.AddInstanceComponent
// 0x0010 (0x0010 - 0x0000)
struct GSE_ActorFuncLib_AddInstanceComponent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_AddInstanceComponent) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_AddInstanceComponent");
//static_assert(sizeof(GSE_ActorFuncLib_AddInstanceComponent) == 0x000010, "Wrong size on GSE_ActorFuncLib_AddInstanceComponent");
//static_assert(offsetof(GSE_ActorFuncLib_AddInstanceComponent, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_AddInstanceComponent::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_AddInstanceComponent, Component) == 0x000008, "Member 'GSE_ActorFuncLib_AddInstanceComponent::Component' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.AddNamePrefix
// 0x0018 (0x0018 - 0x0000)
struct GSE_ActorFuncLib_AddNamePrefix final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NamePrefix;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_AddNamePrefix) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_AddNamePrefix");
//static_assert(sizeof(GSE_ActorFuncLib_AddNamePrefix) == 0x000018, "Wrong size on GSE_ActorFuncLib_AddNamePrefix");
//static_assert(offsetof(GSE_ActorFuncLib_AddNamePrefix, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_AddNamePrefix::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_AddNamePrefix, NamePrefix) == 0x000008, "Member 'GSE_ActorFuncLib_AddNamePrefix::NamePrefix' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.CheckActorWasRecentlyRendered
// 0x0010 (0x0010 - 0x0000)
struct GSE_ActorFuncLib_CheckActorWasRecentlyRendered final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ActorFuncLib_CheckActorWasRecentlyRendered) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_CheckActorWasRecentlyRendered");
//static_assert(sizeof(GSE_ActorFuncLib_CheckActorWasRecentlyRendered) == 0x000010, "Wrong size on GSE_ActorFuncLib_CheckActorWasRecentlyRendered");
//static_assert(offsetof(GSE_ActorFuncLib_CheckActorWasRecentlyRendered, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_CheckActorWasRecentlyRendered::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_CheckActorWasRecentlyRendered, ReturnValue) == 0x000008, "Member 'GSE_ActorFuncLib_CheckActorWasRecentlyRendered::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.DetectRegionCenter
// 0x0050 (0x0050 - 0x0000)
struct GSE_ActorFuncLib_DetectRegionCenter final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        TraceDirectionList;                                // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TraceDistance;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawTime;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VaildRange;                                        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AdjustedLocation;                                  // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        AdjustedRadius;                                    // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSuccess;                                         // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ActorFuncLib_DetectRegionCenter) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_DetectRegionCenter");
//static_assert(sizeof(GSE_ActorFuncLib_DetectRegionCenter) == 0x000050, "Wrong size on GSE_ActorFuncLib_DetectRegionCenter");
//static_assert(offsetof(GSE_ActorFuncLib_DetectRegionCenter, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_DetectRegionCenter::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_DetectRegionCenter, TraceDirectionList) == 0x000008, "Member 'GSE_ActorFuncLib_DetectRegionCenter::TraceDirectionList' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_DetectRegionCenter, TraceDistance) == 0x000018, "Member 'GSE_ActorFuncLib_DetectRegionCenter::TraceDistance' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_DetectRegionCenter, TraceChannel) == 0x00001C, "Member 'GSE_ActorFuncLib_DetectRegionCenter::TraceChannel' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_DetectRegionCenter, DrawDebugType) == 0x00001D, "Member 'GSE_ActorFuncLib_DetectRegionCenter::DrawDebugType' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_DetectRegionCenter, DrawTime) == 0x000020, "Member 'GSE_ActorFuncLib_DetectRegionCenter::DrawTime' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_DetectRegionCenter, VaildRange) == 0x000024, "Member 'GSE_ActorFuncLib_DetectRegionCenter::VaildRange' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_DetectRegionCenter, AdjustedLocation) == 0x000028, "Member 'GSE_ActorFuncLib_DetectRegionCenter::AdjustedLocation' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_DetectRegionCenter, AdjustedRadius) == 0x000040, "Member 'GSE_ActorFuncLib_DetectRegionCenter::AdjustedRadius' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_DetectRegionCenter, IsSuccess) == 0x000048, "Member 'GSE_ActorFuncLib_DetectRegionCenter::IsSuccess' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.FinishAddComponent
// 0x0080 (0x0080 - 0x0000)
struct GSE_ActorFuncLib_FinishAddComponent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        NewActorComp;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bManualAttachment;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0020(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_FinishAddComponent) == 0x000010, "Wrong alignment on GSE_ActorFuncLib_FinishAddComponent");
//static_assert(sizeof(GSE_ActorFuncLib_FinishAddComponent) == 0x000080, "Wrong size on GSE_ActorFuncLib_FinishAddComponent");
//static_assert(offsetof(GSE_ActorFuncLib_FinishAddComponent, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_FinishAddComponent::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_FinishAddComponent, NewActorComp) == 0x000008, "Member 'GSE_ActorFuncLib_FinishAddComponent::NewActorComp' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_FinishAddComponent, bManualAttachment) == 0x000010, "Member 'GSE_ActorFuncLib_FinishAddComponent::bManualAttachment' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_FinishAddComponent, RelativeTransform) == 0x000020, "Member 'GSE_ActorFuncLib_FinishAddComponent::RelativeTransform' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.GetActorForwardVector
// 0x0020 (0x0020 - 0x0000)
struct GSE_ActorFuncLib_GetActorForwardVector final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutDir;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_GetActorForwardVector) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_GetActorForwardVector");
//static_assert(sizeof(GSE_ActorFuncLib_GetActorForwardVector) == 0x000020, "Wrong size on GSE_ActorFuncLib_GetActorForwardVector");
//static_assert(offsetof(GSE_ActorFuncLib_GetActorForwardVector, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_GetActorForwardVector::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_GetActorForwardVector, OutDir) == 0x000008, "Member 'GSE_ActorFuncLib_GetActorForwardVector::OutDir' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.GetActorHasAuthority
// 0x0010 (0x0010 - 0x0000)
struct GSE_ActorFuncLib_GetActorHasAuthority final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutHasAuthority;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ActorFuncLib_GetActorHasAuthority) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_GetActorHasAuthority");
//static_assert(sizeof(GSE_ActorFuncLib_GetActorHasAuthority) == 0x000010, "Wrong size on GSE_ActorFuncLib_GetActorHasAuthority");
//static_assert(offsetof(GSE_ActorFuncLib_GetActorHasAuthority, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_GetActorHasAuthority::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_GetActorHasAuthority, OutHasAuthority) == 0x000008, "Member 'GSE_ActorFuncLib_GetActorHasAuthority::OutHasAuthority' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.GetActorLocationSimple
// 0x0020 (0x0020 - 0x0000)
struct GSE_ActorFuncLib_GetActorLocationSimple final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPos;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_GetActorLocationSimple) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_GetActorLocationSimple");
//static_assert(sizeof(GSE_ActorFuncLib_GetActorLocationSimple) == 0x000020, "Wrong size on GSE_ActorFuncLib_GetActorLocationSimple");
//static_assert(offsetof(GSE_ActorFuncLib_GetActorLocationSimple, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_GetActorLocationSimple::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_GetActorLocationSimple, OutPos) == 0x000008, "Member 'GSE_ActorFuncLib_GetActorLocationSimple::OutPos' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.GetActorRotationSimple
// 0x0020 (0x0020 - 0x0000)
struct GSE_ActorFuncLib_GetActorRotationSimple final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRot;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_GetActorRotationSimple) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_GetActorRotationSimple");
//static_assert(sizeof(GSE_ActorFuncLib_GetActorRotationSimple) == 0x000020, "Wrong size on GSE_ActorFuncLib_GetActorRotationSimple");
//static_assert(offsetof(GSE_ActorFuncLib_GetActorRotationSimple, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_GetActorRotationSimple::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_GetActorRotationSimple, OutRot) == 0x000008, "Member 'GSE_ActorFuncLib_GetActorRotationSimple::OutRot' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.GetActorTransformSimple
// 0x0070 (0x0070 - 0x0000)
struct GSE_ActorFuncLib_GetActorTransformSimple final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutTrans;                                          // 0x0010(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_GetActorTransformSimple) == 0x000010, "Wrong alignment on GSE_ActorFuncLib_GetActorTransformSimple");
//static_assert(sizeof(GSE_ActorFuncLib_GetActorTransformSimple) == 0x000070, "Wrong size on GSE_ActorFuncLib_GetActorTransformSimple");
//static_assert(offsetof(GSE_ActorFuncLib_GetActorTransformSimple, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_GetActorTransformSimple::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_GetActorTransformSimple, OutTrans) == 0x000010, "Member 'GSE_ActorFuncLib_GetActorTransformSimple::OutTrans' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.GetAttachParentActor
// 0x0010 (0x0010 - 0x0000)
struct GSE_ActorFuncLib_GetAttachParentActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AttachParentActor;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_GetAttachParentActor) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_GetAttachParentActor");
//static_assert(sizeof(GSE_ActorFuncLib_GetAttachParentActor) == 0x000010, "Wrong size on GSE_ActorFuncLib_GetAttachParentActor");
//static_assert(offsetof(GSE_ActorFuncLib_GetAttachParentActor, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_GetAttachParentActor::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_GetAttachParentActor, AttachParentActor) == 0x000008, "Member 'GSE_ActorFuncLib_GetAttachParentActor::AttachParentActor' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.GetVelocity
// 0x0020 (0x0020 - 0x0000)
struct GSE_ActorFuncLib_GetVelocity final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutVelocity;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_GetVelocity) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_GetVelocity");
//static_assert(sizeof(GSE_ActorFuncLib_GetVelocity) == 0x000020, "Wrong size on GSE_ActorFuncLib_GetVelocity");
//static_assert(offsetof(GSE_ActorFuncLib_GetVelocity, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_GetVelocity::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_GetVelocity, OutVelocity) == 0x000008, "Member 'GSE_ActorFuncLib_GetVelocity::OutVelocity' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.GetWorldTransformFast
// 0x0070 (0x0070 - 0x0000)
struct GSE_ActorFuncLib_GetWorldTransformFast final
{
public:
	class USceneComponent*                        SceneComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutWorldTransform;                                 // 0x0010(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_GetWorldTransformFast) == 0x000010, "Wrong alignment on GSE_ActorFuncLib_GetWorldTransformFast");
//static_assert(sizeof(GSE_ActorFuncLib_GetWorldTransformFast) == 0x000070, "Wrong size on GSE_ActorFuncLib_GetWorldTransformFast");
//static_assert(offsetof(GSE_ActorFuncLib_GetWorldTransformFast, SceneComp) == 0x000000, "Member 'GSE_ActorFuncLib_GetWorldTransformFast::SceneComp' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_GetWorldTransformFast, OutWorldTransform) == 0x000010, "Member 'GSE_ActorFuncLib_GetWorldTransformFast::OutWorldTransform' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.IsAABoundBoxInVolume
// 0x0040 (0x0040 - 0x0000)
struct GSE_ActorFuncLib_IsAABoundBoxInVolume final
{
public:
	class AVolume*                                VolumeActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoundOrigin;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoundExtent;                                       // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFullContain;                                     // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ActorFuncLib_IsAABoundBoxInVolume) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_IsAABoundBoxInVolume");
//static_assert(sizeof(GSE_ActorFuncLib_IsAABoundBoxInVolume) == 0x000040, "Wrong size on GSE_ActorFuncLib_IsAABoundBoxInVolume");
//static_assert(offsetof(GSE_ActorFuncLib_IsAABoundBoxInVolume, VolumeActor) == 0x000000, "Member 'GSE_ActorFuncLib_IsAABoundBoxInVolume::VolumeActor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_IsAABoundBoxInVolume, BoundOrigin) == 0x000008, "Member 'GSE_ActorFuncLib_IsAABoundBoxInVolume::BoundOrigin' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_IsAABoundBoxInVolume, BoundExtent) == 0x000020, "Member 'GSE_ActorFuncLib_IsAABoundBoxInVolume::BoundExtent' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_IsAABoundBoxInVolume, IsFullContain) == 0x000038, "Member 'GSE_ActorFuncLib_IsAABoundBoxInVolume::IsFullContain' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_IsAABoundBoxInVolume, ReturnValue) == 0x000039, "Member 'GSE_ActorFuncLib_IsAABoundBoxInVolume::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.IsActorBeginningPlayFromLevelStreaming
// 0x0010 (0x0010 - 0x0000)
struct GSE_ActorFuncLib_IsActorBeginningPlayFromLevelStreaming final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ActorFuncLib_IsActorBeginningPlayFromLevelStreaming) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_IsActorBeginningPlayFromLevelStreaming");
//static_assert(sizeof(GSE_ActorFuncLib_IsActorBeginningPlayFromLevelStreaming) == 0x000010, "Wrong size on GSE_ActorFuncLib_IsActorBeginningPlayFromLevelStreaming");
//static_assert(offsetof(GSE_ActorFuncLib_IsActorBeginningPlayFromLevelStreaming, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_IsActorBeginningPlayFromLevelStreaming::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_IsActorBeginningPlayFromLevelStreaming, ReturnValue) == 0x000008, "Member 'GSE_ActorFuncLib_IsActorBeginningPlayFromLevelStreaming::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.IsPointInVolume
// 0x0028 (0x0028 - 0x0000)
struct GSE_ActorFuncLib_IsPointInVolume final
{
public:
	class AVolume*                                VolumeActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ActorFuncLib_IsPointInVolume) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_IsPointInVolume");
//static_assert(sizeof(GSE_ActorFuncLib_IsPointInVolume) == 0x000028, "Wrong size on GSE_ActorFuncLib_IsPointInVolume");
//static_assert(offsetof(GSE_ActorFuncLib_IsPointInVolume, VolumeActor) == 0x000000, "Member 'GSE_ActorFuncLib_IsPointInVolume::VolumeActor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_IsPointInVolume, Point) == 0x000008, "Member 'GSE_ActorFuncLib_IsPointInVolume::Point' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_IsPointInVolume, Radius) == 0x000020, "Member 'GSE_ActorFuncLib_IsPointInVolume::Radius' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_IsPointInVolume, ReturnValue) == 0x000024, "Member 'GSE_ActorFuncLib_IsPointInVolume::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.LoadReflectionCubeLocation
// 0x0020 (0x0020 - 0x0000)
struct GSE_ActorFuncLib_LoadReflectionCubeLocation final
{
public:
	TArray<struct FVector>                        PathPointList;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FilePathUnderProjFolder;                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_LoadReflectionCubeLocation) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_LoadReflectionCubeLocation");
//static_assert(sizeof(GSE_ActorFuncLib_LoadReflectionCubeLocation) == 0x000020, "Wrong size on GSE_ActorFuncLib_LoadReflectionCubeLocation");
//static_assert(offsetof(GSE_ActorFuncLib_LoadReflectionCubeLocation, PathPointList) == 0x000000, "Member 'GSE_ActorFuncLib_LoadReflectionCubeLocation::PathPointList' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_LoadReflectionCubeLocation, FilePathUnderProjFolder) == 0x000010, "Member 'GSE_ActorFuncLib_LoadReflectionCubeLocation::FilePathUnderProjFolder' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.RemoveComponent
// 0x0008 (0x0008 - 0x0000)
struct GSE_ActorFuncLib_RemoveComponent final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_RemoveComponent) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_RemoveComponent");
//static_assert(sizeof(GSE_ActorFuncLib_RemoveComponent) == 0x000008, "Wrong size on GSE_ActorFuncLib_RemoveComponent");
//static_assert(offsetof(GSE_ActorFuncLib_RemoveComponent, Component) == 0x000000, "Member 'GSE_ActorFuncLib_RemoveComponent::Component' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.SetActorComponentsTickEnable
// 0x0010 (0x0010 - 0x0000)
struct GSE_ActorFuncLib_SetActorComponentsTickEnable final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ActorFuncLib_SetActorComponentsTickEnable) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_SetActorComponentsTickEnable");
//static_assert(sizeof(GSE_ActorFuncLib_SetActorComponentsTickEnable) == 0x000010, "Wrong size on GSE_ActorFuncLib_SetActorComponentsTickEnable");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorComponentsTickEnable, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_SetActorComponentsTickEnable::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorComponentsTickEnable, bEnable) == 0x000008, "Member 'GSE_ActorFuncLib_SetActorComponentsTickEnable::bEnable' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.SetActorComponentsTickInterval
// 0x0010 (0x0010 - 0x0000)
struct GSE_ActorFuncLib_SetActorComponentsTickInterval final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewInterval;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ActorFuncLib_SetActorComponentsTickInterval) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_SetActorComponentsTickInterval");
//static_assert(sizeof(GSE_ActorFuncLib_SetActorComponentsTickInterval) == 0x000010, "Wrong size on GSE_ActorFuncLib_SetActorComponentsTickInterval");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorComponentsTickInterval, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_SetActorComponentsTickInterval::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorComponentsTickInterval, NewInterval) == 0x000008, "Member 'GSE_ActorFuncLib_SetActorComponentsTickInterval::NewInterval' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.SetActorLocationAndRotationSimple
// 0x0040 (0x0040 - 0x0000)
struct GSE_ActorFuncLib_SetActorLocationAndRotationSimple final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSweep;                                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ITeleportType;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_SetActorLocationAndRotationSimple) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_SetActorLocationAndRotationSimple");
//static_assert(sizeof(GSE_ActorFuncLib_SetActorLocationAndRotationSimple) == 0x000040, "Wrong size on GSE_ActorFuncLib_SetActorLocationAndRotationSimple");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorLocationAndRotationSimple, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_SetActorLocationAndRotationSimple::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorLocationAndRotationSimple, Pos) == 0x000008, "Member 'GSE_ActorFuncLib_SetActorLocationAndRotationSimple::Pos' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorLocationAndRotationSimple, Rot) == 0x000020, "Member 'GSE_ActorFuncLib_SetActorLocationAndRotationSimple::Rot' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorLocationAndRotationSimple, bSweep) == 0x000038, "Member 'GSE_ActorFuncLib_SetActorLocationAndRotationSimple::bSweep' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorLocationAndRotationSimple, ITeleportType) == 0x00003C, "Member 'GSE_ActorFuncLib_SetActorLocationAndRotationSimple::ITeleportType' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.SetActorLocationSimple
// 0x0028 (0x0028 - 0x0000)
struct GSE_ActorFuncLib_SetActorLocationSimple final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSweep;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ITeleportType;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_SetActorLocationSimple) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_SetActorLocationSimple");
//static_assert(sizeof(GSE_ActorFuncLib_SetActorLocationSimple) == 0x000028, "Wrong size on GSE_ActorFuncLib_SetActorLocationSimple");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorLocationSimple, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_SetActorLocationSimple::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorLocationSimple, Pos) == 0x000008, "Member 'GSE_ActorFuncLib_SetActorLocationSimple::Pos' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorLocationSimple, bSweep) == 0x000020, "Member 'GSE_ActorFuncLib_SetActorLocationSimple::bSweep' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorLocationSimple, ITeleportType) == 0x000024, "Member 'GSE_ActorFuncLib_SetActorLocationSimple::ITeleportType' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.SetActorRotationSimple
// 0x0028 (0x0028 - 0x0000)
struct GSE_ActorFuncLib_SetActorRotationSimple final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ITeleportType;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ActorFuncLib_SetActorRotationSimple) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_SetActorRotationSimple");
//static_assert(sizeof(GSE_ActorFuncLib_SetActorRotationSimple) == 0x000028, "Wrong size on GSE_ActorFuncLib_SetActorRotationSimple");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorRotationSimple, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_SetActorRotationSimple::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorRotationSimple, Rot) == 0x000008, "Member 'GSE_ActorFuncLib_SetActorRotationSimple::Rot' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorRotationSimple, ITeleportType) == 0x000020, "Member 'GSE_ActorFuncLib_SetActorRotationSimple::ITeleportType' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.SetActorTransformSimple
// 0x0080 (0x0080 - 0x0000)
struct GSE_ActorFuncLib_SetActorTransformSimple final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Trans;                                             // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSweep;                                            // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ITeleportType;                                     // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ActorFuncLib_SetActorTransformSimple) == 0x000010, "Wrong alignment on GSE_ActorFuncLib_SetActorTransformSimple");
//static_assert(sizeof(GSE_ActorFuncLib_SetActorTransformSimple) == 0x000080, "Wrong size on GSE_ActorFuncLib_SetActorTransformSimple");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorTransformSimple, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_SetActorTransformSimple::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorTransformSimple, Trans) == 0x000010, "Member 'GSE_ActorFuncLib_SetActorTransformSimple::Trans' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorTransformSimple, bSweep) == 0x000070, "Member 'GSE_ActorFuncLib_SetActorTransformSimple::bSweep' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetActorTransformSimple, ITeleportType) == 0x000074, "Member 'GSE_ActorFuncLib_SetActorTransformSimple::ITeleportType' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.SetMaterialInterfaceQualityLevel
// 0x0018 (0x0018 - 0x0000)
struct GSE_ActorFuncLib_SetMaterialInterfaceQualityLevel final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QualityLevel;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ActorFuncLib_SetMaterialInterfaceQualityLevel) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_SetMaterialInterfaceQualityLevel");
//static_assert(sizeof(GSE_ActorFuncLib_SetMaterialInterfaceQualityLevel) == 0x000018, "Wrong size on GSE_ActorFuncLib_SetMaterialInterfaceQualityLevel");
//static_assert(offsetof(GSE_ActorFuncLib_SetMaterialInterfaceQualityLevel, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_SetMaterialInterfaceQualityLevel::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetMaterialInterfaceQualityLevel, Material) == 0x000008, "Member 'GSE_ActorFuncLib_SetMaterialInterfaceQualityLevel::Material' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SetMaterialInterfaceQualityLevel, QualityLevel) == 0x000010, "Member 'GSE_ActorFuncLib_SetMaterialInterfaceQualityLevel::QualityLevel' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.SpawnBlueprintActorByFactory
// 0x0080 (0x0080 - 0x0000)
struct GSE_ActorFuncLib_SpawnBlueprintActorByFactory final
{
public:
	class UBlueprint*                             InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevel*                                 InLevel;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ActorFuncLib_SpawnBlueprintActorByFactory) == 0x000010, "Wrong alignment on GSE_ActorFuncLib_SpawnBlueprintActorByFactory");
//static_assert(sizeof(GSE_ActorFuncLib_SpawnBlueprintActorByFactory) == 0x000080, "Wrong size on GSE_ActorFuncLib_SpawnBlueprintActorByFactory");
//static_assert(offsetof(GSE_ActorFuncLib_SpawnBlueprintActorByFactory, InAsset) == 0x000000, "Member 'GSE_ActorFuncLib_SpawnBlueprintActorByFactory::InAsset' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SpawnBlueprintActorByFactory, InLevel) == 0x000008, "Member 'GSE_ActorFuncLib_SpawnBlueprintActorByFactory::InLevel' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SpawnBlueprintActorByFactory, InTransform) == 0x000010, "Member 'GSE_ActorFuncLib_SpawnBlueprintActorByFactory::InTransform' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SpawnBlueprintActorByFactory, ReturnValue) == 0x000070, "Member 'GSE_ActorFuncLib_SpawnBlueprintActorByFactory::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.SpawnBlueprintActorByFactory_BP
// 0x0080 (0x0080 - 0x0000)
struct GSE_ActorFuncLib_SpawnBlueprintActorByFactory_BP final
{
public:
	class UBlueprint*                             InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Obj;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ActorFuncLib_SpawnBlueprintActorByFactory_BP) == 0x000010, "Wrong alignment on GSE_ActorFuncLib_SpawnBlueprintActorByFactory_BP");
//static_assert(sizeof(GSE_ActorFuncLib_SpawnBlueprintActorByFactory_BP) == 0x000080, "Wrong size on GSE_ActorFuncLib_SpawnBlueprintActorByFactory_BP");
//static_assert(offsetof(GSE_ActorFuncLib_SpawnBlueprintActorByFactory_BP, InAsset) == 0x000000, "Member 'GSE_ActorFuncLib_SpawnBlueprintActorByFactory_BP::InAsset' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SpawnBlueprintActorByFactory_BP, Obj) == 0x000008, "Member 'GSE_ActorFuncLib_SpawnBlueprintActorByFactory_BP::Obj' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SpawnBlueprintActorByFactory_BP, InTransform) == 0x000010, "Member 'GSE_ActorFuncLib_SpawnBlueprintActorByFactory_BP::InTransform' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SpawnBlueprintActorByFactory_BP, ReturnValue) == 0x000070, "Member 'GSE_ActorFuncLib_SpawnBlueprintActorByFactory_BP::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.SpawnSphereUniformPoints
// 0x0018 (0x0018 - 0x0000)
struct GSE_ActorFuncLib_SpawnSphereUniformPoints final
{
public:
	TArray<struct FVector>                        SphereUniformPoints;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumOfPoints;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_SpawnSphereUniformPoints) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_SpawnSphereUniformPoints");
//static_assert(sizeof(GSE_ActorFuncLib_SpawnSphereUniformPoints) == 0x000018, "Wrong size on GSE_ActorFuncLib_SpawnSphereUniformPoints");
//static_assert(offsetof(GSE_ActorFuncLib_SpawnSphereUniformPoints, SphereUniformPoints) == 0x000000, "Member 'GSE_ActorFuncLib_SpawnSphereUniformPoints::SphereUniformPoints' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SpawnSphereUniformPoints, NumOfPoints) == 0x000010, "Member 'GSE_ActorFuncLib_SpawnSphereUniformPoints::NumOfPoints' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_SpawnSphereUniformPoints, Radius) == 0x000014, "Member 'GSE_ActorFuncLib_SpawnSphereUniformPoints::Radius' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.StatLevelNaniteMemory
// 0x0030 (0x0030 - 0x0000)
struct GSE_ActorFuncLib_StatLevelNaniteMemory final
{
public:
	TArray<class ULevel*>                         LoadedLevels;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 WorldPositionFile;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MemoryFile;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_StatLevelNaniteMemory) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_StatLevelNaniteMemory");
//static_assert(sizeof(GSE_ActorFuncLib_StatLevelNaniteMemory) == 0x000030, "Wrong size on GSE_ActorFuncLib_StatLevelNaniteMemory");
//static_assert(offsetof(GSE_ActorFuncLib_StatLevelNaniteMemory, LoadedLevels) == 0x000000, "Member 'GSE_ActorFuncLib_StatLevelNaniteMemory::LoadedLevels' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_StatLevelNaniteMemory, WorldPositionFile) == 0x000010, "Member 'GSE_ActorFuncLib_StatLevelNaniteMemory::WorldPositionFile' has a wrong offset!");
//static_assert(offsetof(GSE_ActorFuncLib_StatLevelNaniteMemory, MemoryFile) == 0x000020, "Member 'GSE_ActorFuncLib_StatLevelNaniteMemory::MemoryFile' has a wrong offset!");

// Function UnrealExtent.GSE_ActorFuncLib.UpdateActorOverlaps
// 0x0008 (0x0008 - 0x0000)
struct GSE_ActorFuncLib_UpdateActorOverlaps final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ActorFuncLib_UpdateActorOverlaps) == 0x000008, "Wrong alignment on GSE_ActorFuncLib_UpdateActorOverlaps");
//static_assert(sizeof(GSE_ActorFuncLib_UpdateActorOverlaps) == 0x000008, "Wrong size on GSE_ActorFuncLib_UpdateActorOverlaps");
//static_assert(offsetof(GSE_ActorFuncLib_UpdateActorOverlaps, Actor) == 0x000000, "Member 'GSE_ActorFuncLib_UpdateActorOverlaps::Actor' has a wrong offset!");

// Function UnrealExtent.GSE_SceneComponentFuncLib.SetWorldLocationAndRotationSimple
// 0x0038 (0x0038 - 0x0000)
struct GSE_SceneComponentFuncLib_SetWorldLocationAndRotationSimple final
{
public:
	class USceneComponent*                        InSceneComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SceneComponentFuncLib_SetWorldLocationAndRotationSimple) == 0x000008, "Wrong alignment on GSE_SceneComponentFuncLib_SetWorldLocationAndRotationSimple");
//static_assert(sizeof(GSE_SceneComponentFuncLib_SetWorldLocationAndRotationSimple) == 0x000038, "Wrong size on GSE_SceneComponentFuncLib_SetWorldLocationAndRotationSimple");
//static_assert(offsetof(GSE_SceneComponentFuncLib_SetWorldLocationAndRotationSimple, InSceneComponent) == 0x000000, "Member 'GSE_SceneComponentFuncLib_SetWorldLocationAndRotationSimple::InSceneComponent' has a wrong offset!");
//static_assert(offsetof(GSE_SceneComponentFuncLib_SetWorldLocationAndRotationSimple, Pos) == 0x000008, "Member 'GSE_SceneComponentFuncLib_SetWorldLocationAndRotationSimple::Pos' has a wrong offset!");
//static_assert(offsetof(GSE_SceneComponentFuncLib_SetWorldLocationAndRotationSimple, Rot) == 0x000020, "Member 'GSE_SceneComponentFuncLib_SetWorldLocationAndRotationSimple::Rot' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.CalculateMaxDistanceFactor
// 0x0010 (0x0010 - 0x0000)
struct GSE_CharacterFuncLib_CalculateMaxDistanceFactor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_CharacterFuncLib_CalculateMaxDistanceFactor) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_CalculateMaxDistanceFactor");
//static_assert(sizeof(GSE_CharacterFuncLib_CalculateMaxDistanceFactor) == 0x000010, "Wrong size on GSE_CharacterFuncLib_CalculateMaxDistanceFactor");
//static_assert(offsetof(GSE_CharacterFuncLib_CalculateMaxDistanceFactor, Actor) == 0x000000, "Member 'GSE_CharacterFuncLib_CalculateMaxDistanceFactor::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_CalculateMaxDistanceFactor, ReturnValue) == 0x000008, "Member 'GSE_CharacterFuncLib_CalculateMaxDistanceFactor::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.CalculateScreenPercentageFromController
// 0x0018 (0x0018 - 0x0000)
struct GSE_CharacterFuncLib_CalculateScreenPercentageFromController final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_CharacterFuncLib_CalculateScreenPercentageFromController) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_CalculateScreenPercentageFromController");
//static_assert(sizeof(GSE_CharacterFuncLib_CalculateScreenPercentageFromController) == 0x000018, "Wrong size on GSE_CharacterFuncLib_CalculateScreenPercentageFromController");
//static_assert(offsetof(GSE_CharacterFuncLib_CalculateScreenPercentageFromController, Actor) == 0x000000, "Member 'GSE_CharacterFuncLib_CalculateScreenPercentageFromController::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_CalculateScreenPercentageFromController, Controller) == 0x000008, "Member 'GSE_CharacterFuncLib_CalculateScreenPercentageFromController::Controller' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_CalculateScreenPercentageFromController, ReturnValue) == 0x000010, "Member 'GSE_CharacterFuncLib_CalculateScreenPercentageFromController::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.GetActorBoundingSphereRadius
// 0x0010 (0x0010 - 0x0000)
struct GSE_CharacterFuncLib_GetActorBoundingSphereRadius final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_CharacterFuncLib_GetActorBoundingSphereRadius) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_GetActorBoundingSphereRadius");
//static_assert(sizeof(GSE_CharacterFuncLib_GetActorBoundingSphereRadius) == 0x000010, "Wrong size on GSE_CharacterFuncLib_GetActorBoundingSphereRadius");
//static_assert(offsetof(GSE_CharacterFuncLib_GetActorBoundingSphereRadius, Actor) == 0x000000, "Member 'GSE_CharacterFuncLib_GetActorBoundingSphereRadius::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetActorBoundingSphereRadius, ReturnValue) == 0x000008, "Member 'GSE_CharacterFuncLib_GetActorBoundingSphereRadius::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.GetBoneTransform
// 0x0070 (0x0070 - 0x0000)
struct GSE_CharacterFuncLib_GetBoneTransform final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CharacterFuncLib_GetBoneTransform) == 0x000010, "Wrong alignment on GSE_CharacterFuncLib_GetBoneTransform");
//static_assert(sizeof(GSE_CharacterFuncLib_GetBoneTransform) == 0x000070, "Wrong size on GSE_CharacterFuncLib_GetBoneTransform");
//static_assert(offsetof(GSE_CharacterFuncLib_GetBoneTransform, Character) == 0x000000, "Member 'GSE_CharacterFuncLib_GetBoneTransform::Character' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetBoneTransform, BoneIndex) == 0x000008, "Member 'GSE_CharacterFuncLib_GetBoneTransform::BoneIndex' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetBoneTransform, ReturnValue) == 0x000010, "Member 'GSE_CharacterFuncLib_GetBoneTransform::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.GetBoneTransformByMesh
// 0x0070 (0x0070 - 0x0000)
struct GSE_CharacterFuncLib_GetBoneTransformByMesh final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CharacterFuncLib_GetBoneTransformByMesh) == 0x000010, "Wrong alignment on GSE_CharacterFuncLib_GetBoneTransformByMesh");
//static_assert(sizeof(GSE_CharacterFuncLib_GetBoneTransformByMesh) == 0x000070, "Wrong size on GSE_CharacterFuncLib_GetBoneTransformByMesh");
//static_assert(offsetof(GSE_CharacterFuncLib_GetBoneTransformByMesh, Mesh) == 0x000000, "Member 'GSE_CharacterFuncLib_GetBoneTransformByMesh::Mesh' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetBoneTransformByMesh, BoneIndex) == 0x000008, "Member 'GSE_CharacterFuncLib_GetBoneTransformByMesh::BoneIndex' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetBoneTransformByMesh, ReturnValue) == 0x000010, "Member 'GSE_CharacterFuncLib_GetBoneTransformByMesh::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.GetPathFollowingBrakingDistance
// 0x0010 (0x0010 - 0x0000)
struct GSE_CharacterFuncLib_GetPathFollowingBrakingDistance final
{
public:
	class UCharacterMovementComponent*            CharacterMovement;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_CharacterFuncLib_GetPathFollowingBrakingDistance) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_GetPathFollowingBrakingDistance");
//static_assert(sizeof(GSE_CharacterFuncLib_GetPathFollowingBrakingDistance) == 0x000010, "Wrong size on GSE_CharacterFuncLib_GetPathFollowingBrakingDistance");
//static_assert(offsetof(GSE_CharacterFuncLib_GetPathFollowingBrakingDistance, CharacterMovement) == 0x000000, "Member 'GSE_CharacterFuncLib_GetPathFollowingBrakingDistance::CharacterMovement' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetPathFollowingBrakingDistance, ReturnValue) == 0x000008, "Member 'GSE_CharacterFuncLib_GetPathFollowingBrakingDistance::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.GetSceneComponentByName
// 0x0020 (0x0020 - 0x0000)
struct GSE_CharacterFuncLib_GetSceneComponentByName final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ComponentName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CharacterFuncLib_GetSceneComponentByName) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_GetSceneComponentByName");
//static_assert(sizeof(GSE_CharacterFuncLib_GetSceneComponentByName) == 0x000020, "Wrong size on GSE_CharacterFuncLib_GetSceneComponentByName");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSceneComponentByName, Actor) == 0x000000, "Member 'GSE_CharacterFuncLib_GetSceneComponentByName::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSceneComponentByName, ComponentName) == 0x000008, "Member 'GSE_CharacterFuncLib_GetSceneComponentByName::ComponentName' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSceneComponentByName, ReturnValue) == 0x000018, "Member 'GSE_CharacterFuncLib_GetSceneComponentByName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.GetSceneComponentTransformByName
// 0x0080 (0x0080 - 0x0000)
struct GSE_CharacterFuncLib_GetSceneComponentTransformByName final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ComponentName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CharacterFuncLib_GetSceneComponentTransformByName) == 0x000010, "Wrong alignment on GSE_CharacterFuncLib_GetSceneComponentTransformByName");
//static_assert(sizeof(GSE_CharacterFuncLib_GetSceneComponentTransformByName) == 0x000080, "Wrong size on GSE_CharacterFuncLib_GetSceneComponentTransformByName");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSceneComponentTransformByName, Actor) == 0x000000, "Member 'GSE_CharacterFuncLib_GetSceneComponentTransformByName::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSceneComponentTransformByName, ComponentName) == 0x000008, "Member 'GSE_CharacterFuncLib_GetSceneComponentTransformByName::ComponentName' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSceneComponentTransformByName, ReturnValue) == 0x000020, "Member 'GSE_CharacterFuncLib_GetSceneComponentTransformByName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.GetSocketLocation
// 0x0028 (0x0028 - 0x0000)
struct GSE_CharacterFuncLib_GetSocketLocation final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CharacterFuncLib_GetSocketLocation) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_GetSocketLocation");
//static_assert(sizeof(GSE_CharacterFuncLib_GetSocketLocation) == 0x000028, "Wrong size on GSE_CharacterFuncLib_GetSocketLocation");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSocketLocation, Comp) == 0x000000, "Member 'GSE_CharacterFuncLib_GetSocketLocation::Comp' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSocketLocation, SocketName) == 0x000008, "Member 'GSE_CharacterFuncLib_GetSocketLocation::SocketName' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSocketLocation, ReturnValue) == 0x000010, "Member 'GSE_CharacterFuncLib_GetSocketLocation::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.GetSocketRotation
// 0x0028 (0x0028 - 0x0000)
struct GSE_CharacterFuncLib_GetSocketRotation final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CharacterFuncLib_GetSocketRotation) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_GetSocketRotation");
//static_assert(sizeof(GSE_CharacterFuncLib_GetSocketRotation) == 0x000028, "Wrong size on GSE_CharacterFuncLib_GetSocketRotation");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSocketRotation, Comp) == 0x000000, "Member 'GSE_CharacterFuncLib_GetSocketRotation::Comp' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSocketRotation, SocketName) == 0x000008, "Member 'GSE_CharacterFuncLib_GetSocketRotation::SocketName' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSocketRotation, ReturnValue) == 0x000010, "Member 'GSE_CharacterFuncLib_GetSocketRotation::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.GetSocketTransform
// 0x0080 (0x0080 - 0x0000)
struct GSE_CharacterFuncLib_GetSocketTransform final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelativeTransformSpace                       TransfromSpace;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CharacterFuncLib_GetSocketTransform) == 0x000010, "Wrong alignment on GSE_CharacterFuncLib_GetSocketTransform");
//static_assert(sizeof(GSE_CharacterFuncLib_GetSocketTransform) == 0x000080, "Wrong size on GSE_CharacterFuncLib_GetSocketTransform");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSocketTransform, Comp) == 0x000000, "Member 'GSE_CharacterFuncLib_GetSocketTransform::Comp' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSocketTransform, SocketName) == 0x000008, "Member 'GSE_CharacterFuncLib_GetSocketTransform::SocketName' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSocketTransform, TransfromSpace) == 0x000010, "Member 'GSE_CharacterFuncLib_GetSocketTransform::TransfromSpace' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_GetSocketTransform, ReturnValue) == 0x000020, "Member 'GSE_CharacterFuncLib_GetSocketTransform::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.RecreatePhysicsState
// 0x0008 (0x0008 - 0x0000)
struct GSE_CharacterFuncLib_RecreatePhysicsState final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CharacterFuncLib_RecreatePhysicsState) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_RecreatePhysicsState");
//static_assert(sizeof(GSE_CharacterFuncLib_RecreatePhysicsState) == 0x000008, "Wrong size on GSE_CharacterFuncLib_RecreatePhysicsState");
//static_assert(offsetof(GSE_CharacterFuncLib_RecreatePhysicsState, Mesh) == 0x000000, "Member 'GSE_CharacterFuncLib_RecreatePhysicsState::Mesh' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.SetActorSKMeshesUpdateRateOptimizations
// 0x0010 (0x0010 - 0x0000)
struct GSE_CharacterFuncLib_SetActorSKMeshesUpdateRateOptimizations final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_CharacterFuncLib_SetActorSKMeshesUpdateRateOptimizations) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_SetActorSKMeshesUpdateRateOptimizations");
//static_assert(sizeof(GSE_CharacterFuncLib_SetActorSKMeshesUpdateRateOptimizations) == 0x000010, "Wrong size on GSE_CharacterFuncLib_SetActorSKMeshesUpdateRateOptimizations");
//static_assert(offsetof(GSE_CharacterFuncLib_SetActorSKMeshesUpdateRateOptimizations, Actor) == 0x000000, "Member 'GSE_CharacterFuncLib_SetActorSKMeshesUpdateRateOptimizations::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_SetActorSKMeshesUpdateRateOptimizations, bEnable) == 0x000008, "Member 'GSE_CharacterFuncLib_SetActorSKMeshesUpdateRateOptimizations::bEnable' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.SetAllPABodiesBelowResponseToAllChannels
// 0x0018 (0x0018 - 0x0000)
struct GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToAllChannels final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionResponse                            NewResponse;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToAllChannels) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToAllChannels");
//static_assert(sizeof(GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToAllChannels) == 0x000018, "Wrong size on GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToAllChannels");
//static_assert(offsetof(GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToAllChannels, Mesh) == 0x000000, "Member 'GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToAllChannels::Mesh' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToAllChannels, BoneName) == 0x000008, "Member 'GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToAllChannels::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToAllChannels, NewResponse) == 0x000010, "Member 'GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToAllChannels::NewResponse' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.SetAllPABodiesBelowResponseToChannels
// 0x0028 (0x0028 - 0x0000)
struct GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToChannels final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ECollisionChannel>                     Channels;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ECollisionResponse                            NewResponse;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToChannels) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToChannels");
//static_assert(sizeof(GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToChannels) == 0x000028, "Wrong size on GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToChannels");
//static_assert(offsetof(GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToChannels, Mesh) == 0x000000, "Member 'GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToChannels::Mesh' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToChannels, BoneName) == 0x000008, "Member 'GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToChannels::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToChannels, Channels) == 0x000010, "Member 'GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToChannels::Channels' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToChannels, NewResponse) == 0x000020, "Member 'GSE_CharacterFuncLib_SetAllPABodiesBelowResponseToChannels::NewResponse' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.SetAnimRootMotionTranslationScale
// 0x0010 (0x0010 - 0x0000)
struct GSE_CharacterFuncLib_SetAnimRootMotionTranslationScale final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_CharacterFuncLib_SetAnimRootMotionTranslationScale) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_SetAnimRootMotionTranslationScale");
//static_assert(sizeof(GSE_CharacterFuncLib_SetAnimRootMotionTranslationScale) == 0x000010, "Wrong size on GSE_CharacterFuncLib_SetAnimRootMotionTranslationScale");
//static_assert(offsetof(GSE_CharacterFuncLib_SetAnimRootMotionTranslationScale, Character) == 0x000000, "Member 'GSE_CharacterFuncLib_SetAnimRootMotionTranslationScale::Character' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_SetAnimRootMotionTranslationScale, Scale) == 0x000008, "Member 'GSE_CharacterFuncLib_SetAnimRootMotionTranslationScale::Scale' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.SetLocalScreenPercentageIfLocalController
// 0x0018 (0x0018 - 0x0000)
struct GSE_CharacterFuncLib_SetLocalScreenPercentageIfLocalController final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenPercentage;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutLocalScreenPercentage;                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CharacterFuncLib_SetLocalScreenPercentageIfLocalController) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_SetLocalScreenPercentageIfLocalController");
//static_assert(sizeof(GSE_CharacterFuncLib_SetLocalScreenPercentageIfLocalController) == 0x000018, "Wrong size on GSE_CharacterFuncLib_SetLocalScreenPercentageIfLocalController");
//static_assert(offsetof(GSE_CharacterFuncLib_SetLocalScreenPercentageIfLocalController, Actor) == 0x000000, "Member 'GSE_CharacterFuncLib_SetLocalScreenPercentageIfLocalController::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_SetLocalScreenPercentageIfLocalController, Controller) == 0x000008, "Member 'GSE_CharacterFuncLib_SetLocalScreenPercentageIfLocalController::Controller' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_SetLocalScreenPercentageIfLocalController, ScreenPercentage) == 0x000010, "Member 'GSE_CharacterFuncLib_SetLocalScreenPercentageIfLocalController::ScreenPercentage' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_SetLocalScreenPercentageIfLocalController, OutLocalScreenPercentage) == 0x000014, "Member 'GSE_CharacterFuncLib_SetLocalScreenPercentageIfLocalController::OutLocalScreenPercentage' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.SetMontagePlayRate
// 0x0010 (0x0010 - 0x0000)
struct GSE_CharacterFuncLib_SetMontagePlayRate final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_CharacterFuncLib_SetMontagePlayRate) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_SetMontagePlayRate");
//static_assert(sizeof(GSE_CharacterFuncLib_SetMontagePlayRate) == 0x000010, "Wrong size on GSE_CharacterFuncLib_SetMontagePlayRate");
//static_assert(offsetof(GSE_CharacterFuncLib_SetMontagePlayRate, Character) == 0x000000, "Member 'GSE_CharacterFuncLib_SetMontagePlayRate::Character' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_SetMontagePlayRate, PlayRate) == 0x000008, "Member 'GSE_CharacterFuncLib_SetMontagePlayRate::PlayRate' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.Tick
// 0x0010 (0x0010 - 0x0000)
struct GSE_CharacterFuncLib_Tick final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_CharacterFuncLib_Tick) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_Tick");
//static_assert(sizeof(GSE_CharacterFuncLib_Tick) == 0x000010, "Wrong size on GSE_CharacterFuncLib_Tick");
//static_assert(offsetof(GSE_CharacterFuncLib_Tick, Actor) == 0x000000, "Member 'GSE_CharacterFuncLib_Tick::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_Tick, DeltaTime) == 0x000008, "Member 'GSE_CharacterFuncLib_Tick::DeltaTime' has a wrong offset!");

// Function UnrealExtent.GSE_CharacterFuncLib.ToggleActorTickEnabled
// 0x0010 (0x0010 - 0x0000)
struct GSE_CharacterFuncLib_ToggleActorTickEnabled final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToggleActorTick;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToggleMoveComp;                                    // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToggleAIComp;                                      // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToggleSKMeshComp;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToggleAkComp;                                      // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToggleINCLUDE_CHILD_ACTOR;                         // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_CharacterFuncLib_ToggleActorTickEnabled) == 0x000008, "Wrong alignment on GSE_CharacterFuncLib_ToggleActorTickEnabled");
//static_assert(sizeof(GSE_CharacterFuncLib_ToggleActorTickEnabled) == 0x000010, "Wrong size on GSE_CharacterFuncLib_ToggleActorTickEnabled");
//static_assert(offsetof(GSE_CharacterFuncLib_ToggleActorTickEnabled, InActor) == 0x000000, "Member 'GSE_CharacterFuncLib_ToggleActorTickEnabled::InActor' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_ToggleActorTickEnabled, bEnable) == 0x000008, "Member 'GSE_CharacterFuncLib_ToggleActorTickEnabled::bEnable' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_ToggleActorTickEnabled, ToggleActorTick) == 0x000009, "Member 'GSE_CharacterFuncLib_ToggleActorTickEnabled::ToggleActorTick' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_ToggleActorTickEnabled, ToggleMoveComp) == 0x00000A, "Member 'GSE_CharacterFuncLib_ToggleActorTickEnabled::ToggleMoveComp' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_ToggleActorTickEnabled, ToggleAIComp) == 0x00000B, "Member 'GSE_CharacterFuncLib_ToggleActorTickEnabled::ToggleAIComp' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_ToggleActorTickEnabled, ToggleSKMeshComp) == 0x00000C, "Member 'GSE_CharacterFuncLib_ToggleActorTickEnabled::ToggleSKMeshComp' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_ToggleActorTickEnabled, ToggleAkComp) == 0x00000D, "Member 'GSE_CharacterFuncLib_ToggleActorTickEnabled::ToggleAkComp' has a wrong offset!");
//static_assert(offsetof(GSE_CharacterFuncLib_ToggleActorTickEnabled, ToggleINCLUDE_CHILD_ACTOR) == 0x00000E, "Member 'GSE_CharacterFuncLib_ToggleActorTickEnabled::ToggleINCLUDE_CHILD_ACTOR' has a wrong offset!");

// Function UnrealExtent.GSE_ChunkFuncLib.IsPlayGoInstalling
// 0x0001 (0x0001 - 0x0000)
struct GSE_ChunkFuncLib_IsPlayGoInstalling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ChunkFuncLib_IsPlayGoInstalling) == 0x000001, "Wrong alignment on GSE_ChunkFuncLib_IsPlayGoInstalling");
//static_assert(sizeof(GSE_ChunkFuncLib_IsPlayGoInstalling) == 0x000001, "Wrong size on GSE_ChunkFuncLib_IsPlayGoInstalling");
//static_assert(offsetof(GSE_ChunkFuncLib_IsPlayGoInstalling, ReturnValue) == 0x000000, "Member 'GSE_ChunkFuncLib_IsPlayGoInstalling::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ChunkFuncLib.TryGetPlayGoInfo
// 0x0020 (0x0020 - 0x0000)
struct GSE_ChunkFuncLib_TryGetPlayGoInfo final
{
public:
	int64                                         ProgressSize;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TotalSize;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CurrentTime;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ChunkFuncLib_TryGetPlayGoInfo) == 0x000008, "Wrong alignment on GSE_ChunkFuncLib_TryGetPlayGoInfo");
//static_assert(sizeof(GSE_ChunkFuncLib_TryGetPlayGoInfo) == 0x000020, "Wrong size on GSE_ChunkFuncLib_TryGetPlayGoInfo");
//static_assert(offsetof(GSE_ChunkFuncLib_TryGetPlayGoInfo, ProgressSize) == 0x000000, "Member 'GSE_ChunkFuncLib_TryGetPlayGoInfo::ProgressSize' has a wrong offset!");
//static_assert(offsetof(GSE_ChunkFuncLib_TryGetPlayGoInfo, TotalSize) == 0x000008, "Member 'GSE_ChunkFuncLib_TryGetPlayGoInfo::TotalSize' has a wrong offset!");
//static_assert(offsetof(GSE_ChunkFuncLib_TryGetPlayGoInfo, CurrentTime) == 0x000010, "Member 'GSE_ChunkFuncLib_TryGetPlayGoInfo::CurrentTime' has a wrong offset!");
//static_assert(offsetof(GSE_ChunkFuncLib_TryGetPlayGoInfo, ReturnValue) == 0x000018, "Member 'GSE_ChunkFuncLib_TryGetPlayGoInfo::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.Flush
// 0x0002 (0x0002 - 0x0000)
struct GSE_ConfigFuncLib_Flush final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRefreshInConfigSystem;                            // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_Flush) == 0x000001, "Wrong alignment on GSE_ConfigFuncLib_Flush");
//static_assert(sizeof(GSE_ConfigFuncLib_Flush) == 0x000002, "Wrong size on GSE_ConfigFuncLib_Flush");
//static_assert(offsetof(GSE_ConfigFuncLib_Flush, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_Flush::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_Flush, bRefreshInConfigSystem) == 0x000001, "Member 'GSE_ConfigFuncLib_Flush::bRefreshInConfigSystem' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.GetArray
// 0x0040 (0x0040 - 0x0000)
struct GSE_ConfigFuncLib_GetArray final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFound;                                         // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_GetArray) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_GetArray");
//static_assert(sizeof(GSE_ConfigFuncLib_GetArray) == 0x000040, "Wrong size on GSE_ConfigFuncLib_GetArray");
//static_assert(offsetof(GSE_ConfigFuncLib_GetArray, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_GetArray::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetArray, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_GetArray::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetArray, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_GetArray::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetArray, bWasFound) == 0x000028, "Member 'GSE_ConfigFuncLib_GetArray::bWasFound' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetArray, ReturnValue) == 0x000030, "Member 'GSE_ConfigFuncLib_GetArray::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.GetBool
// 0x0030 (0x0030 - 0x0000)
struct GSE_ConfigFuncLib_GetBool final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFound;                                         // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ConfigFuncLib_GetBool) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_GetBool");
//static_assert(sizeof(GSE_ConfigFuncLib_GetBool) == 0x000030, "Wrong size on GSE_ConfigFuncLib_GetBool");
//static_assert(offsetof(GSE_ConfigFuncLib_GetBool, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_GetBool::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetBool, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_GetBool::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetBool, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_GetBool::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetBool, bWasFound) == 0x000028, "Member 'GSE_ConfigFuncLib_GetBool::bWasFound' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetBool, ReturnValue) == 0x000029, "Member 'GSE_ConfigFuncLib_GetBool::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.GetColor
// 0x0030 (0x0030 - 0x0000)
struct GSE_ConfigFuncLib_GetColor final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFound;                                         // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_GetColor) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_GetColor");
//static_assert(sizeof(GSE_ConfigFuncLib_GetColor) == 0x000030, "Wrong size on GSE_ConfigFuncLib_GetColor");
//static_assert(offsetof(GSE_ConfigFuncLib_GetColor, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_GetColor::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetColor, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_GetColor::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetColor, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_GetColor::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetColor, bWasFound) == 0x000028, "Member 'GSE_ConfigFuncLib_GetColor::bWasFound' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetColor, ReturnValue) == 0x00002C, "Member 'GSE_ConfigFuncLib_GetColor::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.GetFloat
// 0x0030 (0x0030 - 0x0000)
struct GSE_ConfigFuncLib_GetFloat final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFound;                                         // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_GetFloat) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_GetFloat");
//static_assert(sizeof(GSE_ConfigFuncLib_GetFloat) == 0x000030, "Wrong size on GSE_ConfigFuncLib_GetFloat");
//static_assert(offsetof(GSE_ConfigFuncLib_GetFloat, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_GetFloat::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetFloat, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_GetFloat::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetFloat, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_GetFloat::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetFloat, bWasFound) == 0x000028, "Member 'GSE_ConfigFuncLib_GetFloat::bWasFound' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetFloat, ReturnValue) == 0x00002C, "Member 'GSE_ConfigFuncLib_GetFloat::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.GetInt
// 0x0030 (0x0030 - 0x0000)
struct GSE_ConfigFuncLib_GetInt final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFound;                                         // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_GetInt) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_GetInt");
//static_assert(sizeof(GSE_ConfigFuncLib_GetInt) == 0x000030, "Wrong size on GSE_ConfigFuncLib_GetInt");
//static_assert(offsetof(GSE_ConfigFuncLib_GetInt, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_GetInt::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetInt, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_GetInt::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetInt, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_GetInt::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetInt, bWasFound) == 0x000028, "Member 'GSE_ConfigFuncLib_GetInt::bWasFound' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetInt, ReturnValue) == 0x00002C, "Member 'GSE_ConfigFuncLib_GetInt::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.GetRotator
// 0x0048 (0x0048 - 0x0000)
struct GSE_ConfigFuncLib_GetRotator final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFound;                                         // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_GetRotator) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_GetRotator");
//static_assert(sizeof(GSE_ConfigFuncLib_GetRotator) == 0x000048, "Wrong size on GSE_ConfigFuncLib_GetRotator");
//static_assert(offsetof(GSE_ConfigFuncLib_GetRotator, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_GetRotator::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetRotator, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_GetRotator::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetRotator, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_GetRotator::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetRotator, bWasFound) == 0x000028, "Member 'GSE_ConfigFuncLib_GetRotator::bWasFound' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetRotator, ReturnValue) == 0x000030, "Member 'GSE_ConfigFuncLib_GetRotator::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.GetString
// 0x0040 (0x0040 - 0x0000)
struct GSE_ConfigFuncLib_GetString final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFound;                                         // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_GetString) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_GetString");
//static_assert(sizeof(GSE_ConfigFuncLib_GetString) == 0x000040, "Wrong size on GSE_ConfigFuncLib_GetString");
//static_assert(offsetof(GSE_ConfigFuncLib_GetString, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_GetString::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetString, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_GetString::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetString, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_GetString::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetString, bWasFound) == 0x000028, "Member 'GSE_ConfigFuncLib_GetString::bWasFound' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetString, ReturnValue) == 0x000030, "Member 'GSE_ConfigFuncLib_GetString::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.GetText
// 0x0048 (0x0048 - 0x0000)
struct GSE_ConfigFuncLib_GetText final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFound;                                         // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_GetText) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_GetText");
//static_assert(sizeof(GSE_ConfigFuncLib_GetText) == 0x000048, "Wrong size on GSE_ConfigFuncLib_GetText");
//static_assert(offsetof(GSE_ConfigFuncLib_GetText, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_GetText::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetText, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_GetText::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetText, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_GetText::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetText, bWasFound) == 0x000028, "Member 'GSE_ConfigFuncLib_GetText::bWasFound' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetText, ReturnValue) == 0x000030, "Member 'GSE_ConfigFuncLib_GetText::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.GetVector
// 0x0048 (0x0048 - 0x0000)
struct GSE_ConfigFuncLib_GetVector final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFound;                                         // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_GetVector) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_GetVector");
//static_assert(sizeof(GSE_ConfigFuncLib_GetVector) == 0x000048, "Wrong size on GSE_ConfigFuncLib_GetVector");
//static_assert(offsetof(GSE_ConfigFuncLib_GetVector, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_GetVector::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetVector, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_GetVector::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetVector, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_GetVector::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetVector, bWasFound) == 0x000028, "Member 'GSE_ConfigFuncLib_GetVector::bWasFound' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetVector, ReturnValue) == 0x000030, "Member 'GSE_ConfigFuncLib_GetVector::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.GetVector2D
// 0x0040 (0x0040 - 0x0000)
struct GSE_ConfigFuncLib_GetVector2D final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFound;                                         // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_GetVector2D) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_GetVector2D");
//static_assert(sizeof(GSE_ConfigFuncLib_GetVector2D) == 0x000040, "Wrong size on GSE_ConfigFuncLib_GetVector2D");
//static_assert(offsetof(GSE_ConfigFuncLib_GetVector2D, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_GetVector2D::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetVector2D, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_GetVector2D::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetVector2D, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_GetVector2D::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetVector2D, bWasFound) == 0x000028, "Member 'GSE_ConfigFuncLib_GetVector2D::bWasFound' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetVector2D, ReturnValue) == 0x000030, "Member 'GSE_ConfigFuncLib_GetVector2D::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.GetVector4
// 0x0050 (0x0050 - 0x0000)
struct GSE_ConfigFuncLib_GetVector4 final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFound;                                         // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ReturnValue;                                       // 0x0030(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_GetVector4) == 0x000010, "Wrong alignment on GSE_ConfigFuncLib_GetVector4");
//static_assert(sizeof(GSE_ConfigFuncLib_GetVector4) == 0x000050, "Wrong size on GSE_ConfigFuncLib_GetVector4");
//static_assert(offsetof(GSE_ConfigFuncLib_GetVector4, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_GetVector4::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetVector4, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_GetVector4::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetVector4, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_GetVector4::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetVector4, bWasFound) == 0x000028, "Member 'GSE_ConfigFuncLib_GetVector4::bWasFound' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_GetVector4, ReturnValue) == 0x000030, "Member 'GSE_ConfigFuncLib_GetVector4::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.SetArray
// 0x0038 (0x0038 - 0x0000)
struct GSE_ConfigFuncLib_SetArray final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ArrayValue;                                        // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_SetArray) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_SetArray");
//static_assert(sizeof(GSE_ConfigFuncLib_SetArray) == 0x000038, "Wrong size on GSE_ConfigFuncLib_SetArray");
//static_assert(offsetof(GSE_ConfigFuncLib_SetArray, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_SetArray::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetArray, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_SetArray::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetArray, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_SetArray::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetArray, ArrayValue) == 0x000028, "Member 'GSE_ConfigFuncLib_SetArray::ArrayValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.SetBool
// 0x0030 (0x0030 - 0x0000)
struct GSE_ConfigFuncLib_SetBool final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolValue;                                         // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ConfigFuncLib_SetBool) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_SetBool");
//static_assert(sizeof(GSE_ConfigFuncLib_SetBool) == 0x000030, "Wrong size on GSE_ConfigFuncLib_SetBool");
//static_assert(offsetof(GSE_ConfigFuncLib_SetBool, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_SetBool::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetBool, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_SetBool::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetBool, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_SetBool::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetBool, BoolValue) == 0x000028, "Member 'GSE_ConfigFuncLib_SetBool::BoolValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.SetColor
// 0x0030 (0x0030 - 0x0000)
struct GSE_ConfigFuncLib_SetColor final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorValue;                                        // 0x0028(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ConfigFuncLib_SetColor) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_SetColor");
//static_assert(sizeof(GSE_ConfigFuncLib_SetColor) == 0x000030, "Wrong size on GSE_ConfigFuncLib_SetColor");
//static_assert(offsetof(GSE_ConfigFuncLib_SetColor, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_SetColor::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetColor, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_SetColor::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetColor, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_SetColor::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetColor, ColorValue) == 0x000028, "Member 'GSE_ConfigFuncLib_SetColor::ColorValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.SetFloat
// 0x0030 (0x0030 - 0x0000)
struct GSE_ConfigFuncLib_SetFloat final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ConfigFuncLib_SetFloat) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_SetFloat");
//static_assert(sizeof(GSE_ConfigFuncLib_SetFloat) == 0x000030, "Wrong size on GSE_ConfigFuncLib_SetFloat");
//static_assert(offsetof(GSE_ConfigFuncLib_SetFloat, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_SetFloat::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetFloat, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_SetFloat::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetFloat, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_SetFloat::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetFloat, FloatValue) == 0x000028, "Member 'GSE_ConfigFuncLib_SetFloat::FloatValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.SetInt
// 0x0030 (0x0030 - 0x0000)
struct GSE_ConfigFuncLib_SetInt final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ConfigFuncLib_SetInt) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_SetInt");
//static_assert(sizeof(GSE_ConfigFuncLib_SetInt) == 0x000030, "Wrong size on GSE_ConfigFuncLib_SetInt");
//static_assert(offsetof(GSE_ConfigFuncLib_SetInt, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_SetInt::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetInt, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_SetInt::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetInt, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_SetInt::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetInt, IntValue) == 0x000028, "Member 'GSE_ConfigFuncLib_SetInt::IntValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.SetRotator
// 0x0040 (0x0040 - 0x0000)
struct GSE_ConfigFuncLib_SetRotator final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotatorValue;                                      // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_SetRotator) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_SetRotator");
//static_assert(sizeof(GSE_ConfigFuncLib_SetRotator) == 0x000040, "Wrong size on GSE_ConfigFuncLib_SetRotator");
//static_assert(offsetof(GSE_ConfigFuncLib_SetRotator, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_SetRotator::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetRotator, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_SetRotator::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetRotator, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_SetRotator::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetRotator, RotatorValue) == 0x000028, "Member 'GSE_ConfigFuncLib_SetRotator::RotatorValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.SetString
// 0x0038 (0x0038 - 0x0000)
struct GSE_ConfigFuncLib_SetString final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringValue;                                       // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_SetString) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_SetString");
//static_assert(sizeof(GSE_ConfigFuncLib_SetString) == 0x000038, "Wrong size on GSE_ConfigFuncLib_SetString");
//static_assert(offsetof(GSE_ConfigFuncLib_SetString, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_SetString::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetString, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_SetString::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetString, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_SetString::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetString, StringValue) == 0x000028, "Member 'GSE_ConfigFuncLib_SetString::StringValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.SetText
// 0x0040 (0x0040 - 0x0000)
struct GSE_ConfigFuncLib_SetText final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TextValue;                                         // 0x0028(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_SetText) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_SetText");
//static_assert(sizeof(GSE_ConfigFuncLib_SetText) == 0x000040, "Wrong size on GSE_ConfigFuncLib_SetText");
//static_assert(offsetof(GSE_ConfigFuncLib_SetText, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_SetText::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetText, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_SetText::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetText, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_SetText::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetText, TextValue) == 0x000028, "Member 'GSE_ConfigFuncLib_SetText::TextValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.SetVector
// 0x0040 (0x0040 - 0x0000)
struct GSE_ConfigFuncLib_SetVector final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VectorValue;                                       // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_SetVector) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_SetVector");
//static_assert(sizeof(GSE_ConfigFuncLib_SetVector) == 0x000040, "Wrong size on GSE_ConfigFuncLib_SetVector");
//static_assert(offsetof(GSE_ConfigFuncLib_SetVector, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_SetVector::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetVector, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_SetVector::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetVector, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_SetVector::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetVector, VectorValue) == 0x000028, "Member 'GSE_ConfigFuncLib_SetVector::VectorValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.SetVector2D
// 0x0038 (0x0038 - 0x0000)
struct GSE_ConfigFuncLib_SetVector2D final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Vector2DValue;                                     // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_SetVector2D) == 0x000008, "Wrong alignment on GSE_ConfigFuncLib_SetVector2D");
//static_assert(sizeof(GSE_ConfigFuncLib_SetVector2D) == 0x000038, "Wrong size on GSE_ConfigFuncLib_SetVector2D");
//static_assert(offsetof(GSE_ConfigFuncLib_SetVector2D, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_SetVector2D::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetVector2D, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_SetVector2D::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetVector2D, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_SetVector2D::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetVector2D, Vector2DValue) == 0x000028, "Member 'GSE_ConfigFuncLib_SetVector2D::Vector2DValue' has a wrong offset!");

// Function UnrealExtent.GSE_ConfigFuncLib.SetVector4
// 0x0050 (0x0050 - 0x0000)
struct GSE_ConfigFuncLib_SetVector4 final
{
public:
	EConfigIniFileNames                           ConfigFile;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               Vector4Value;                                      // 0x0030(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ConfigFuncLib_SetVector4) == 0x000010, "Wrong alignment on GSE_ConfigFuncLib_SetVector4");
//static_assert(sizeof(GSE_ConfigFuncLib_SetVector4) == 0x000050, "Wrong size on GSE_ConfigFuncLib_SetVector4");
//static_assert(offsetof(GSE_ConfigFuncLib_SetVector4, ConfigFile) == 0x000000, "Member 'GSE_ConfigFuncLib_SetVector4::ConfigFile' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetVector4, SectionName) == 0x000008, "Member 'GSE_ConfigFuncLib_SetVector4::SectionName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetVector4, PropertyName) == 0x000018, "Member 'GSE_ConfigFuncLib_SetVector4::PropertyName' has a wrong offset!");
//static_assert(offsetof(GSE_ConfigFuncLib_SetVector4, Vector4Value) == 0x000030, "Member 'GSE_ConfigFuncLib_SetVector4::Vector4Value' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetActorFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetActorFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetActorFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetActorFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetActorFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetActorFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetActorFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetActorFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetAIFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetAIFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetAIFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetAIFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetAIFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetAIFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetAIFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetAIFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetAnimFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetAnimFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetAnimFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetAnimFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetAnimFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetAnimFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetAnimFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetAnimFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetAsyncLineTraceReqFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetAsyncLineTraceReqFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetAsyncLineTraceReqFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetAsyncLineTraceReqFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetAsyncLineTraceReqFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetAsyncLineTraceReqFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetAsyncLineTraceReqFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetAsyncLineTraceReqFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetCVarFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetCVarFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetCVarFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetCVarFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetCVarFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetCVarFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetCVarFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetCVarFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetGameplayTagFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetGameplayTagFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetGameplayTagFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetGameplayTagFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetGameplayTagFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetGameplayTagFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetGameplayTagFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetGameplayTagFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetGSCVarFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetGSCVarFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetGSCVarFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetGSCVarFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetGSCVarFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetGSCVarFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetGSCVarFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetGSCVarFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetInputFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetInputFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetInputFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetInputFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetInputFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetInputFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetInputFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetInputFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetLineTraceFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetLineTraceFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetLineTraceFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetLineTraceFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetLineTraceFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetLineTraceFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetLineTraceFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetLineTraceFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetMathFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetMathFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetMathFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetMathFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetMathFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetMathFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetMathFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetMathFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetNiagaraFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetNiagaraFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetNiagaraFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetNiagaraFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetNiagaraFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetNiagaraFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetNiagaraFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetNiagaraFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetProfilerFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetProfilerFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetProfilerFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetProfilerFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetProfilerFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetProfilerFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetProfilerFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetProfilerFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetRenderFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetRenderFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetRenderFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetRenderFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetRenderFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetRenderFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetRenderFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetRenderFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetSceneComponentFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetSceneComponentFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetSceneComponentFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetSceneComponentFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetSceneComponentFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetSceneComponentFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetSceneComponentFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetSceneComponentFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetSplineComponentFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetSplineComponentFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetSplineComponentFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetSplineComponentFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetSplineComponentFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetSplineComponentFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetSplineComponentFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetSplineComponentFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetTaskGraphFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetTaskGraphFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetTaskGraphFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetTaskGraphFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetTaskGraphFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetTaskGraphFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetTaskGraphFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetTaskGraphFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CppExport.GetUMGFuncAsMap
// 0x0050 (0x0050 - 0x0000)
struct GSE_CppExport_GetUMGFuncAsMap final
{
public:
	TMap<class FString, struct FIntPtr>           ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CppExport_GetUMGFuncAsMap) == 0x000008, "Wrong alignment on GSE_CppExport_GetUMGFuncAsMap");
//static_assert(sizeof(GSE_CppExport_GetUMGFuncAsMap) == 0x000050, "Wrong size on GSE_CppExport_GetUMGFuncAsMap");
//static_assert(offsetof(GSE_CppExport_GetUMGFuncAsMap, ReturnValue) == 0x000000, "Member 'GSE_CppExport_GetUMGFuncAsMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EditorFuncLib.AssetPath_GetCDO
// 0x0028 (0x0028 - 0x0000)
struct GSE_EditorFuncLib_AssetPath_GetCDO final
{
public:
	class UObject*                                Outer_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlueprint*                             Blueprint;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EditorFuncLib_AssetPath_GetCDO) == 0x000008, "Wrong alignment on GSE_EditorFuncLib_AssetPath_GetCDO");
//static_assert(sizeof(GSE_EditorFuncLib_AssetPath_GetCDO) == 0x000028, "Wrong size on GSE_EditorFuncLib_AssetPath_GetCDO");
//static_assert(offsetof(GSE_EditorFuncLib_AssetPath_GetCDO, Outer_0) == 0x000000, "Member 'GSE_EditorFuncLib_AssetPath_GetCDO::Outer_0' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_AssetPath_GetCDO, Path) == 0x000008, "Member 'GSE_EditorFuncLib_AssetPath_GetCDO::Path' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_AssetPath_GetCDO, Blueprint) == 0x000018, "Member 'GSE_EditorFuncLib_AssetPath_GetCDO::Blueprint' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_AssetPath_GetCDO, ReturnValue) == 0x000020, "Member 'GSE_EditorFuncLib_AssetPath_GetCDO::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EditorFuncLib.BGUGetStaticMeshComp
// 0x0010 (0x0010 - 0x0000)
struct GSE_EditorFuncLib_BGUGetStaticMeshComp final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EditorFuncLib_BGUGetStaticMeshComp) == 0x000008, "Wrong alignment on GSE_EditorFuncLib_BGUGetStaticMeshComp");
//static_assert(sizeof(GSE_EditorFuncLib_BGUGetStaticMeshComp) == 0x000010, "Wrong size on GSE_EditorFuncLib_BGUGetStaticMeshComp");
//static_assert(offsetof(GSE_EditorFuncLib_BGUGetStaticMeshComp, Actor) == 0x000000, "Member 'GSE_EditorFuncLib_BGUGetStaticMeshComp::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_BGUGetStaticMeshComp, ReturnValue) == 0x000008, "Member 'GSE_EditorFuncLib_BGUGetStaticMeshComp::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EditorFuncLib.BGULandscapeCameraCollsion
// 0x0020 (0x0020 - 0x0000)
struct GSE_EditorFuncLib_BGULandscapeCameraCollsion final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurfaceType;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CellSize;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeightOffset;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDisplacement;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraCollisionOffset;                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EditorFuncLib_BGULandscapeCameraCollsion) == 0x000008, "Wrong alignment on GSE_EditorFuncLib_BGULandscapeCameraCollsion");
//static_assert(sizeof(GSE_EditorFuncLib_BGULandscapeCameraCollsion) == 0x000020, "Wrong size on GSE_EditorFuncLib_BGULandscapeCameraCollsion");
//static_assert(offsetof(GSE_EditorFuncLib_BGULandscapeCameraCollsion, WorldContextObject) == 0x000000, "Member 'GSE_EditorFuncLib_BGULandscapeCameraCollsion::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_BGULandscapeCameraCollsion, SurfaceType) == 0x000008, "Member 'GSE_EditorFuncLib_BGULandscapeCameraCollsion::SurfaceType' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_BGULandscapeCameraCollsion, CellSize) == 0x00000C, "Member 'GSE_EditorFuncLib_BGULandscapeCameraCollsion::CellSize' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_BGULandscapeCameraCollsion, MaxHeightOffset) == 0x000010, "Member 'GSE_EditorFuncLib_BGULandscapeCameraCollsion::MaxHeightOffset' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_BGULandscapeCameraCollsion, MaxDisplacement) == 0x000014, "Member 'GSE_EditorFuncLib_BGULandscapeCameraCollsion::MaxDisplacement' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_BGULandscapeCameraCollsion, CameraCollisionOffset) == 0x000018, "Member 'GSE_EditorFuncLib_BGULandscapeCameraCollsion::CameraCollisionOffset' has a wrong offset!");

// Function UnrealExtent.GSE_EditorFuncLib.CheckActorBoundsInfo
// 0x0048 (0x0048 - 0x0000)
struct GSE_EditorFuncLib_CheckActorBoundsInfo final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeNonCollision;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutActorLevelBoundsRelevant;                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   OutActorBounds;                                    // 0x0010(0x0038)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EditorFuncLib_CheckActorBoundsInfo) == 0x000008, "Wrong alignment on GSE_EditorFuncLib_CheckActorBoundsInfo");
//static_assert(sizeof(GSE_EditorFuncLib_CheckActorBoundsInfo) == 0x000048, "Wrong size on GSE_EditorFuncLib_CheckActorBoundsInfo");
//static_assert(offsetof(GSE_EditorFuncLib_CheckActorBoundsInfo, InActor) == 0x000000, "Member 'GSE_EditorFuncLib_CheckActorBoundsInfo::InActor' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_CheckActorBoundsInfo, bIncludeNonCollision) == 0x000008, "Member 'GSE_EditorFuncLib_CheckActorBoundsInfo::bIncludeNonCollision' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_CheckActorBoundsInfo, OutActorLevelBoundsRelevant) == 0x000009, "Member 'GSE_EditorFuncLib_CheckActorBoundsInfo::OutActorLevelBoundsRelevant' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_CheckActorBoundsInfo, OutActorBounds) == 0x000010, "Member 'GSE_EditorFuncLib_CheckActorBoundsInfo::OutActorBounds' has a wrong offset!");

// Function UnrealExtent.GSE_EditorFuncLib.FAssetData_GetAsset
// 0x0010 (0x0010 - 0x0000)
struct GSE_EditorFuncLib_FAssetData_GetAsset final
{
public:
	class UAssetDataArray*                        AssetData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EditorFuncLib_FAssetData_GetAsset) == 0x000008, "Wrong alignment on GSE_EditorFuncLib_FAssetData_GetAsset");
//static_assert(sizeof(GSE_EditorFuncLib_FAssetData_GetAsset) == 0x000010, "Wrong size on GSE_EditorFuncLib_FAssetData_GetAsset");
//static_assert(offsetof(GSE_EditorFuncLib_FAssetData_GetAsset, AssetData) == 0x000000, "Member 'GSE_EditorFuncLib_FAssetData_GetAsset::AssetData' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_FAssetData_GetAsset, ReturnValue) == 0x000008, "Member 'GSE_EditorFuncLib_FAssetData_GetAsset::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EditorFuncLib.FAssetData_GetClass
// 0x0010 (0x0010 - 0x0000)
struct GSE_EditorFuncLib_FAssetData_GetClass final
{
public:
	class UAssetDataArray*                        AssetData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EditorFuncLib_FAssetData_GetClass) == 0x000008, "Wrong alignment on GSE_EditorFuncLib_FAssetData_GetClass");
//static_assert(sizeof(GSE_EditorFuncLib_FAssetData_GetClass) == 0x000010, "Wrong size on GSE_EditorFuncLib_FAssetData_GetClass");
//static_assert(offsetof(GSE_EditorFuncLib_FAssetData_GetClass, AssetData) == 0x000000, "Member 'GSE_EditorFuncLib_FAssetData_GetClass::AssetData' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_FAssetData_GetClass, ReturnValue) == 0x000008, "Member 'GSE_EditorFuncLib_FAssetData_GetClass::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EditorFuncLib.FAssetData_GetTagValue
// 0x0020 (0x0020 - 0x0000)
struct GSE_EditorFuncLib_FAssetData_GetTagValue final
{
public:
	class UAssetDataArray*                        AssetData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagName;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EditorFuncLib_FAssetData_GetTagValue) == 0x000008, "Wrong alignment on GSE_EditorFuncLib_FAssetData_GetTagValue");
//static_assert(sizeof(GSE_EditorFuncLib_FAssetData_GetTagValue) == 0x000020, "Wrong size on GSE_EditorFuncLib_FAssetData_GetTagValue");
//static_assert(offsetof(GSE_EditorFuncLib_FAssetData_GetTagValue, AssetData) == 0x000000, "Member 'GSE_EditorFuncLib_FAssetData_GetTagValue::AssetData' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_FAssetData_GetTagValue, TagName) == 0x000008, "Member 'GSE_EditorFuncLib_FAssetData_GetTagValue::TagName' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_FAssetData_GetTagValue, ReturnValue) == 0x000010, "Member 'GSE_EditorFuncLib_FAssetData_GetTagValue::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EditorFuncLib.GetBrushBounds
// 0x0040 (0x0040 - 0x0000)
struct GSE_EditorFuncLib_GetBrushBounds final
{
public:
	class UBrushComponent*                        BrushCom;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EditorFuncLib_GetBrushBounds) == 0x000008, "Wrong alignment on GSE_EditorFuncLib_GetBrushBounds");
//static_assert(sizeof(GSE_EditorFuncLib_GetBrushBounds) == 0x000040, "Wrong size on GSE_EditorFuncLib_GetBrushBounds");
//static_assert(offsetof(GSE_EditorFuncLib_GetBrushBounds, BrushCom) == 0x000000, "Member 'GSE_EditorFuncLib_GetBrushBounds::BrushCom' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_GetBrushBounds, ReturnValue) == 0x000008, "Member 'GSE_EditorFuncLib_GetBrushBounds::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EditorFuncLib.GetCDONodeComponents
// 0x0018 (0x0018 - 0x0000)
struct GSE_EditorFuncLib_GetCDONodeComponents final
{
public:
	class AActor*                                 CDO;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>                ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EditorFuncLib_GetCDONodeComponents) == 0x000008, "Wrong alignment on GSE_EditorFuncLib_GetCDONodeComponents");
//static_assert(sizeof(GSE_EditorFuncLib_GetCDONodeComponents) == 0x000018, "Wrong size on GSE_EditorFuncLib_GetCDONodeComponents");
//static_assert(offsetof(GSE_EditorFuncLib_GetCDONodeComponents, CDO) == 0x000000, "Member 'GSE_EditorFuncLib_GetCDONodeComponents::CDO' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_GetCDONodeComponents, ReturnValue) == 0x000008, "Member 'GSE_EditorFuncLib_GetCDONodeComponents::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EditorFuncLib.GetContentBrowserSelections
// 0x0008 (0x0008 - 0x0000)
struct GSE_EditorFuncLib_GetContentBrowserSelections final
{
public:
	class UAssetDataArray*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EditorFuncLib_GetContentBrowserSelections) == 0x000008, "Wrong alignment on GSE_EditorFuncLib_GetContentBrowserSelections");
//static_assert(sizeof(GSE_EditorFuncLib_GetContentBrowserSelections) == 0x000008, "Wrong size on GSE_EditorFuncLib_GetContentBrowserSelections");
//static_assert(offsetof(GSE_EditorFuncLib_GetContentBrowserSelections, ReturnValue) == 0x000000, "Member 'GSE_EditorFuncLib_GetContentBrowserSelections::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EditorFuncLib.GetValidPostProcessVolumes
// 0x0018 (0x0018 - 0x0000)
struct GSE_EditorFuncLib_GetValidPostProcessVolumes final
{
public:
	class UWorld*                                 InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APostProcessVolume*>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EditorFuncLib_GetValidPostProcessVolumes) == 0x000008, "Wrong alignment on GSE_EditorFuncLib_GetValidPostProcessVolumes");
//static_assert(sizeof(GSE_EditorFuncLib_GetValidPostProcessVolumes) == 0x000018, "Wrong size on GSE_EditorFuncLib_GetValidPostProcessVolumes");
//static_assert(offsetof(GSE_EditorFuncLib_GetValidPostProcessVolumes, InWorld) == 0x000000, "Member 'GSE_EditorFuncLib_GetValidPostProcessVolumes::InWorld' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_GetValidPostProcessVolumes, ReturnValue) == 0x000008, "Member 'GSE_EditorFuncLib_GetValidPostProcessVolumes::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EditorFuncLib.ImportCSVToStringTable
// 0x0018 (0x0018 - 0x0000)
struct GSE_EditorFuncLib_ImportCSVToStringTable final
{
public:
	class FName                                   TableId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CSVPath;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EditorFuncLib_ImportCSVToStringTable) == 0x000008, "Wrong alignment on GSE_EditorFuncLib_ImportCSVToStringTable");
//static_assert(sizeof(GSE_EditorFuncLib_ImportCSVToStringTable) == 0x000018, "Wrong size on GSE_EditorFuncLib_ImportCSVToStringTable");
//static_assert(offsetof(GSE_EditorFuncLib_ImportCSVToStringTable, TableId) == 0x000000, "Member 'GSE_EditorFuncLib_ImportCSVToStringTable::TableId' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_ImportCSVToStringTable, CSVPath) == 0x000008, "Member 'GSE_EditorFuncLib_ImportCSVToStringTable::CSVPath' has a wrong offset!");

// Function UnrealExtent.GSE_EditorFuncLib.IsClassPlaceable
// 0x0010 (0x0010 - 0x0000)
struct GSE_EditorFuncLib_IsClassPlaceable final
{
public:
	class UClass*                                 AssetClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EditorFuncLib_IsClassPlaceable) == 0x000008, "Wrong alignment on GSE_EditorFuncLib_IsClassPlaceable");
//static_assert(sizeof(GSE_EditorFuncLib_IsClassPlaceable) == 0x000010, "Wrong size on GSE_EditorFuncLib_IsClassPlaceable");
//static_assert(offsetof(GSE_EditorFuncLib_IsClassPlaceable, AssetClass) == 0x000000, "Member 'GSE_EditorFuncLib_IsClassPlaceable::AssetClass' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_IsClassPlaceable, ReturnValue) == 0x000008, "Member 'GSE_EditorFuncLib_IsClassPlaceable::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EditorFuncLib.SetActorEditorOnly
// 0x0010 (0x0010 - 0x0000)
struct GSE_EditorFuncLib_SetActorEditorOnly final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewEnable;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EditorFuncLib_SetActorEditorOnly) == 0x000008, "Wrong alignment on GSE_EditorFuncLib_SetActorEditorOnly");
//static_assert(sizeof(GSE_EditorFuncLib_SetActorEditorOnly) == 0x000010, "Wrong size on GSE_EditorFuncLib_SetActorEditorOnly");
//static_assert(offsetof(GSE_EditorFuncLib_SetActorEditorOnly, Actor) == 0x000000, "Member 'GSE_EditorFuncLib_SetActorEditorOnly::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_SetActorEditorOnly, NewEnable) == 0x000008, "Member 'GSE_EditorFuncLib_SetActorEditorOnly::NewEnable' has a wrong offset!");

// Function UnrealExtent.GSE_EditorFuncLib.SetActorLevelBoundsRelevant
// 0x0010 (0x0010 - 0x0000)
struct GSE_EditorFuncLib_SetActorLevelBoundsRelevant final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelevant;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EditorFuncLib_SetActorLevelBoundsRelevant) == 0x000008, "Wrong alignment on GSE_EditorFuncLib_SetActorLevelBoundsRelevant");
//static_assert(sizeof(GSE_EditorFuncLib_SetActorLevelBoundsRelevant) == 0x000010, "Wrong size on GSE_EditorFuncLib_SetActorLevelBoundsRelevant");
//static_assert(offsetof(GSE_EditorFuncLib_SetActorLevelBoundsRelevant, InActor) == 0x000000, "Member 'GSE_EditorFuncLib_SetActorLevelBoundsRelevant::InActor' has a wrong offset!");
//static_assert(offsetof(GSE_EditorFuncLib_SetActorLevelBoundsRelevant, bRelevant) == 0x000008, "Member 'GSE_EditorFuncLib_SetActorLevelBoundsRelevant::bRelevant' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.AdjustPSOPrecompileBatch
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_AdjustPSOPrecompileBatch final
{
public:
	int32                                         BatchSize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BatchTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_AdjustPSOPrecompileBatch) == 0x000004, "Wrong alignment on GSE_EngineFuncLib_AdjustPSOPrecompileBatch");
//static_assert(sizeof(GSE_EngineFuncLib_AdjustPSOPrecompileBatch) == 0x000008, "Wrong size on GSE_EngineFuncLib_AdjustPSOPrecompileBatch");
//static_assert(offsetof(GSE_EngineFuncLib_AdjustPSOPrecompileBatch, BatchSize) == 0x000000, "Member 'GSE_EngineFuncLib_AdjustPSOPrecompileBatch::BatchSize' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_AdjustPSOPrecompileBatch, BatchTime) == 0x000004, "Member 'GSE_EngineFuncLib_AdjustPSOPrecompileBatch::BatchTime' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.AsyncDownloadImage
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_AsyncDownloadImage final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncTaskDownloadImage*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_AsyncDownloadImage) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_AsyncDownloadImage");
//static_assert(sizeof(GSE_EngineFuncLib_AsyncDownloadImage) == 0x000018, "Wrong size on GSE_EngineFuncLib_AsyncDownloadImage");
//static_assert(offsetof(GSE_EngineFuncLib_AsyncDownloadImage, URL) == 0x000000, "Member 'GSE_EngineFuncLib_AsyncDownloadImage::URL' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_AsyncDownloadImage, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_AsyncDownloadImage::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.BindAudioUtilAndBox
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_BindAudioUtilAndBox final
{
public:
	class AActor*                                 AudioUtilActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            AudioBox;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_BindAudioUtilAndBox) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_BindAudioUtilAndBox");
//static_assert(sizeof(GSE_EngineFuncLib_BindAudioUtilAndBox) == 0x000018, "Wrong size on GSE_EngineFuncLib_BindAudioUtilAndBox");
//static_assert(offsetof(GSE_EngineFuncLib_BindAudioUtilAndBox, AudioUtilActor) == 0x000000, "Member 'GSE_EngineFuncLib_BindAudioUtilAndBox::AudioUtilActor' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_BindAudioUtilAndBox, AudioBox) == 0x000008, "Member 'GSE_EngineFuncLib_BindAudioUtilAndBox::AudioBox' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_BindAudioUtilAndBox, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_BindAudioUtilAndBox::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.BinkMediaPlayerGoTo
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_BinkMediaPlayerGoTo final
{
public:
	class UBinkMediaPlayer*                       MediaPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetFrame;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_BinkMediaPlayerGoTo) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_BinkMediaPlayerGoTo");
//static_assert(sizeof(GSE_EngineFuncLib_BinkMediaPlayerGoTo) == 0x000010, "Wrong size on GSE_EngineFuncLib_BinkMediaPlayerGoTo");
//static_assert(offsetof(GSE_EngineFuncLib_BinkMediaPlayerGoTo, MediaPlayer) == 0x000000, "Member 'GSE_EngineFuncLib_BinkMediaPlayerGoTo::MediaPlayer' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_BinkMediaPlayerGoTo, TargetFrame) == 0x000008, "Member 'GSE_EngineFuncLib_BinkMediaPlayerGoTo::TargetFrame' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_BinkMediaPlayerGoTo, ReturnValue) == 0x00000C, "Member 'GSE_EngineFuncLib_BinkMediaPlayerGoTo::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.BinkMediaPlayerGoToWithProcMs
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_BinkMediaPlayerGoToWithProcMs final
{
public:
	class UBinkMediaPlayer*                       MediaPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetFrame;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProcMS;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_BinkMediaPlayerGoToWithProcMs) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_BinkMediaPlayerGoToWithProcMs");
//static_assert(sizeof(GSE_EngineFuncLib_BinkMediaPlayerGoToWithProcMs) == 0x000018, "Wrong size on GSE_EngineFuncLib_BinkMediaPlayerGoToWithProcMs");
//static_assert(offsetof(GSE_EngineFuncLib_BinkMediaPlayerGoToWithProcMs, MediaPlayer) == 0x000000, "Member 'GSE_EngineFuncLib_BinkMediaPlayerGoToWithProcMs::MediaPlayer' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_BinkMediaPlayerGoToWithProcMs, TargetFrame) == 0x000008, "Member 'GSE_EngineFuncLib_BinkMediaPlayerGoToWithProcMs::TargetFrame' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_BinkMediaPlayerGoToWithProcMs, ProcMS) == 0x00000C, "Member 'GSE_EngineFuncLib_BinkMediaPlayerGoToWithProcMs::ProcMS' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_BinkMediaPlayerGoToWithProcMs, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_BinkMediaPlayerGoToWithProcMs::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.BinkMediaPlayerTimeSeek
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_BinkMediaPlayerTimeSeek final
{
public:
	class UBinkMediaPlayer*                       MediaPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Time;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_BinkMediaPlayerTimeSeek) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_BinkMediaPlayerTimeSeek");
//static_assert(sizeof(GSE_EngineFuncLib_BinkMediaPlayerTimeSeek) == 0x000010, "Wrong size on GSE_EngineFuncLib_BinkMediaPlayerTimeSeek");
//static_assert(offsetof(GSE_EngineFuncLib_BinkMediaPlayerTimeSeek, MediaPlayer) == 0x000000, "Member 'GSE_EngineFuncLib_BinkMediaPlayerTimeSeek::MediaPlayer' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_BinkMediaPlayerTimeSeek, Time) == 0x000008, "Member 'GSE_EngineFuncLib_BinkMediaPlayerTimeSeek::Time' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.BlockTillLevelStreamingCompleted
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_BlockTillLevelStreamingCompleted final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_BlockTillLevelStreamingCompleted) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_BlockTillLevelStreamingCompleted");
//static_assert(sizeof(GSE_EngineFuncLib_BlockTillLevelStreamingCompleted) == 0x000008, "Wrong size on GSE_EngineFuncLib_BlockTillLevelStreamingCompleted");
//static_assert(offsetof(GSE_EngineFuncLib_BlockTillLevelStreamingCompleted, WorldContextObject) == 0x000000, "Member 'GSE_EngineFuncLib_BlockTillLevelStreamingCompleted::WorldContextObject' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.BlockTillSuspendedLevelsCompleted
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_BlockTillSuspendedLevelsCompleted final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_BlockTillSuspendedLevelsCompleted) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_BlockTillSuspendedLevelsCompleted");
//static_assert(sizeof(GSE_EngineFuncLib_BlockTillSuspendedLevelsCompleted) == 0x000008, "Wrong size on GSE_EngineFuncLib_BlockTillSuspendedLevelsCompleted");
//static_assert(offsetof(GSE_EngineFuncLib_BlockTillSuspendedLevelsCompleted, WorldContextObject) == 0x000000, "Member 'GSE_EngineFuncLib_BlockTillSuspendedLevelsCompleted::WorldContextObject' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.CaptureCurrentViewport
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_CaptureCurrentViewport final
{
public:
	bool                                          bCapture;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_CaptureCurrentViewport) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_CaptureCurrentViewport");
//static_assert(sizeof(GSE_EngineFuncLib_CaptureCurrentViewport) == 0x000001, "Wrong size on GSE_EngineFuncLib_CaptureCurrentViewport");
//static_assert(offsetof(GSE_EngineFuncLib_CaptureCurrentViewport, bCapture) == 0x000000, "Member 'GSE_EngineFuncLib_CaptureCurrentViewport::bCapture' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.ClientSeamlessTravel
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_ClientSeamlessTravel final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_ClientSeamlessTravel) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_ClientSeamlessTravel");
//static_assert(sizeof(GSE_EngineFuncLib_ClientSeamlessTravel) == 0x000018, "Wrong size on GSE_EngineFuncLib_ClientSeamlessTravel");
//static_assert(offsetof(GSE_EngineFuncLib_ClientSeamlessTravel, PC) == 0x000000, "Member 'GSE_EngineFuncLib_ClientSeamlessTravel::PC' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_ClientSeamlessTravel, URL) == 0x000008, "Member 'GSE_EngineFuncLib_ClientSeamlessTravel::URL' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.CloseNetConnection
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_CloseNetConnection final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_CloseNetConnection) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_CloseNetConnection");
//static_assert(sizeof(GSE_EngineFuncLib_CloseNetConnection) == 0x000008, "Wrong size on GSE_EngineFuncLib_CloseNetConnection");
//static_assert(offsetof(GSE_EngineFuncLib_CloseNetConnection, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_CloseNetConnection::WorldContext' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.ConsoleVarGetInt
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_ConsoleVarGetInt final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_ConsoleVarGetInt) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_ConsoleVarGetInt");
//static_assert(sizeof(GSE_EngineFuncLib_ConsoleVarGetInt) == 0x000018, "Wrong size on GSE_EngineFuncLib_ConsoleVarGetInt");
//static_assert(offsetof(GSE_EngineFuncLib_ConsoleVarGetInt, Name_0) == 0x000000, "Member 'GSE_EngineFuncLib_ConsoleVarGetInt::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_ConsoleVarGetInt, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_ConsoleVarGetInt::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.ConsoleVariableSetMouseCursor
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_ConsoleVariableSetMouseCursor final
{
public:
	bool                                          MouseCursor;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_ConsoleVariableSetMouseCursor) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_ConsoleVariableSetMouseCursor");
//static_assert(sizeof(GSE_EngineFuncLib_ConsoleVariableSetMouseCursor) == 0x000001, "Wrong size on GSE_EngineFuncLib_ConsoleVariableSetMouseCursor");
//static_assert(offsetof(GSE_EngineFuncLib_ConsoleVariableSetMouseCursor, MouseCursor) == 0x000000, "Member 'GSE_EngineFuncLib_ConsoleVariableSetMouseCursor::MouseCursor' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.CopyToClipBoard
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_CopyToClipBoard final
{
public:
	class FString                                 InStr;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_CopyToClipBoard) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_CopyToClipBoard");
//static_assert(sizeof(GSE_EngineFuncLib_CopyToClipBoard) == 0x000010, "Wrong size on GSE_EngineFuncLib_CopyToClipBoard");
//static_assert(offsetof(GSE_EngineFuncLib_CopyToClipBoard, InStr) == 0x000000, "Member 'GSE_EngineFuncLib_CopyToClipBoard::InStr' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.CreateAsset
// 0x0030 (0x0030 - 0x0000)
struct GSE_EngineFuncLib_CreateAsset final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 CreatedClass;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_CreateAsset) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_CreateAsset");
//static_assert(sizeof(GSE_EngineFuncLib_CreateAsset) == 0x000030, "Wrong size on GSE_EngineFuncLib_CreateAsset");
//static_assert(offsetof(GSE_EngineFuncLib_CreateAsset, Path) == 0x000000, "Member 'GSE_EngineFuncLib_CreateAsset::Path' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_CreateAsset, Name_0) == 0x000010, "Member 'GSE_EngineFuncLib_CreateAsset::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_CreateAsset, CreatedClass) == 0x000020, "Member 'GSE_EngineFuncLib_CreateAsset::CreatedClass' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_CreateAsset, ReturnValue) == 0x000028, "Member 'GSE_EngineFuncLib_CreateAsset::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.CreateDragDropOperation
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_CreateDragDropOperation final
{
public:
	TSubclassOf<class UDragDropOperation>         OperationClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDragDropOperation*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_CreateDragDropOperation) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_CreateDragDropOperation");
//static_assert(sizeof(GSE_EngineFuncLib_CreateDragDropOperation) == 0x000010, "Wrong size on GSE_EngineFuncLib_CreateDragDropOperation");
//static_assert(offsetof(GSE_EngineFuncLib_CreateDragDropOperation, OperationClass) == 0x000000, "Member 'GSE_EngineFuncLib_CreateDragDropOperation::OperationClass' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_CreateDragDropOperation, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_CreateDragDropOperation::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.CreateNamedNetDriver
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_CreateNamedNetDriver final
{
public:
	class UWorld*                                 InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NetDriverName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NetDriverDefinition;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_CreateNamedNetDriver) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_CreateNamedNetDriver");
//static_assert(sizeof(GSE_EngineFuncLib_CreateNamedNetDriver) == 0x000018, "Wrong size on GSE_EngineFuncLib_CreateNamedNetDriver");
//static_assert(offsetof(GSE_EngineFuncLib_CreateNamedNetDriver, InWorld) == 0x000000, "Member 'GSE_EngineFuncLib_CreateNamedNetDriver::InWorld' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_CreateNamedNetDriver, NetDriverName) == 0x000008, "Member 'GSE_EngineFuncLib_CreateNamedNetDriver::NetDriverName' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_CreateNamedNetDriver, NetDriverDefinition) == 0x000010, "Member 'GSE_EngineFuncLib_CreateNamedNetDriver::NetDriverDefinition' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.CreateReplicationDriver
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_CreateReplicationDriver final
{
public:
	class UNetDriver*                             NetDriver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 World;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReplicationDriver*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_CreateReplicationDriver) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_CreateReplicationDriver");
//static_assert(sizeof(GSE_EngineFuncLib_CreateReplicationDriver) == 0x000018, "Wrong size on GSE_EngineFuncLib_CreateReplicationDriver");
//static_assert(offsetof(GSE_EngineFuncLib_CreateReplicationDriver, NetDriver) == 0x000000, "Member 'GSE_EngineFuncLib_CreateReplicationDriver::NetDriver' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_CreateReplicationDriver, World) == 0x000008, "Member 'GSE_EngineFuncLib_CreateReplicationDriver::World' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_CreateReplicationDriver, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_CreateReplicationDriver::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.DestroyActor
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_DestroyActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_DestroyActor) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_DestroyActor");
//static_assert(sizeof(GSE_EngineFuncLib_DestroyActor) == 0x000008, "Wrong size on GSE_EngineFuncLib_DestroyActor");
//static_assert(offsetof(GSE_EngineFuncLib_DestroyActor, Actor) == 0x000000, "Member 'GSE_EngineFuncLib_DestroyActor::Actor' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.DestroyActorsWithSpecifiedKeyword
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_DestroyActorsWithSpecifiedKeyword final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InKeyword;                                         // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_DestroyActorsWithSpecifiedKeyword) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_DestroyActorsWithSpecifiedKeyword");
//static_assert(sizeof(GSE_EngineFuncLib_DestroyActorsWithSpecifiedKeyword) == 0x000018, "Wrong size on GSE_EngineFuncLib_DestroyActorsWithSpecifiedKeyword");
//static_assert(offsetof(GSE_EngineFuncLib_DestroyActorsWithSpecifiedKeyword, InWorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_DestroyActorsWithSpecifiedKeyword::InWorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DestroyActorsWithSpecifiedKeyword, InKeyword) == 0x000008, "Member 'GSE_EngineFuncLib_DestroyActorsWithSpecifiedKeyword::InKeyword' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.DetectDragIfPressed
// 0x0158 (0x0158 - 0x0000)
struct GSE_EngineFuncLib_DetectDragIfPressed final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UWidget*                                WidgetDetectingDrag;                               // 0x0090(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KeyName;                                           // 0x0098(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A0(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_DetectDragIfPressed) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_DetectDragIfPressed");
//static_assert(sizeof(GSE_EngineFuncLib_DetectDragIfPressed) == 0x000158, "Wrong size on GSE_EngineFuncLib_DetectDragIfPressed");
//static_assert(offsetof(GSE_EngineFuncLib_DetectDragIfPressed, PointerEvent) == 0x000000, "Member 'GSE_EngineFuncLib_DetectDragIfPressed::PointerEvent' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DetectDragIfPressed, WidgetDetectingDrag) == 0x000090, "Member 'GSE_EngineFuncLib_DetectDragIfPressed::WidgetDetectingDrag' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DetectDragIfPressed, KeyName) == 0x000098, "Member 'GSE_EngineFuncLib_DetectDragIfPressed::KeyName' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DetectDragIfPressed, ReturnValue) == 0x0000A0, "Member 'GSE_EngineFuncLib_DetectDragIfPressed::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.DisableDebugExecBindings
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_DisableDebugExecBindings final
{
public:
	class UObject*                                WorldCtx;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDisable;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_DisableDebugExecBindings) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_DisableDebugExecBindings");
//static_assert(sizeof(GSE_EngineFuncLib_DisableDebugExecBindings) == 0x000010, "Wrong size on GSE_EngineFuncLib_DisableDebugExecBindings");
//static_assert(offsetof(GSE_EngineFuncLib_DisableDebugExecBindings, WorldCtx) == 0x000000, "Member 'GSE_EngineFuncLib_DisableDebugExecBindings::WorldCtx' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DisableDebugExecBindings, IsDisable) == 0x000008, "Member 'GSE_EngineFuncLib_DisableDebugExecBindings::IsDisable' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.DrawDebugCircleArc
// 0x0060 (0x0060 - 0x0000)
struct GSE_EngineFuncLib_DrawDebugCircleArc final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleWidth;                                        // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSegments;                                       // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LineColor;                                         // 0x0048(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_DrawDebugCircleArc) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_DrawDebugCircleArc");
//static_assert(sizeof(GSE_EngineFuncLib_DrawDebugCircleArc) == 0x000060, "Wrong size on GSE_EngineFuncLib_DrawDebugCircleArc");
//static_assert(offsetof(GSE_EngineFuncLib_DrawDebugCircleArc, WorldContextObject) == 0x000000, "Member 'GSE_EngineFuncLib_DrawDebugCircleArc::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DrawDebugCircleArc, Center) == 0x000008, "Member 'GSE_EngineFuncLib_DrawDebugCircleArc::Center' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DrawDebugCircleArc, Radius) == 0x000020, "Member 'GSE_EngineFuncLib_DrawDebugCircleArc::Radius' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DrawDebugCircleArc, Direction) == 0x000028, "Member 'GSE_EngineFuncLib_DrawDebugCircleArc::Direction' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DrawDebugCircleArc, AngleWidth) == 0x000040, "Member 'GSE_EngineFuncLib_DrawDebugCircleArc::AngleWidth' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DrawDebugCircleArc, NumSegments) == 0x000044, "Member 'GSE_EngineFuncLib_DrawDebugCircleArc::NumSegments' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DrawDebugCircleArc, LineColor) == 0x000048, "Member 'GSE_EngineFuncLib_DrawDebugCircleArc::LineColor' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DrawDebugCircleArc, Duration) == 0x000058, "Member 'GSE_EngineFuncLib_DrawDebugCircleArc::Duration' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DrawDebugCircleArc, Thickness) == 0x00005C, "Member 'GSE_EngineFuncLib_DrawDebugCircleArc::Thickness' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.DuplicateAsset
// 0x0030 (0x0030 - 0x0000)
struct GSE_EngineFuncLib_DuplicateAsset final
{
public:
	class FString                                 AssetName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackagePath;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OriginalObject;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_DuplicateAsset) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_DuplicateAsset");
//static_assert(sizeof(GSE_EngineFuncLib_DuplicateAsset) == 0x000030, "Wrong size on GSE_EngineFuncLib_DuplicateAsset");
//static_assert(offsetof(GSE_EngineFuncLib_DuplicateAsset, AssetName) == 0x000000, "Member 'GSE_EngineFuncLib_DuplicateAsset::AssetName' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DuplicateAsset, PackagePath) == 0x000010, "Member 'GSE_EngineFuncLib_DuplicateAsset::PackagePath' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DuplicateAsset, OriginalObject) == 0x000020, "Member 'GSE_EngineFuncLib_DuplicateAsset::OriginalObject' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_DuplicateAsset, ReturnValue) == 0x000028, "Member 'GSE_EngineFuncLib_DuplicateAsset::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.EnableForceStreamdOutLevelGCCheck
// 0x0002 (0x0002 - 0x0000)
struct GSE_EngineFuncLib_EnableForceStreamdOutLevelGCCheck final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreEditor;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_EnableForceStreamdOutLevelGCCheck) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_EnableForceStreamdOutLevelGCCheck");
//static_assert(sizeof(GSE_EngineFuncLib_EnableForceStreamdOutLevelGCCheck) == 0x000002, "Wrong size on GSE_EngineFuncLib_EnableForceStreamdOutLevelGCCheck");
//static_assert(offsetof(GSE_EngineFuncLib_EnableForceStreamdOutLevelGCCheck, Enable) == 0x000000, "Member 'GSE_EngineFuncLib_EnableForceStreamdOutLevelGCCheck::Enable' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_EnableForceStreamdOutLevelGCCheck, IgnoreEditor) == 0x000001, "Member 'GSE_EngineFuncLib_EnableForceStreamdOutLevelGCCheck::IgnoreEditor' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.EngineGC
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_EngineGC final
{
public:
	bool                                          bFullPurge;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_EngineGC) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_EngineGC");
//static_assert(sizeof(GSE_EngineFuncLib_EngineGC) == 0x000001, "Wrong size on GSE_EngineFuncLib_EngineGC");
//static_assert(offsetof(GSE_EngineFuncLib_EngineGC, bFullPurge) == 0x000000, "Member 'GSE_EngineFuncLib_EngineGC::bFullPurge' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.ExecCmdOutGLog
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_ExecCmdOutGLog final
{
public:
	class FString                                 Cmd;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldCtx;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_ExecCmdOutGLog) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_ExecCmdOutGLog");
//static_assert(sizeof(GSE_EngineFuncLib_ExecCmdOutGLog) == 0x000018, "Wrong size on GSE_EngineFuncLib_ExecCmdOutGLog");
//static_assert(offsetof(GSE_EngineFuncLib_ExecCmdOutGLog, Cmd) == 0x000000, "Member 'GSE_EngineFuncLib_ExecCmdOutGLog::Cmd' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_ExecCmdOutGLog, WorldCtx) == 0x000010, "Member 'GSE_EngineFuncLib_ExecCmdOutGLog::WorldCtx' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.FindAndPrintStaleReferencesToObject
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_FindAndPrintStaleReferencesToObject final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_FindAndPrintStaleReferencesToObject) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_FindAndPrintStaleReferencesToObject");
//static_assert(sizeof(GSE_EngineFuncLib_FindAndPrintStaleReferencesToObject) == 0x000018, "Wrong size on GSE_EngineFuncLib_FindAndPrintStaleReferencesToObject");
//static_assert(offsetof(GSE_EngineFuncLib_FindAndPrintStaleReferencesToObject, Obj) == 0x000000, "Member 'GSE_EngineFuncLib_FindAndPrintStaleReferencesToObject::Obj' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_FindAndPrintStaleReferencesToObject, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_FindAndPrintStaleReferencesToObject::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.FindAndPrintStaleRefsByObjectPath
// 0x0020 (0x0020 - 0x0000)
struct GSE_EngineFuncLib_FindAndPrintStaleRefsByObjectPath final
{
public:
	class FString                                 InObjectPath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_FindAndPrintStaleRefsByObjectPath) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_FindAndPrintStaleRefsByObjectPath");
//static_assert(sizeof(GSE_EngineFuncLib_FindAndPrintStaleRefsByObjectPath) == 0x000020, "Wrong size on GSE_EngineFuncLib_FindAndPrintStaleRefsByObjectPath");
//static_assert(offsetof(GSE_EngineFuncLib_FindAndPrintStaleRefsByObjectPath, InObjectPath) == 0x000000, "Member 'GSE_EngineFuncLib_FindAndPrintStaleRefsByObjectPath::InObjectPath' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_FindAndPrintStaleRefsByObjectPath, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_FindAndPrintStaleRefsByObjectPath::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.FindNamedNetDriver
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_FindNamedNetDriver final
{
public:
	const class UWorld*                           InWorld;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NetDriverName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetDriver*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_FindNamedNetDriver) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_FindNamedNetDriver");
//static_assert(sizeof(GSE_EngineFuncLib_FindNamedNetDriver) == 0x000018, "Wrong size on GSE_EngineFuncLib_FindNamedNetDriver");
//static_assert(offsetof(GSE_EngineFuncLib_FindNamedNetDriver, InWorld) == 0x000000, "Member 'GSE_EngineFuncLib_FindNamedNetDriver::InWorld' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_FindNamedNetDriver, NetDriverName) == 0x000008, "Member 'GSE_EngineFuncLib_FindNamedNetDriver::NetDriverName' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_FindNamedNetDriver, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_FindNamedNetDriver::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.FindPathSync
// 0x0030 (0x0030 - 0x0000)
struct GSE_EngineFuncLib_FindPathSync final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_FindPathSync) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_FindPathSync");
//static_assert(sizeof(GSE_EngineFuncLib_FindPathSync) == 0x000030, "Wrong size on GSE_EngineFuncLib_FindPathSync");
//static_assert(offsetof(GSE_EngineFuncLib_FindPathSync, Controller) == 0x000000, "Member 'GSE_EngineFuncLib_FindPathSync::Controller' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_FindPathSync, TargetLocation) == 0x000008, "Member 'GSE_EngineFuncLib_FindPathSync::TargetLocation' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_FindPathSync, ReturnValue) == 0x000020, "Member 'GSE_EngineFuncLib_FindPathSync::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.FlushMainAudioDevice
// 0x0004 (0x0004 - 0x0000)
struct GSE_EngineFuncLib_FlushMainAudioDevice final
{
public:
	int32                                         DeviceID;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_FlushMainAudioDevice) == 0x000004, "Wrong alignment on GSE_EngineFuncLib_FlushMainAudioDevice");
//static_assert(sizeof(GSE_EngineFuncLib_FlushMainAudioDevice) == 0x000004, "Wrong size on GSE_EngineFuncLib_FlushMainAudioDevice");
//static_assert(offsetof(GSE_EngineFuncLib_FlushMainAudioDevice, DeviceID) == 0x000000, "Member 'GSE_EngineFuncLib_FlushMainAudioDevice::DeviceID' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GameInstanceIsDedicatedServer
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GameInstanceIsDedicatedServer final
{
public:
	const class UGameInstance*                    GameInst;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_GameInstanceIsDedicatedServer) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GameInstanceIsDedicatedServer");
//static_assert(sizeof(GSE_EngineFuncLib_GameInstanceIsDedicatedServer) == 0x000010, "Wrong size on GSE_EngineFuncLib_GameInstanceIsDedicatedServer");
//static_assert(offsetof(GSE_EngineFuncLib_GameInstanceIsDedicatedServer, GameInst) == 0x000000, "Member 'GSE_EngineFuncLib_GameInstanceIsDedicatedServer::GameInst' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GameInstanceIsDedicatedServer, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GameInstanceIsDedicatedServer::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetActionMappings
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_GetActionMappings final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInputActionKeyMapping>         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetActionMappings) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetActionMappings");
//static_assert(sizeof(GSE_EngineFuncLib_GetActionMappings) == 0x000018, "Wrong size on GSE_EngineFuncLib_GetActionMappings");
//static_assert(offsetof(GSE_EngineFuncLib_GetActionMappings, PlayerController) == 0x000000, "Member 'GSE_EngineFuncLib_GetActionMappings::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetActionMappings, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetActionMappings::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetActualQualityLevel
// 0x0002 (0x0002 - 0x0000)
struct GSE_EngineFuncLib_GetActualQualityLevel final
{
public:
	bool                                          bLogInfo;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGSQualityLevel                               ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetActualQualityLevel) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_GetActualQualityLevel");
//static_assert(sizeof(GSE_EngineFuncLib_GetActualQualityLevel) == 0x000002, "Wrong size on GSE_EngineFuncLib_GetActualQualityLevel");
//static_assert(offsetof(GSE_EngineFuncLib_GetActualQualityLevel, bLogInfo) == 0x000000, "Member 'GSE_EngineFuncLib_GetActualQualityLevel::bLogInfo' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetActualQualityLevel, ReturnValue) == 0x000001, "Member 'GSE_EngineFuncLib_GetActualQualityLevel::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetAnalogInputKey
// 0x0058 (0x0058 - 0x0000)
struct GSE_EngineFuncLib_GetAnalogInputKey final
{
public:
	struct FAnalogInputEvent                      AnalogInputEvent;                                  // 0x0000(0x0040)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0040(0x0018)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetAnalogInputKey) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetAnalogInputKey");
//static_assert(sizeof(GSE_EngineFuncLib_GetAnalogInputKey) == 0x000058, "Wrong size on GSE_EngineFuncLib_GetAnalogInputKey");
//static_assert(offsetof(GSE_EngineFuncLib_GetAnalogInputKey, AnalogInputEvent) == 0x000000, "Member 'GSE_EngineFuncLib_GetAnalogInputKey::AnalogInputEvent' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetAnalogInputKey, ReturnValue) == 0x000040, "Member 'GSE_EngineFuncLib_GetAnalogInputKey::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetAnalogValue
// 0x0048 (0x0048 - 0x0000)
struct GSE_EngineFuncLib_GetAnalogValue final
{
public:
	struct FAnalogInputEvent                      AnalogInputEvent;                                  // 0x0000(0x0040)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_GetAnalogValue) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetAnalogValue");
//static_assert(sizeof(GSE_EngineFuncLib_GetAnalogValue) == 0x000048, "Wrong size on GSE_EngineFuncLib_GetAnalogValue");
//static_assert(offsetof(GSE_EngineFuncLib_GetAnalogValue, AnalogInputEvent) == 0x000000, "Member 'GSE_EngineFuncLib_GetAnalogValue::AnalogInputEvent' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetAnalogValue, ReturnValue) == 0x000040, "Member 'GSE_EngineFuncLib_GetAnalogValue::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetAsyncLoadPercentage
// 0x000C (0x000C - 0x0000)
struct GSE_EngineFuncLib_GetAsyncLoadPercentage final
{
public:
	class FName                                   PackageName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetAsyncLoadPercentage) == 0x000004, "Wrong alignment on GSE_EngineFuncLib_GetAsyncLoadPercentage");
//static_assert(sizeof(GSE_EngineFuncLib_GetAsyncLoadPercentage) == 0x00000C, "Wrong size on GSE_EngineFuncLib_GetAsyncLoadPercentage");
//static_assert(offsetof(GSE_EngineFuncLib_GetAsyncLoadPercentage, PackageName) == 0x000000, "Member 'GSE_EngineFuncLib_GetAsyncLoadPercentage::PackageName' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetAsyncLoadPercentage, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetAsyncLoadPercentage::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetAudioInfoOfAudioVisualize
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_GetAudioInfoOfAudioVisualize final
{
public:
	class AActor*                                 AudioUtilActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioDuration;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetAudioInfoOfAudioVisualize) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetAudioInfoOfAudioVisualize");
//static_assert(sizeof(GSE_EngineFuncLib_GetAudioInfoOfAudioVisualize) == 0x000018, "Wrong size on GSE_EngineFuncLib_GetAudioInfoOfAudioVisualize");
//static_assert(offsetof(GSE_EngineFuncLib_GetAudioInfoOfAudioVisualize, AudioUtilActor) == 0x000000, "Member 'GSE_EngineFuncLib_GetAudioInfoOfAudioVisualize::AudioUtilActor' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetAudioInfoOfAudioVisualize, AudioDuration) == 0x000008, "Member 'GSE_EngineFuncLib_GetAudioInfoOfAudioVisualize::AudioDuration' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetAudioInfoOfAudioVisualize, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_GetAudioInfoOfAudioVisualize::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetAvailablePhysical
// 0x0004 (0x0004 - 0x0000)
struct GSE_EngineFuncLib_GetAvailablePhysical final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetAvailablePhysical) == 0x000004, "Wrong alignment on GSE_EngineFuncLib_GetAvailablePhysical");
//static_assert(sizeof(GSE_EngineFuncLib_GetAvailablePhysical) == 0x000004, "Wrong size on GSE_EngineFuncLib_GetAvailablePhysical");
//static_assert(offsetof(GSE_EngineFuncLib_GetAvailablePhysical, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetAvailablePhysical::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetAxisMappings
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_GetAxisMappings final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInputAxisKeyMapping>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetAxisMappings) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetAxisMappings");
//static_assert(sizeof(GSE_EngineFuncLib_GetAxisMappings) == 0x000018, "Wrong size on GSE_EngineFuncLib_GetAxisMappings");
//static_assert(offsetof(GSE_EngineFuncLib_GetAxisMappings, PlayerController) == 0x000000, "Member 'GSE_EngineFuncLib_GetAxisMappings::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetAxisMappings, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetAxisMappings::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetBinkMediaPlayerCurFrame
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetBinkMediaPlayerCurFrame final
{
public:
	const class UBinkMediaPlayer*                 MediaPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_GetBinkMediaPlayerCurFrame) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetBinkMediaPlayerCurFrame");
//static_assert(sizeof(GSE_EngineFuncLib_GetBinkMediaPlayerCurFrame) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetBinkMediaPlayerCurFrame");
//static_assert(offsetof(GSE_EngineFuncLib_GetBinkMediaPlayerCurFrame, MediaPlayer) == 0x000000, "Member 'GSE_EngineFuncLib_GetBinkMediaPlayerCurFrame::MediaPlayer' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetBinkMediaPlayerCurFrame, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetBinkMediaPlayerCurFrame::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetBinkMediaPlayerDuartion
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetBinkMediaPlayerDuartion final
{
public:
	const class UBinkMediaPlayer*                 MediaPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetBinkMediaPlayerDuartion) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetBinkMediaPlayerDuartion");
//static_assert(sizeof(GSE_EngineFuncLib_GetBinkMediaPlayerDuartion) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetBinkMediaPlayerDuartion");
//static_assert(offsetof(GSE_EngineFuncLib_GetBinkMediaPlayerDuartion, MediaPlayer) == 0x000000, "Member 'GSE_EngineFuncLib_GetBinkMediaPlayerDuartion::MediaPlayer' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetBinkMediaPlayerDuartion, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetBinkMediaPlayerDuartion::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetBinkMediaPlayerFrameRate
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetBinkMediaPlayerFrameRate final
{
public:
	const class UBinkMediaPlayer*                 MediaPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_GetBinkMediaPlayerFrameRate) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetBinkMediaPlayerFrameRate");
//static_assert(sizeof(GSE_EngineFuncLib_GetBinkMediaPlayerFrameRate) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetBinkMediaPlayerFrameRate");
//static_assert(offsetof(GSE_EngineFuncLib_GetBinkMediaPlayerFrameRate, MediaPlayer) == 0x000000, "Member 'GSE_EngineFuncLib_GetBinkMediaPlayerFrameRate::MediaPlayer' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetBinkMediaPlayerFrameRate, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetBinkMediaPlayerFrameRate::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetBinkMediaPlayerTime
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetBinkMediaPlayerTime final
{
public:
	const class UBinkMediaPlayer*                 MediaPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetBinkMediaPlayerTime) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetBinkMediaPlayerTime");
//static_assert(sizeof(GSE_EngineFuncLib_GetBinkMediaPlayerTime) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetBinkMediaPlayerTime");
//static_assert(offsetof(GSE_EngineFuncLib_GetBinkMediaPlayerTime, MediaPlayer) == 0x000000, "Member 'GSE_EngineFuncLib_GetBinkMediaPlayerTime::MediaPlayer' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetBinkMediaPlayerTime, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetBinkMediaPlayerTime::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetBinkMediaPlayerTotalFrames
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetBinkMediaPlayerTotalFrames final
{
public:
	const class UBinkMediaPlayer*                 MediaPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_GetBinkMediaPlayerTotalFrames) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetBinkMediaPlayerTotalFrames");
//static_assert(sizeof(GSE_EngineFuncLib_GetBinkMediaPlayerTotalFrames) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetBinkMediaPlayerTotalFrames");
//static_assert(offsetof(GSE_EngineFuncLib_GetBinkMediaPlayerTotalFrames, MediaPlayer) == 0x000000, "Member 'GSE_EngineFuncLib_GetBinkMediaPlayerTotalFrames::MediaPlayer' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetBinkMediaPlayerTotalFrames, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetBinkMediaPlayerTotalFrames::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetChildActors
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_GetChildActors final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetChildActors) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetChildActors");
//static_assert(sizeof(GSE_EngineFuncLib_GetChildActors) == 0x000018, "Wrong size on GSE_EngineFuncLib_GetChildActors");
//static_assert(offsetof(GSE_EngineFuncLib_GetChildActors, Actor) == 0x000000, "Member 'GSE_EngineFuncLib_GetChildActors::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetChildActors, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetChildActors::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetCurrentRhiName
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetCurrentRhiName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetCurrentRhiName) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetCurrentRhiName");
//static_assert(sizeof(GSE_EngineFuncLib_GetCurrentRhiName) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetCurrentRhiName");
//static_assert(offsetof(GSE_EngineFuncLib_GetCurrentRhiName, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetCurrentRhiName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetDefaultLanguageCS
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetDefaultLanguageCS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetDefaultLanguageCS) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetDefaultLanguageCS");
//static_assert(sizeof(GSE_EngineFuncLib_GetDefaultLanguageCS) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetDefaultLanguageCS");
//static_assert(offsetof(GSE_EngineFuncLib_GetDefaultLanguageCS, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetDefaultLanguageCS::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetDeviceId
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetDeviceId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetDeviceId) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetDeviceId");
//static_assert(sizeof(GSE_EngineFuncLib_GetDeviceId) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetDeviceId");
//static_assert(offsetof(GSE_EngineFuncLib_GetDeviceId, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetDeviceId::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetDeviceInfo
// 0x0028 (0x0028 - 0x0000)
struct GSE_EngineFuncLib_GetDeviceInfo final
{
public:
	class FString                                 Cpu;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Gpu;                                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MemSize;                                           // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_GetDeviceInfo) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetDeviceInfo");
//static_assert(sizeof(GSE_EngineFuncLib_GetDeviceInfo) == 0x000028, "Wrong size on GSE_EngineFuncLib_GetDeviceInfo");
//static_assert(offsetof(GSE_EngineFuncLib_GetDeviceInfo, Cpu) == 0x000000, "Member 'GSE_EngineFuncLib_GetDeviceInfo::Cpu' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetDeviceInfo, Gpu) == 0x000010, "Member 'GSE_EngineFuncLib_GetDeviceInfo::Gpu' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetDeviceInfo, MemSize) == 0x000020, "Member 'GSE_EngineFuncLib_GetDeviceInfo::MemSize' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetDisplayGamma
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetDisplayGamma final
{
public:
	const class UObject*                          WorldCtx;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_GetDisplayGamma) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetDisplayGamma");
//static_assert(sizeof(GSE_EngineFuncLib_GetDisplayGamma) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetDisplayGamma");
//static_assert(offsetof(GSE_EngineFuncLib_GetDisplayGamma, WorldCtx) == 0x000000, "Member 'GSE_EngineFuncLib_GetDisplayGamma::WorldCtx' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetDisplayGamma, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetDisplayGamma::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_GetDisplayName final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetDisplayName) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetDisplayName");
//static_assert(sizeof(GSE_EngineFuncLib_GetDisplayName) == 0x000018, "Wrong size on GSE_EngineFuncLib_GetDisplayName");
//static_assert(offsetof(GSE_EngineFuncLib_GetDisplayName, Object) == 0x000000, "Member 'GSE_EngineFuncLib_GetDisplayName::Object' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetDisplayName, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetDisplayName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetEngineMinorVersion
// 0x0004 (0x0004 - 0x0000)
struct GSE_EngineFuncLib_GetEngineMinorVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetEngineMinorVersion) == 0x000004, "Wrong alignment on GSE_EngineFuncLib_GetEngineMinorVersion");
//static_assert(sizeof(GSE_EngineFuncLib_GetEngineMinorVersion) == 0x000004, "Wrong size on GSE_EngineFuncLib_GetEngineMinorVersion");
//static_assert(offsetof(GSE_EngineFuncLib_GetEngineMinorVersion, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetEngineMinorVersion::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetFirstLocalPlayerController
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetFirstLocalPlayerController final
{
public:
	class UObject*                                WorldCtx;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetFirstLocalPlayerController) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetFirstLocalPlayerController");
//static_assert(sizeof(GSE_EngineFuncLib_GetFirstLocalPlayerController) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetFirstLocalPlayerController");
//static_assert(offsetof(GSE_EngineFuncLib_GetFirstLocalPlayerController, WorldCtx) == 0x000000, "Member 'GSE_EngineFuncLib_GetFirstLocalPlayerController::WorldCtx' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetFirstLocalPlayerController, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetFirstLocalPlayerController::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetGFrameCounter
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_GetGFrameCounter final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetGFrameCounter) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetGFrameCounter");
//static_assert(sizeof(GSE_EngineFuncLib_GetGFrameCounter) == 0x000008, "Wrong size on GSE_EngineFuncLib_GetGFrameCounter");
//static_assert(offsetof(GSE_EngineFuncLib_GetGFrameCounter, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetGFrameCounter::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetInputDeadZone
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_GetInputDeadZone final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AxisName;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_GetInputDeadZone) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetInputDeadZone");
//static_assert(sizeof(GSE_EngineFuncLib_GetInputDeadZone) == 0x000018, "Wrong size on GSE_EngineFuncLib_GetInputDeadZone");
//static_assert(offsetof(GSE_EngineFuncLib_GetInputDeadZone, PlayerController) == 0x000000, "Member 'GSE_EngineFuncLib_GetInputDeadZone::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetInputDeadZone, AxisName) == 0x000008, "Member 'GSE_EngineFuncLib_GetInputDeadZone::AxisName' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetInputDeadZone, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_GetInputDeadZone::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetInputKey
// 0x0050 (0x0050 - 0x0000)
struct GSE_EngineFuncLib_GetInputKey final
{
public:
	struct FKeyEvent                              KeyEvent;                                          // 0x0000(0x0038)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0038(0x0018)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetInputKey) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetInputKey");
//static_assert(sizeof(GSE_EngineFuncLib_GetInputKey) == 0x000050, "Wrong size on GSE_EngineFuncLib_GetInputKey");
//static_assert(offsetof(GSE_EngineFuncLib_GetInputKey, KeyEvent) == 0x000000, "Member 'GSE_EngineFuncLib_GetInputKey::KeyEvent' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetInputKey, ReturnValue) == 0x000038, "Member 'GSE_EngineFuncLib_GetInputKey::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetLaunchValue
// 0x0020 (0x0020 - 0x0000)
struct GSE_EngineFuncLib_GetLaunchValue final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetLaunchValue) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetLaunchValue");
//static_assert(sizeof(GSE_EngineFuncLib_GetLaunchValue) == 0x000020, "Wrong size on GSE_EngineFuncLib_GetLaunchValue");
//static_assert(offsetof(GSE_EngineFuncLib_GetLaunchValue, Option) == 0x000000, "Member 'GSE_EngineFuncLib_GetLaunchValue::Option' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetLaunchValue, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_GetLaunchValue::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetLocalPlayerCameraManager
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetLocalPlayerCameraManager final
{
public:
	class UObject*                                WorldCtx;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCameraManager*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetLocalPlayerCameraManager) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetLocalPlayerCameraManager");
//static_assert(sizeof(GSE_EngineFuncLib_GetLocalPlayerCameraManager) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetLocalPlayerCameraManager");
//static_assert(offsetof(GSE_EngineFuncLib_GetLocalPlayerCameraManager, WorldCtx) == 0x000000, "Member 'GSE_EngineFuncLib_GetLocalPlayerCameraManager::WorldCtx' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetLocalPlayerCameraManager, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetLocalPlayerCameraManager::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetLoginId
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetLoginId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetLoginId) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetLoginId");
//static_assert(sizeof(GSE_EngineFuncLib_GetLoginId) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetLoginId");
//static_assert(offsetof(GSE_EngineFuncLib_GetLoginId, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetLoginId::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetMacAddress
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetMacAddress final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetMacAddress) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetMacAddress");
//static_assert(sizeof(GSE_EngineFuncLib_GetMacAddress) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetMacAddress");
//static_assert(offsetof(GSE_EngineFuncLib_GetMacAddress, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetMacAddress::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetMediaPlayerDuartion
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetMediaPlayerDuartion final
{
public:
	const class UMediaPlayer*                     MediaPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetMediaPlayerDuartion) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetMediaPlayerDuartion");
//static_assert(sizeof(GSE_EngineFuncLib_GetMediaPlayerDuartion) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetMediaPlayerDuartion");
//static_assert(offsetof(GSE_EngineFuncLib_GetMediaPlayerDuartion, MediaPlayer) == 0x000000, "Member 'GSE_EngineFuncLib_GetMediaPlayerDuartion::MediaPlayer' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetMediaPlayerDuartion, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetMediaPlayerDuartion::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetMediaPlayerTime
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetMediaPlayerTime final
{
public:
	const class UMediaPlayer*                     MediaPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetMediaPlayerTime) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetMediaPlayerTime");
//static_assert(sizeof(GSE_EngineFuncLib_GetMediaPlayerTime) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetMediaPlayerTime");
//static_assert(offsetof(GSE_EngineFuncLib_GetMediaPlayerTime, MediaPlayer) == 0x000000, "Member 'GSE_EngineFuncLib_GetMediaPlayerTime::MediaPlayer' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetMediaPlayerTime, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetMediaPlayerTime::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetPawnAutoPossessConfig
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetPawnAutoPossessConfig final
{
public:
	class APawn*                                  PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_GetPawnAutoPossessConfig) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetPawnAutoPossessConfig");
//static_assert(sizeof(GSE_EngineFuncLib_GetPawnAutoPossessConfig) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetPawnAutoPossessConfig");
//static_assert(offsetof(GSE_EngineFuncLib_GetPawnAutoPossessConfig, PC) == 0x000000, "Member 'GSE_EngineFuncLib_GetPawnAutoPossessConfig::PC' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetPawnAutoPossessConfig, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetPawnAutoPossessConfig::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetPlatformTime
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_GetPlatformTime final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetPlatformTime) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetPlatformTime");
//static_assert(sizeof(GSE_EngineFuncLib_GetPlatformTime) == 0x000008, "Wrong size on GSE_EngineFuncLib_GetPlatformTime");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlatformTime, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetPlatformTime::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetPlayerViewProjectionMatrix
// 0x0090 (0x0090 - 0x0000)
struct GSE_EngineFuncLib_GetPlayerViewProjectionMatrix final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0010(0x0080)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetPlayerViewProjectionMatrix) == 0x000010, "Wrong alignment on GSE_EngineFuncLib_GetPlayerViewProjectionMatrix");
//static_assert(sizeof(GSE_EngineFuncLib_GetPlayerViewProjectionMatrix) == 0x000090, "Wrong size on GSE_EngineFuncLib_GetPlayerViewProjectionMatrix");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlayerViewProjectionMatrix, Player) == 0x000000, "Member 'GSE_EngineFuncLib_GetPlayerViewProjectionMatrix::Player' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlayerViewProjectionMatrix, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_GetPlayerViewProjectionMatrix::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetPlayerViewProjectionMatrixInv
// 0x0090 (0x0090 - 0x0000)
struct GSE_EngineFuncLib_GetPlayerViewProjectionMatrixInv final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0010(0x0080)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetPlayerViewProjectionMatrixInv) == 0x000010, "Wrong alignment on GSE_EngineFuncLib_GetPlayerViewProjectionMatrixInv");
//static_assert(sizeof(GSE_EngineFuncLib_GetPlayerViewProjectionMatrixInv) == 0x000090, "Wrong size on GSE_EngineFuncLib_GetPlayerViewProjectionMatrixInv");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlayerViewProjectionMatrixInv, Player) == 0x000000, "Member 'GSE_EngineFuncLib_GetPlayerViewProjectionMatrixInv::Player' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlayerViewProjectionMatrixInv, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_GetPlayerViewProjectionMatrixInv::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetPlayerViewRect
// 0x0048 (0x0048 - 0x0000)
struct GSE_EngineFuncLib_GetPlayerViewRect final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutConstrainedViewRectMin;                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutConstrainedViewRectMax;                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutViewRectMin;                                    // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutViewRectMax;                                    // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetPlayerViewRect) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetPlayerViewRect");
//static_assert(sizeof(GSE_EngineFuncLib_GetPlayerViewRect) == 0x000048, "Wrong size on GSE_EngineFuncLib_GetPlayerViewRect");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlayerViewRect, Player) == 0x000000, "Member 'GSE_EngineFuncLib_GetPlayerViewRect::Player' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlayerViewRect, OutConstrainedViewRectMin) == 0x000008, "Member 'GSE_EngineFuncLib_GetPlayerViewRect::OutConstrainedViewRectMin' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlayerViewRect, OutConstrainedViewRectMax) == 0x000018, "Member 'GSE_EngineFuncLib_GetPlayerViewRect::OutConstrainedViewRectMax' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlayerViewRect, OutViewRectMin) == 0x000028, "Member 'GSE_EngineFuncLib_GetPlayerViewRect::OutViewRectMin' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlayerViewRect, OutViewRectMax) == 0x000038, "Member 'GSE_EngineFuncLib_GetPlayerViewRect::OutViewRectMax' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetPlayerViewRectMatrixInfo
// 0x00D0 (0x00D0 - 0x0000)
struct GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ViewProjectionMatrixInv;                           // 0x0010(0x0080)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              OutConstrainedViewRectMin;                         // 0x0090(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutConstrainedViewRectMax;                         // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutViewRectMin;                                    // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutViewRectMax;                                    // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo) == 0x000010, "Wrong alignment on GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo");
//static_assert(sizeof(GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo) == 0x0000D0, "Wrong size on GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo, Player) == 0x000000, "Member 'GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo::Player' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo, ViewProjectionMatrixInv) == 0x000010, "Member 'GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo::ViewProjectionMatrixInv' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo, OutConstrainedViewRectMin) == 0x000090, "Member 'GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo::OutConstrainedViewRectMin' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo, OutConstrainedViewRectMax) == 0x0000A0, "Member 'GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo::OutConstrainedViewRectMax' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo, OutViewRectMin) == 0x0000B0, "Member 'GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo::OutViewRectMin' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo, OutViewRectMax) == 0x0000C0, "Member 'GSE_EngineFuncLib_GetPlayerViewRectMatrixInfo::OutViewRectMax' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetProjectDir
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetProjectDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetProjectDir) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetProjectDir");
//static_assert(sizeof(GSE_EngineFuncLib_GetProjectDir) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetProjectDir");
//static_assert(offsetof(GSE_EngineFuncLib_GetProjectDir, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetProjectDir::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetProjectSettingDefaultGameMode
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_GetProjectSettingDefaultGameMode final
{
public:
	TSubclassOf<class AGameModeBase>              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetProjectSettingDefaultGameMode) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetProjectSettingDefaultGameMode");
//static_assert(sizeof(GSE_EngineFuncLib_GetProjectSettingDefaultGameMode) == 0x000008, "Wrong size on GSE_EngineFuncLib_GetProjectSettingDefaultGameMode");
//static_assert(offsetof(GSE_EngineFuncLib_GetProjectSettingDefaultGameMode, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetProjectSettingDefaultGameMode::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetRecommendedQualityLevel
// 0x0002 (0x0002 - 0x0000)
struct GSE_EngineFuncLib_GetRecommendedQualityLevel final
{
public:
	bool                                          bLogInfo;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGSQualityLevel                               ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetRecommendedQualityLevel) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_GetRecommendedQualityLevel");
//static_assert(sizeof(GSE_EngineFuncLib_GetRecommendedQualityLevel) == 0x000002, "Wrong size on GSE_EngineFuncLib_GetRecommendedQualityLevel");
//static_assert(offsetof(GSE_EngineFuncLib_GetRecommendedQualityLevel, bLogInfo) == 0x000000, "Member 'GSE_EngineFuncLib_GetRecommendedQualityLevel::bLogInfo' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetRecommendedQualityLevel, ReturnValue) == 0x000001, "Member 'GSE_EngineFuncLib_GetRecommendedQualityLevel::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetRegexMatchInfo
// 0x0030 (0x0030 - 0x0000)
struct GSE_EngineFuncLib_GetRegexMatchInfo final
{
public:
	class FString                                 InStr;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegexExpression;                                   // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExtractedInfo;                                     // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetRegexMatchInfo) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetRegexMatchInfo");
//static_assert(sizeof(GSE_EngineFuncLib_GetRegexMatchInfo) == 0x000030, "Wrong size on GSE_EngineFuncLib_GetRegexMatchInfo");
//static_assert(offsetof(GSE_EngineFuncLib_GetRegexMatchInfo, InStr) == 0x000000, "Member 'GSE_EngineFuncLib_GetRegexMatchInfo::InStr' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetRegexMatchInfo, RegexExpression) == 0x000010, "Member 'GSE_EngineFuncLib_GetRegexMatchInfo::RegexExpression' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetRegexMatchInfo, ExtractedInfo) == 0x000020, "Member 'GSE_EngineFuncLib_GetRegexMatchInfo::ExtractedInfo' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetRemainingPsoPrecompileNum
// 0x0004 (0x0004 - 0x0000)
struct GSE_EngineFuncLib_GetRemainingPsoPrecompileNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetRemainingPsoPrecompileNum) == 0x000004, "Wrong alignment on GSE_EngineFuncLib_GetRemainingPsoPrecompileNum");
//static_assert(sizeof(GSE_EngineFuncLib_GetRemainingPsoPrecompileNum) == 0x000004, "Wrong size on GSE_EngineFuncLib_GetRemainingPsoPrecompileNum");
//static_assert(offsetof(GSE_EngineFuncLib_GetRemainingPsoPrecompileNum, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetRemainingPsoPrecompileNum::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetShadowQualityLevel
// 0x0004 (0x0004 - 0x0000)
struct GSE_EngineFuncLib_GetShadowQualityLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetShadowQualityLevel) == 0x000004, "Wrong alignment on GSE_EngineFuncLib_GetShadowQualityLevel");
//static_assert(sizeof(GSE_EngineFuncLib_GetShadowQualityLevel) == 0x000004, "Wrong size on GSE_EngineFuncLib_GetShadowQualityLevel");
//static_assert(offsetof(GSE_EngineFuncLib_GetShadowQualityLevel, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetShadowQualityLevel::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetTimeSpanFromSeconds
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetTimeSpanFromSeconds final
{
public:
	double                                        Seconds;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetTimeSpanFromSeconds) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetTimeSpanFromSeconds");
//static_assert(sizeof(GSE_EngineFuncLib_GetTimeSpanFromSeconds) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetTimeSpanFromSeconds");
//static_assert(offsetof(GSE_EngineFuncLib_GetTimeSpanFromSeconds, Seconds) == 0x000000, "Member 'GSE_EngineFuncLib_GetTimeSpanFromSeconds::Seconds' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetTimeSpanFromSeconds, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetTimeSpanFromSeconds::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetTotalPsoPrecompileNum
// 0x0004 (0x0004 - 0x0000)
struct GSE_EngineFuncLib_GetTotalPsoPrecompileNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetTotalPsoPrecompileNum) == 0x000004, "Wrong alignment on GSE_EngineFuncLib_GetTotalPsoPrecompileNum");
//static_assert(sizeof(GSE_EngineFuncLib_GetTotalPsoPrecompileNum) == 0x000004, "Wrong size on GSE_EngineFuncLib_GetTotalPsoPrecompileNum");
//static_assert(offsetof(GSE_EngineFuncLib_GetTotalPsoPrecompileNum, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetTotalPsoPrecompileNum::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetTransientPackage
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_GetTransientPackage final
{
public:
	class UPackage*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetTransientPackage) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetTransientPackage");
//static_assert(sizeof(GSE_EngineFuncLib_GetTransientPackage) == 0x000008, "Wrong size on GSE_EngineFuncLib_GetTransientPackage");
//static_assert(offsetof(GSE_EngineFuncLib_GetTransientPackage, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetTransientPackage::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetWarningPhysicsAssetList
// 0x0028 (0x0028 - 0x0000)
struct GSE_EngineFuncLib_GetWarningPhysicsAssetList final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TraverseRootPath;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetWarningPhysicsAssetList) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetWarningPhysicsAssetList");
//static_assert(sizeof(GSE_EngineFuncLib_GetWarningPhysicsAssetList) == 0x000028, "Wrong size on GSE_EngineFuncLib_GetWarningPhysicsAssetList");
//static_assert(offsetof(GSE_EngineFuncLib_GetWarningPhysicsAssetList, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_GetWarningPhysicsAssetList::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetWarningPhysicsAssetList, TraverseRootPath) == 0x000008, "Member 'GSE_EngineFuncLib_GetWarningPhysicsAssetList::TraverseRootPath' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetWarningPhysicsAssetList, ReturnValue) == 0x000018, "Member 'GSE_EngineFuncLib_GetWarningPhysicsAssetList::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetWarningUITexList
// 0x0048 (0x0048 - 0x0000)
struct GSE_EngineFuncLib_GetWarningUITexList final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TraverseRootPath;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceFileCommPath;                                // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExcludedPathList;                                  // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetWarningUITexList) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetWarningUITexList");
//static_assert(sizeof(GSE_EngineFuncLib_GetWarningUITexList) == 0x000048, "Wrong size on GSE_EngineFuncLib_GetWarningUITexList");
//static_assert(offsetof(GSE_EngineFuncLib_GetWarningUITexList, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_GetWarningUITexList::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetWarningUITexList, TraverseRootPath) == 0x000008, "Member 'GSE_EngineFuncLib_GetWarningUITexList::TraverseRootPath' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetWarningUITexList, SourceFileCommPath) == 0x000018, "Member 'GSE_EngineFuncLib_GetWarningUITexList::SourceFileCommPath' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetWarningUITexList, ExcludedPathList) == 0x000028, "Member 'GSE_EngineFuncLib_GetWarningUITexList::ExcludedPathList' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetWarningUITexList, ReturnValue) == 0x000038, "Member 'GSE_EngineFuncLib_GetWarningUITexList::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetWindowScreenResolution
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetWindowScreenResolution final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetWindowScreenResolution) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetWindowScreenResolution");
//static_assert(sizeof(GSE_EngineFuncLib_GetWindowScreenResolution) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetWindowScreenResolution");
//static_assert(offsetof(GSE_EngineFuncLib_GetWindowScreenResolution, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_GetWindowScreenResolution::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetWorldFromObj
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetWorldFromObj final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GetWorldFromObj) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetWorldFromObj");
//static_assert(sizeof(GSE_EngineFuncLib_GetWorldFromObj) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetWorldFromObj");
//static_assert(offsetof(GSE_EngineFuncLib_GetWorldFromObj, Context) == 0x000000, "Member 'GSE_EngineFuncLib_GetWorldFromObj::Context' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetWorldFromObj, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetWorldFromObj::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GetWorldMainAudioDeviceID
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_GetWorldMainAudioDeviceID final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_GetWorldMainAudioDeviceID) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GetWorldMainAudioDeviceID");
//static_assert(sizeof(GSE_EngineFuncLib_GetWorldMainAudioDeviceID) == 0x000010, "Wrong size on GSE_EngineFuncLib_GetWorldMainAudioDeviceID");
//static_assert(offsetof(GSE_EngineFuncLib_GetWorldMainAudioDeviceID, WorldContextObject) == 0x000000, "Member 'GSE_EngineFuncLib_GetWorldMainAudioDeviceID::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_GetWorldMainAudioDeviceID, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_GetWorldMainAudioDeviceID::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.GSSaveConfig
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_GSSaveConfig final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_GSSaveConfig) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_GSSaveConfig");
//static_assert(sizeof(GSE_EngineFuncLib_GSSaveConfig) == 0x000008, "Wrong size on GSE_EngineFuncLib_GSSaveConfig");
//static_assert(offsetof(GSE_EngineFuncLib_GSSaveConfig, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_GSSaveConfig::WorldContext' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.HasLaunchOption
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_HasLaunchOption final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_HasLaunchOption) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_HasLaunchOption");
//static_assert(sizeof(GSE_EngineFuncLib_HasLaunchOption) == 0x000018, "Wrong size on GSE_EngineFuncLib_HasLaunchOption");
//static_assert(offsetof(GSE_EngineFuncLib_HasLaunchOption, Option) == 0x000000, "Member 'GSE_EngineFuncLib_HasLaunchOption::Option' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_HasLaunchOption, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_HasLaunchOption::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.HasValidCaptureData
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_HasValidCaptureData final
{
public:
	class UReflectionCaptureComponent*            Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_HasValidCaptureData) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_HasValidCaptureData");
//static_assert(sizeof(GSE_EngineFuncLib_HasValidCaptureData) == 0x000010, "Wrong size on GSE_EngineFuncLib_HasValidCaptureData");
//static_assert(offsetof(GSE_EngineFuncLib_HasValidCaptureData, Component) == 0x000000, "Member 'GSE_EngineFuncLib_HasValidCaptureData::Component' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_HasValidCaptureData, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_HasValidCaptureData::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsClient
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_IsClient final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_IsClient) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_IsClient");
//static_assert(sizeof(GSE_EngineFuncLib_IsClient) == 0x000010, "Wrong size on GSE_EngineFuncLib_IsClient");
//static_assert(offsetof(GSE_EngineFuncLib_IsClient, World) == 0x000000, "Member 'GSE_EngineFuncLib_IsClient::World' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_IsClient, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_IsClient::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsCommandLineHasParam
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_IsCommandLineHasParam final
{
public:
	class FString                                 QueryParam;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_IsCommandLineHasParam) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_IsCommandLineHasParam");
//static_assert(sizeof(GSE_EngineFuncLib_IsCommandLineHasParam) == 0x000018, "Wrong size on GSE_EngineFuncLib_IsCommandLineHasParam");
//static_assert(offsetof(GSE_EngineFuncLib_IsCommandLineHasParam, QueryParam) == 0x000000, "Member 'GSE_EngineFuncLib_IsCommandLineHasParam::QueryParam' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_IsCommandLineHasParam, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_IsCommandLineHasParam::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsControllerInPlayState
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_IsControllerInPlayState final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_IsControllerInPlayState) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_IsControllerInPlayState");
//static_assert(sizeof(GSE_EngineFuncLib_IsControllerInPlayState) == 0x000010, "Wrong size on GSE_EngineFuncLib_IsControllerInPlayState");
//static_assert(offsetof(GSE_EngineFuncLib_IsControllerInPlayState, Controller) == 0x000000, "Member 'GSE_EngineFuncLib_IsControllerInPlayState::Controller' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_IsControllerInPlayState, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_IsControllerInPlayState::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsDedicateServer
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_IsDedicateServer final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_IsDedicateServer) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_IsDedicateServer");
//static_assert(sizeof(GSE_EngineFuncLib_IsDedicateServer) == 0x000010, "Wrong size on GSE_EngineFuncLib_IsDedicateServer");
//static_assert(offsetof(GSE_EngineFuncLib_IsDedicateServer, World) == 0x000000, "Member 'GSE_EngineFuncLib_IsDedicateServer::World' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_IsDedicateServer, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_IsDedicateServer::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsDevelopmentBuild
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_IsDevelopmentBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_IsDevelopmentBuild) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_IsDevelopmentBuild");
//static_assert(sizeof(GSE_EngineFuncLib_IsDevelopmentBuild) == 0x000001, "Wrong size on GSE_EngineFuncLib_IsDevelopmentBuild");
//static_assert(offsetof(GSE_EngineFuncLib_IsDevelopmentBuild, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_IsDevelopmentBuild::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsDriverVersionMismatch
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_IsDriverVersionMismatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_IsDriverVersionMismatch) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_IsDriverVersionMismatch");
//static_assert(sizeof(GSE_EngineFuncLib_IsDriverVersionMismatch) == 0x000001, "Wrong size on GSE_EngineFuncLib_IsDriverVersionMismatch");
//static_assert(offsetof(GSE_EngineFuncLib_IsDriverVersionMismatch, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_IsDriverVersionMismatch::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsEditor
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_IsEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_IsEditor) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_IsEditor");
//static_assert(sizeof(GSE_EngineFuncLib_IsEditor) == 0x000001, "Wrong size on GSE_EngineFuncLib_IsEditor");
//static_assert(offsetof(GSE_EngineFuncLib_IsEditor, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_IsEditor::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsListenServer
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_IsListenServer final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_IsListenServer) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_IsListenServer");
//static_assert(sizeof(GSE_EngineFuncLib_IsListenServer) == 0x000010, "Wrong size on GSE_EngineFuncLib_IsListenServer");
//static_assert(offsetof(GSE_EngineFuncLib_IsListenServer, World) == 0x000000, "Member 'GSE_EngineFuncLib_IsListenServer::World' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_IsListenServer, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_IsListenServer::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsPSOBatchingPaused
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_IsPSOBatchingPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_IsPSOBatchingPaused) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_IsPSOBatchingPaused");
//static_assert(sizeof(GSE_EngineFuncLib_IsPSOBatchingPaused) == 0x000001, "Wrong size on GSE_EngineFuncLib_IsPSOBatchingPaused");
//static_assert(offsetof(GSE_EngineFuncLib_IsPSOBatchingPaused, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_IsPSOBatchingPaused::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsRegexMatched
// 0x0028 (0x0028 - 0x0000)
struct GSE_EngineFuncLib_IsRegexMatched final
{
public:
	class FString                                 InStr;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegexExpression;                                   // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_IsRegexMatched) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_IsRegexMatched");
//static_assert(sizeof(GSE_EngineFuncLib_IsRegexMatched) == 0x000028, "Wrong size on GSE_EngineFuncLib_IsRegexMatched");
//static_assert(offsetof(GSE_EngineFuncLib_IsRegexMatched, InStr) == 0x000000, "Member 'GSE_EngineFuncLib_IsRegexMatched::InStr' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_IsRegexMatched, RegexExpression) == 0x000010, "Member 'GSE_EngineFuncLib_IsRegexMatched::RegexExpression' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_IsRegexMatched, ReturnValue) == 0x000020, "Member 'GSE_EngineFuncLib_IsRegexMatched::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsSavePSOCacheInErrorState
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_IsSavePSOCacheInErrorState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_IsSavePSOCacheInErrorState) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_IsSavePSOCacheInErrorState");
//static_assert(sizeof(GSE_EngineFuncLib_IsSavePSOCacheInErrorState) == 0x000001, "Wrong size on GSE_EngineFuncLib_IsSavePSOCacheInErrorState");
//static_assert(offsetof(GSE_EngineFuncLib_IsSavePSOCacheInErrorState, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_IsSavePSOCacheInErrorState::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsShippingBuild
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_IsShippingBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_IsShippingBuild) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_IsShippingBuild");
//static_assert(sizeof(GSE_EngineFuncLib_IsShippingBuild) == 0x000001, "Wrong size on GSE_EngineFuncLib_IsShippingBuild");
//static_assert(offsetof(GSE_EngineFuncLib_IsShippingBuild, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_IsShippingBuild::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsStandAlone
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_IsStandAlone final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_IsStandAlone) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_IsStandAlone");
//static_assert(sizeof(GSE_EngineFuncLib_IsStandAlone) == 0x000010, "Wrong size on GSE_EngineFuncLib_IsStandAlone");
//static_assert(offsetof(GSE_EngineFuncLib_IsStandAlone, World) == 0x000000, "Member 'GSE_EngineFuncLib_IsStandAlone::World' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_IsStandAlone, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_IsStandAlone::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsStandaloneGame
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_IsStandaloneGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_IsStandaloneGame) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_IsStandaloneGame");
//static_assert(sizeof(GSE_EngineFuncLib_IsStandaloneGame) == 0x000001, "Wrong size on GSE_EngineFuncLib_IsStandaloneGame");
//static_assert(offsetof(GSE_EngineFuncLib_IsStandaloneGame, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_IsStandaloneGame::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsTestBuild
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_IsTestBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_IsTestBuild) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_IsTestBuild");
//static_assert(sizeof(GSE_EngineFuncLib_IsTestBuild) == 0x000001, "Wrong size on GSE_EngineFuncLib_IsTestBuild");
//static_assert(offsetof(GSE_EngineFuncLib_IsTestBuild, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_IsTestBuild::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.IsUnloadPSOFinished
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_IsUnloadPSOFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_IsUnloadPSOFinished) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_IsUnloadPSOFinished");
//static_assert(sizeof(GSE_EngineFuncLib_IsUnloadPSOFinished) == 0x000001, "Wrong size on GSE_EngineFuncLib_IsUnloadPSOFinished");
//static_assert(offsetof(GSE_EngineFuncLib_IsUnloadPSOFinished, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_IsUnloadPSOFinished::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.LoadFileToString
// 0x0020 (0x0020 - 0x0000)
struct GSE_EngineFuncLib_LoadFileToString final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_LoadFileToString) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_LoadFileToString");
//static_assert(sizeof(GSE_EngineFuncLib_LoadFileToString) == 0x000020, "Wrong size on GSE_EngineFuncLib_LoadFileToString");
//static_assert(offsetof(GSE_EngineFuncLib_LoadFileToString, Path) == 0x000000, "Member 'GSE_EngineFuncLib_LoadFileToString::Path' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_LoadFileToString, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_LoadFileToString::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.LogDbg
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_LogDbg final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintScreen;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_LogDbg) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_LogDbg");
//static_assert(sizeof(GSE_EngineFuncLib_LogDbg) == 0x000018, "Wrong size on GSE_EngineFuncLib_LogDbg");
//static_assert(offsetof(GSE_EngineFuncLib_LogDbg, Str) == 0x000000, "Member 'GSE_EngineFuncLib_LogDbg::Str' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_LogDbg, bPrintScreen) == 0x000010, "Member 'GSE_EngineFuncLib_LogDbg::bPrintScreen' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_LogDbg, TimeToDisplay) == 0x000014, "Member 'GSE_EngineFuncLib_LogDbg::TimeToDisplay' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.LogDbgWithColor
// 0x0020 (0x0020 - 0x0000)
struct GSE_EngineFuncLib_LogDbgWithColor final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintScreen;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Key;                                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_LogDbgWithColor) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_LogDbgWithColor");
//static_assert(sizeof(GSE_EngineFuncLib_LogDbgWithColor) == 0x000020, "Wrong size on GSE_EngineFuncLib_LogDbgWithColor");
//static_assert(offsetof(GSE_EngineFuncLib_LogDbgWithColor, Str) == 0x000000, "Member 'GSE_EngineFuncLib_LogDbgWithColor::Str' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_LogDbgWithColor, bPrintScreen) == 0x000010, "Member 'GSE_EngineFuncLib_LogDbgWithColor::bPrintScreen' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_LogDbgWithColor, TimeToDisplay) == 0x000014, "Member 'GSE_EngineFuncLib_LogDbgWithColor::TimeToDisplay' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_LogDbgWithColor, Color) == 0x000018, "Member 'GSE_EngineFuncLib_LogDbgWithColor::Color' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_LogDbgWithColor, Key) == 0x00001C, "Member 'GSE_EngineFuncLib_LogDbgWithColor::Key' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.LogError
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_LogError final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_LogError) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_LogError");
//static_assert(sizeof(GSE_EngineFuncLib_LogError) == 0x000010, "Wrong size on GSE_EngineFuncLib_LogError");
//static_assert(offsetof(GSE_EngineFuncLib_LogError, Str) == 0x000000, "Member 'GSE_EngineFuncLib_LogError::Str' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.LogInfo
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_LogInfo final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_LogInfo) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_LogInfo");
//static_assert(sizeof(GSE_EngineFuncLib_LogInfo) == 0x000010, "Wrong size on GSE_EngineFuncLib_LogInfo");
//static_assert(offsetof(GSE_EngineFuncLib_LogInfo, Str) == 0x000000, "Member 'GSE_EngineFuncLib_LogInfo::Str' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.LogShipping
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_LogShipping final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_LogShipping) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_LogShipping");
//static_assert(sizeof(GSE_EngineFuncLib_LogShipping) == 0x000010, "Wrong size on GSE_EngineFuncLib_LogShipping");
//static_assert(offsetof(GSE_EngineFuncLib_LogShipping, Str) == 0x000000, "Member 'GSE_EngineFuncLib_LogShipping::Str' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.LogShippingError
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_LogShippingError final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_LogShippingError) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_LogShippingError");
//static_assert(sizeof(GSE_EngineFuncLib_LogShippingError) == 0x000010, "Wrong size on GSE_EngineFuncLib_LogShippingError");
//static_assert(offsetof(GSE_EngineFuncLib_LogShippingError, Str) == 0x000000, "Member 'GSE_EngineFuncLib_LogShippingError::Str' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.LogWarning
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_LogWarning final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_LogWarning) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_LogWarning");
//static_assert(sizeof(GSE_EngineFuncLib_LogWarning) == 0x000010, "Wrong size on GSE_EngineFuncLib_LogWarning");
//static_assert(offsetof(GSE_EngineFuncLib_LogWarning, Str) == 0x000000, "Member 'GSE_EngineFuncLib_LogWarning::Str' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.LogWLevel
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_LogWLevel final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLogLevel;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_LogWLevel) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_LogWLevel");
//static_assert(sizeof(GSE_EngineFuncLib_LogWLevel) == 0x000018, "Wrong size on GSE_EngineFuncLib_LogWLevel");
//static_assert(offsetof(GSE_EngineFuncLib_LogWLevel, Str) == 0x000000, "Member 'GSE_EngineFuncLib_LogWLevel::Str' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_LogWLevel, InLogLevel) == 0x000010, "Member 'GSE_EngineFuncLib_LogWLevel::InLogLevel' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.MathEase
// 0x001C (0x001C - 0x0000)
struct GSE_EngineFuncLib_MathEase final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingFunc;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_MathEase) == 0x000004, "Wrong alignment on GSE_EngineFuncLib_MathEase");
//static_assert(sizeof(GSE_EngineFuncLib_MathEase) == 0x00001C, "Wrong size on GSE_EngineFuncLib_MathEase");
//static_assert(offsetof(GSE_EngineFuncLib_MathEase, A) == 0x000000, "Member 'GSE_EngineFuncLib_MathEase::A' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEase, B) == 0x000004, "Member 'GSE_EngineFuncLib_MathEase::B' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEase, Alpha) == 0x000008, "Member 'GSE_EngineFuncLib_MathEase::Alpha' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEase, EasingFunc) == 0x00000C, "Member 'GSE_EngineFuncLib_MathEase::EasingFunc' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEase, BlendExp) == 0x000010, "Member 'GSE_EngineFuncLib_MathEase::BlendExp' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEase, Steps) == 0x000014, "Member 'GSE_EngineFuncLib_MathEase::Steps' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEase, ReturnValue) == 0x000018, "Member 'GSE_EngineFuncLib_MathEase::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.MathEase2D
// 0x0040 (0x0040 - 0x0000)
struct GSE_EngineFuncLib_MathEase2D final
{
public:
	struct FVector2D                              A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingFunc;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_MathEase2D) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_MathEase2D");
//static_assert(sizeof(GSE_EngineFuncLib_MathEase2D) == 0x000040, "Wrong size on GSE_EngineFuncLib_MathEase2D");
//static_assert(offsetof(GSE_EngineFuncLib_MathEase2D, A) == 0x000000, "Member 'GSE_EngineFuncLib_MathEase2D::A' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEase2D, B) == 0x000010, "Member 'GSE_EngineFuncLib_MathEase2D::B' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEase2D, Alpha) == 0x000020, "Member 'GSE_EngineFuncLib_MathEase2D::Alpha' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEase2D, EasingFunc) == 0x000024, "Member 'GSE_EngineFuncLib_MathEase2D::EasingFunc' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEase2D, BlendExp) == 0x000028, "Member 'GSE_EngineFuncLib_MathEase2D::BlendExp' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEase2D, Steps) == 0x00002C, "Member 'GSE_EngineFuncLib_MathEase2D::Steps' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEase2D, ReturnValue) == 0x000030, "Member 'GSE_EngineFuncLib_MathEase2D::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.MathEaseLinearColor
// 0x0040 (0x0040 - 0x0000)
struct GSE_EngineFuncLib_MathEaseLinearColor final
{
public:
	struct FLinearColor                           A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingFunc;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_MathEaseLinearColor) == 0x000004, "Wrong alignment on GSE_EngineFuncLib_MathEaseLinearColor");
//static_assert(sizeof(GSE_EngineFuncLib_MathEaseLinearColor) == 0x000040, "Wrong size on GSE_EngineFuncLib_MathEaseLinearColor");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseLinearColor, A) == 0x000000, "Member 'GSE_EngineFuncLib_MathEaseLinearColor::A' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseLinearColor, B) == 0x000010, "Member 'GSE_EngineFuncLib_MathEaseLinearColor::B' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseLinearColor, Alpha) == 0x000020, "Member 'GSE_EngineFuncLib_MathEaseLinearColor::Alpha' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseLinearColor, EasingFunc) == 0x000024, "Member 'GSE_EngineFuncLib_MathEaseLinearColor::EasingFunc' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseLinearColor, BlendExp) == 0x000028, "Member 'GSE_EngineFuncLib_MathEaseLinearColor::BlendExp' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseLinearColor, Steps) == 0x00002C, "Member 'GSE_EngineFuncLib_MathEaseLinearColor::Steps' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseLinearColor, ReturnValue) == 0x000030, "Member 'GSE_EngineFuncLib_MathEaseLinearColor::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.MathEaseR
// 0x0058 (0x0058 - 0x0000)
struct GSE_EngineFuncLib_MathEaseR final
{
public:
	struct FRotator                               A;                                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               B;                                                 // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShortestPath;                                     // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingFunc;                                        // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_MathEaseR) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_MathEaseR");
//static_assert(sizeof(GSE_EngineFuncLib_MathEaseR) == 0x000058, "Wrong size on GSE_EngineFuncLib_MathEaseR");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseR, A) == 0x000000, "Member 'GSE_EngineFuncLib_MathEaseR::A' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseR, B) == 0x000018, "Member 'GSE_EngineFuncLib_MathEaseR::B' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseR, Alpha) == 0x000030, "Member 'GSE_EngineFuncLib_MathEaseR::Alpha' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseR, bShortestPath) == 0x000034, "Member 'GSE_EngineFuncLib_MathEaseR::bShortestPath' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseR, EasingFunc) == 0x000035, "Member 'GSE_EngineFuncLib_MathEaseR::EasingFunc' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseR, BlendExp) == 0x000038, "Member 'GSE_EngineFuncLib_MathEaseR::BlendExp' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseR, Steps) == 0x00003C, "Member 'GSE_EngineFuncLib_MathEaseR::Steps' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseR, ReturnValue) == 0x000040, "Member 'GSE_EngineFuncLib_MathEaseR::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.MathEaseV
// 0x0058 (0x0058 - 0x0000)
struct GSE_EngineFuncLib_MathEaseV final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingFunc;                                        // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_MathEaseV) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_MathEaseV");
//static_assert(sizeof(GSE_EngineFuncLib_MathEaseV) == 0x000058, "Wrong size on GSE_EngineFuncLib_MathEaseV");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseV, A) == 0x000000, "Member 'GSE_EngineFuncLib_MathEaseV::A' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseV, B) == 0x000018, "Member 'GSE_EngineFuncLib_MathEaseV::B' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseV, Alpha) == 0x000030, "Member 'GSE_EngineFuncLib_MathEaseV::Alpha' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseV, EasingFunc) == 0x000034, "Member 'GSE_EngineFuncLib_MathEaseV::EasingFunc' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseV, BlendExp) == 0x000038, "Member 'GSE_EngineFuncLib_MathEaseV::BlendExp' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseV, Steps) == 0x00003C, "Member 'GSE_EngineFuncLib_MathEaseV::Steps' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MathEaseV, ReturnValue) == 0x000040, "Member 'GSE_EngineFuncLib_MathEaseV::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.MediaPlayerTimeSeek
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_MediaPlayerTimeSeek final
{
public:
	class UMediaPlayer*                           MediaPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Time;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_MediaPlayerTimeSeek) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_MediaPlayerTimeSeek");
//static_assert(sizeof(GSE_EngineFuncLib_MediaPlayerTimeSeek) == 0x000010, "Wrong size on GSE_EngineFuncLib_MediaPlayerTimeSeek");
//static_assert(offsetof(GSE_EngineFuncLib_MediaPlayerTimeSeek, MediaPlayer) == 0x000000, "Member 'GSE_EngineFuncLib_MediaPlayerTimeSeek::MediaPlayer' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MediaPlayerTimeSeek, Time) == 0x000008, "Member 'GSE_EngineFuncLib_MediaPlayerTimeSeek::Time' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.MultipleColorLerp
// 0x0054 (0x0054 - 0x0000)
struct GSE_EngineFuncLib_MultipleColorLerp final
{
public:
	struct FLinearColor                           V1;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           V2;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           V3;                                                // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           V4;                                                // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LerpAlpha;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0044(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_MultipleColorLerp) == 0x000004, "Wrong alignment on GSE_EngineFuncLib_MultipleColorLerp");
//static_assert(sizeof(GSE_EngineFuncLib_MultipleColorLerp) == 0x000054, "Wrong size on GSE_EngineFuncLib_MultipleColorLerp");
//static_assert(offsetof(GSE_EngineFuncLib_MultipleColorLerp, V1) == 0x000000, "Member 'GSE_EngineFuncLib_MultipleColorLerp::V1' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MultipleColorLerp, V2) == 0x000010, "Member 'GSE_EngineFuncLib_MultipleColorLerp::V2' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MultipleColorLerp, V3) == 0x000020, "Member 'GSE_EngineFuncLib_MultipleColorLerp::V3' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MultipleColorLerp, V4) == 0x000030, "Member 'GSE_EngineFuncLib_MultipleColorLerp::V4' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MultipleColorLerp, LerpAlpha) == 0x000040, "Member 'GSE_EngineFuncLib_MultipleColorLerp::LerpAlpha' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_MultipleColorLerp, ReturnValue) == 0x000044, "Member 'GSE_EngineFuncLib_MultipleColorLerp::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.PauseAudio
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_PauseAudio final
{
public:
	class AActor*                                 AudioUtilActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_PauseAudio) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_PauseAudio");
//static_assert(sizeof(GSE_EngineFuncLib_PauseAudio) == 0x000008, "Wrong size on GSE_EngineFuncLib_PauseAudio");
//static_assert(offsetof(GSE_EngineFuncLib_PauseAudio, AudioUtilActor) == 0x000000, "Member 'GSE_EngineFuncLib_PauseAudio::AudioUtilActor' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.PerfTest
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_PerfTest final
{
public:
	int32                                         CaseID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_PerfTest) == 0x000004, "Wrong alignment on GSE_EngineFuncLib_PerfTest");
//static_assert(sizeof(GSE_EngineFuncLib_PerfTest) == 0x000008, "Wrong size on GSE_EngineFuncLib_PerfTest");
//static_assert(offsetof(GSE_EngineFuncLib_PerfTest, CaseID) == 0x000000, "Member 'GSE_EngineFuncLib_PerfTest::CaseID' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_PerfTest, Count) == 0x000004, "Member 'GSE_EngineFuncLib_PerfTest::Count' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.PlayAudio
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_PlayAudio final
{
public:
	class AActor*                                 AudioUtilActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VisualOnly;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_PlayAudio) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_PlayAudio");
//static_assert(sizeof(GSE_EngineFuncLib_PlayAudio) == 0x000010, "Wrong size on GSE_EngineFuncLib_PlayAudio");
//static_assert(offsetof(GSE_EngineFuncLib_PlayAudio, AudioUtilActor) == 0x000000, "Member 'GSE_EngineFuncLib_PlayAudio::AudioUtilActor' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_PlayAudio, VisualOnly) == 0x000008, "Member 'GSE_EngineFuncLib_PlayAudio::VisualOnly' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.PrepareLevelsNeedToBeUnloaded
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_PrepareLevelsNeedToBeUnloaded final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_PrepareLevelsNeedToBeUnloaded) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_PrepareLevelsNeedToBeUnloaded");
//static_assert(sizeof(GSE_EngineFuncLib_PrepareLevelsNeedToBeUnloaded) == 0x000008, "Wrong size on GSE_EngineFuncLib_PrepareLevelsNeedToBeUnloaded");
//static_assert(offsetof(GSE_EngineFuncLib_PrepareLevelsNeedToBeUnloaded, WorldContextObject) == 0x000000, "Member 'GSE_EngineFuncLib_PrepareLevelsNeedToBeUnloaded::WorldContextObject' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.QAGetSimpleCollisionCylinder
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_QAGetSimpleCollisionCylinder final
{
public:
	class AActor*                                 AgentActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionRadius;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionHalfHeight;                               // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_QAGetSimpleCollisionCylinder) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_QAGetSimpleCollisionCylinder");
//static_assert(sizeof(GSE_EngineFuncLib_QAGetSimpleCollisionCylinder) == 0x000010, "Wrong size on GSE_EngineFuncLib_QAGetSimpleCollisionCylinder");
//static_assert(offsetof(GSE_EngineFuncLib_QAGetSimpleCollisionCylinder, AgentActor) == 0x000000, "Member 'GSE_EngineFuncLib_QAGetSimpleCollisionCylinder::AgentActor' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_QAGetSimpleCollisionCylinder, CollisionRadius) == 0x000008, "Member 'GSE_EngineFuncLib_QAGetSimpleCollisionCylinder::CollisionRadius' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_QAGetSimpleCollisionCylinder, CollisionHalfHeight) == 0x00000C, "Member 'GSE_EngineFuncLib_QAGetSimpleCollisionCylinder::CollisionHalfHeight' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.QAHasReached
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_QAHasReached final
{
public:
	class AActor*                                 AgentActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GoalActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_QAHasReached) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_QAHasReached");
//static_assert(sizeof(GSE_EngineFuncLib_QAHasReached) == 0x000018, "Wrong size on GSE_EngineFuncLib_QAHasReached");
//static_assert(offsetof(GSE_EngineFuncLib_QAHasReached, AgentActor) == 0x000000, "Member 'GSE_EngineFuncLib_QAHasReached::AgentActor' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_QAHasReached, GoalActor) == 0x000008, "Member 'GSE_EngineFuncLib_QAHasReached::GoalActor' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_QAHasReached, ReturnValue) == 0x000010, "Member 'GSE_EngineFuncLib_QAHasReached::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.QAIsCompiling
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_QAIsCompiling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_QAIsCompiling) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_QAIsCompiling");
//static_assert(sizeof(GSE_EngineFuncLib_QAIsCompiling) == 0x000001, "Wrong size on GSE_EngineFuncLib_QAIsCompiling");
//static_assert(offsetof(GSE_EngineFuncLib_QAIsCompiling, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_QAIsCompiling::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.QuitGame
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_QuitGame final
{
public:
	class UObject*                                WorldCtx;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_QuitGame) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_QuitGame");
//static_assert(sizeof(GSE_EngineFuncLib_QuitGame) == 0x000008, "Wrong size on GSE_EngineFuncLib_QuitGame");
//static_assert(offsetof(GSE_EngineFuncLib_QuitGame, WorldCtx) == 0x000000, "Member 'GSE_EngineFuncLib_QuitGame::WorldCtx' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.RegisteConsoleKey
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_RegisteConsoleKey final
{
public:
	TArray<class FName>                           Keys;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_RegisteConsoleKey) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_RegisteConsoleKey");
//static_assert(sizeof(GSE_EngineFuncLib_RegisteConsoleKey) == 0x000010, "Wrong size on GSE_EngineFuncLib_RegisteConsoleKey");
//static_assert(offsetof(GSE_EngineFuncLib_RegisteConsoleKey, Keys) == 0x000000, "Member 'GSE_EngineFuncLib_RegisteConsoleKey::Keys' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.RegisterComponent
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_RegisterComponent final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_RegisterComponent) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_RegisterComponent");
//static_assert(sizeof(GSE_EngineFuncLib_RegisterComponent) == 0x000008, "Wrong size on GSE_EngineFuncLib_RegisterComponent");
//static_assert(offsetof(GSE_EngineFuncLib_RegisterComponent, ActorComponent) == 0x000000, "Member 'GSE_EngineFuncLib_RegisterComponent::ActorComponent' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.ReplaceInputActionList
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_ReplaceInputActionList final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGSInputActionKeyMapping>       ActionMappings;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_ReplaceInputActionList) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_ReplaceInputActionList");
//static_assert(sizeof(GSE_EngineFuncLib_ReplaceInputActionList) == 0x000018, "Wrong size on GSE_EngineFuncLib_ReplaceInputActionList");
//static_assert(offsetof(GSE_EngineFuncLib_ReplaceInputActionList, PlayerController) == 0x000000, "Member 'GSE_EngineFuncLib_ReplaceInputActionList::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_ReplaceInputActionList, ActionMappings) == 0x000008, "Member 'GSE_EngineFuncLib_ReplaceInputActionList::ActionMappings' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.ReplaceInputAxisList
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_ReplaceInputAxisList final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGSInputAxisKeyMapping>         AxisMappings;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_ReplaceInputAxisList) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_ReplaceInputAxisList");
//static_assert(sizeof(GSE_EngineFuncLib_ReplaceInputAxisList) == 0x000018, "Wrong size on GSE_EngineFuncLib_ReplaceInputAxisList");
//static_assert(offsetof(GSE_EngineFuncLib_ReplaceInputAxisList, PlayerController) == 0x000000, "Member 'GSE_EngineFuncLib_ReplaceInputAxisList::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_ReplaceInputAxisList, AxisMappings) == 0x000008, "Member 'GSE_EngineFuncLib_ReplaceInputAxisList::AxisMappings' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.RequestExit
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_RequestExit final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_RequestExit) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_RequestExit");
//static_assert(sizeof(GSE_EngineFuncLib_RequestExit) == 0x000001, "Wrong size on GSE_EngineFuncLib_RequestExit");
//static_assert(offsetof(GSE_EngineFuncLib_RequestExit, Force) == 0x000000, "Member 'GSE_EngineFuncLib_RequestExit::Force' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.RequestQuit
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_RequestQuit final
{
public:
	class FString                                 Desc;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_RequestQuit) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_RequestQuit");
//static_assert(sizeof(GSE_EngineFuncLib_RequestQuit) == 0x000010, "Wrong size on GSE_EngineFuncLib_RequestQuit");
//static_assert(offsetof(GSE_EngineFuncLib_RequestQuit, Desc) == 0x000000, "Member 'GSE_EngineFuncLib_RequestQuit::Desc' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.ResetAudioVisualizing
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_ResetAudioVisualizing final
{
public:
	class UUserWidget*                            AudioBox;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_ResetAudioVisualizing) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_ResetAudioVisualizing");
//static_assert(sizeof(GSE_EngineFuncLib_ResetAudioVisualizing) == 0x000008, "Wrong size on GSE_EngineFuncLib_ResetAudioVisualizing");
//static_assert(offsetof(GSE_EngineFuncLib_ResetAudioVisualizing, AudioBox) == 0x000000, "Member 'GSE_EngineFuncLib_ResetAudioVisualizing::AudioBox' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.RestartGame
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_RestartGame final
{
public:
	class AGameMode*                              GameMode;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_RestartGame) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_RestartGame");
//static_assert(sizeof(GSE_EngineFuncLib_RestartGame) == 0x000008, "Wrong size on GSE_EngineFuncLib_RestartGame");
//static_assert(offsetof(GSE_EngineFuncLib_RestartGame, GameMode) == 0x000000, "Member 'GSE_EngineFuncLib_RestartGame::GameMode' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.RunProcess
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_RunProcess final
{
public:
	class FString                                 InProcessPath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_RunProcess) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_RunProcess");
//static_assert(sizeof(GSE_EngineFuncLib_RunProcess) == 0x000010, "Wrong size on GSE_EngineFuncLib_RunProcess");
//static_assert(offsetof(GSE_EngineFuncLib_RunProcess, InProcessPath) == 0x000000, "Member 'GSE_EngineFuncLib_RunProcess::InProcessPath' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.RunProcessWithCheck
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_RunProcessWithCheck final
{
public:
	class FString                                 InProcessPath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_RunProcessWithCheck) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_RunProcessWithCheck");
//static_assert(sizeof(GSE_EngineFuncLib_RunProcessWithCheck) == 0x000010, "Wrong size on GSE_EngineFuncLib_RunProcessWithCheck");
//static_assert(offsetof(GSE_EngineFuncLib_RunProcessWithCheck, InProcessPath) == 0x000000, "Member 'GSE_EngineFuncLib_RunProcessWithCheck::InProcessPath' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.SaveStringToFile
// 0x0020 (0x0020 - 0x0000)
struct GSE_EngineFuncLib_SaveStringToFile final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_SaveStringToFile) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_SaveStringToFile");
//static_assert(sizeof(GSE_EngineFuncLib_SaveStringToFile) == 0x000020, "Wrong size on GSE_EngineFuncLib_SaveStringToFile");
//static_assert(offsetof(GSE_EngineFuncLib_SaveStringToFile, Path) == 0x000000, "Member 'GSE_EngineFuncLib_SaveStringToFile::Path' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SaveStringToFile, Data) == 0x000010, "Member 'GSE_EngineFuncLib_SaveStringToFile::Data' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.ServerSeamlessTravel
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_ServerSeamlessTravel final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_ServerSeamlessTravel) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_ServerSeamlessTravel");
//static_assert(sizeof(GSE_EngineFuncLib_ServerSeamlessTravel) == 0x000018, "Wrong size on GSE_EngineFuncLib_ServerSeamlessTravel");
//static_assert(offsetof(GSE_EngineFuncLib_ServerSeamlessTravel, World) == 0x000000, "Member 'GSE_EngineFuncLib_ServerSeamlessTravel::World' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_ServerSeamlessTravel, URL) == 0x000008, "Member 'GSE_EngineFuncLib_ServerSeamlessTravel::URL' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.SetActorComponentMobilityMovable
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_SetActorComponentMobilityMovable final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMovable;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_SetActorComponentMobilityMovable) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_SetActorComponentMobilityMovable");
//static_assert(sizeof(GSE_EngineFuncLib_SetActorComponentMobilityMovable) == 0x000010, "Wrong size on GSE_EngineFuncLib_SetActorComponentMobilityMovable");
//static_assert(offsetof(GSE_EngineFuncLib_SetActorComponentMobilityMovable, Actor) == 0x000000, "Member 'GSE_EngineFuncLib_SetActorComponentMobilityMovable::Actor' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SetActorComponentMobilityMovable, IsMovable) == 0x000008, "Member 'GSE_EngineFuncLib_SetActorComponentMobilityMovable::IsMovable' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.SetAudioBoxFreqNum
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_SetAudioBoxFreqNum final
{
public:
	class UUserWidget*                            AudioBox;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFreqNum;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_SetAudioBoxFreqNum) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_SetAudioBoxFreqNum");
//static_assert(sizeof(GSE_EngineFuncLib_SetAudioBoxFreqNum) == 0x000010, "Wrong size on GSE_EngineFuncLib_SetAudioBoxFreqNum");
//static_assert(offsetof(GSE_EngineFuncLib_SetAudioBoxFreqNum, AudioBox) == 0x000000, "Member 'GSE_EngineFuncLib_SetAudioBoxFreqNum::AudioBox' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SetAudioBoxFreqNum, InFreqNum) == 0x000008, "Member 'GSE_EngineFuncLib_SetAudioBoxFreqNum::InFreqNum' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.SetCanEverTick
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_SetCanEverTick final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_SetCanEverTick) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_SetCanEverTick");
//static_assert(sizeof(GSE_EngineFuncLib_SetCanEverTick) == 0x000010, "Wrong size on GSE_EngineFuncLib_SetCanEverTick");
//static_assert(offsetof(GSE_EngineFuncLib_SetCanEverTick, Obj) == 0x000000, "Member 'GSE_EngineFuncLib_SetCanEverTick::Obj' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SetCanEverTick, bEnable) == 0x000008, "Member 'GSE_EngineFuncLib_SetCanEverTick::bEnable' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SetCanEverTick, ReturnValue) == 0x000009, "Member 'GSE_EngineFuncLib_SetCanEverTick::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.SetDesiredQualityLevel
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_SetDesiredQualityLevel final
{
public:
	EGSQualityLevel                               TargetGSQualityLevel;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_SetDesiredQualityLevel) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_SetDesiredQualityLevel");
//static_assert(sizeof(GSE_EngineFuncLib_SetDesiredQualityLevel) == 0x000001, "Wrong size on GSE_EngineFuncLib_SetDesiredQualityLevel");
//static_assert(offsetof(GSE_EngineFuncLib_SetDesiredQualityLevel, TargetGSQualityLevel) == 0x000000, "Member 'GSE_EngineFuncLib_SetDesiredQualityLevel::TargetGSQualityLevel' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.SetDisplayGamma
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_SetDisplayGamma final
{
public:
	const class UObject*                          WorldCtx;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gamma;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_SetDisplayGamma) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_SetDisplayGamma");
//static_assert(sizeof(GSE_EngineFuncLib_SetDisplayGamma) == 0x000010, "Wrong size on GSE_EngineFuncLib_SetDisplayGamma");
//static_assert(offsetof(GSE_EngineFuncLib_SetDisplayGamma, WorldCtx) == 0x000000, "Member 'GSE_EngineFuncLib_SetDisplayGamma::WorldCtx' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SetDisplayGamma, Gamma) == 0x000008, "Member 'GSE_EngineFuncLib_SetDisplayGamma::Gamma' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.SetInputDeadZone
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_SetInputDeadZone final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AxisName;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeadZone;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_SetInputDeadZone) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_SetInputDeadZone");
//static_assert(sizeof(GSE_EngineFuncLib_SetInputDeadZone) == 0x000018, "Wrong size on GSE_EngineFuncLib_SetInputDeadZone");
//static_assert(offsetof(GSE_EngineFuncLib_SetInputDeadZone, PlayerController) == 0x000000, "Member 'GSE_EngineFuncLib_SetInputDeadZone::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SetInputDeadZone, AxisName) == 0x000008, "Member 'GSE_EngineFuncLib_SetInputDeadZone::AxisName' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SetInputDeadZone, DeadZone) == 0x000010, "Member 'GSE_EngineFuncLib_SetInputDeadZone::DeadZone' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.SetInputModeGameOnly
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_SetInputModeGameOnly final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_SetInputModeGameOnly) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_SetInputModeGameOnly");
//static_assert(sizeof(GSE_EngineFuncLib_SetInputModeGameOnly) == 0x000008, "Wrong size on GSE_EngineFuncLib_SetInputModeGameOnly");
//static_assert(offsetof(GSE_EngineFuncLib_SetInputModeGameOnly, PlayerController) == 0x000000, "Member 'GSE_EngineFuncLib_SetInputModeGameOnly::PlayerController' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.SetInputModeUIOnly
// 0x0018 (0x0018 - 0x0000)
struct GSE_EngineFuncLib_SetInputModeUIOnly final
{
public:
	class APlayerController*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                InWidgetToFocus;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMouseLockMode                                InMouseLockMode;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_SetInputModeUIOnly) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_SetInputModeUIOnly");
//static_assert(sizeof(GSE_EngineFuncLib_SetInputModeUIOnly) == 0x000018, "Wrong size on GSE_EngineFuncLib_SetInputModeUIOnly");
//static_assert(offsetof(GSE_EngineFuncLib_SetInputModeUIOnly, Target) == 0x000000, "Member 'GSE_EngineFuncLib_SetInputModeUIOnly::Target' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SetInputModeUIOnly, InWidgetToFocus) == 0x000008, "Member 'GSE_EngineFuncLib_SetInputModeUIOnly::InWidgetToFocus' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SetInputModeUIOnly, InMouseLockMode) == 0x000010, "Member 'GSE_EngineFuncLib_SetInputModeUIOnly::InMouseLockMode' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.SetLevelRequestSuspend
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_SetLevelRequestSuspend final
{
public:
	bool                                          ShouldSuspend;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_SetLevelRequestSuspend) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_SetLevelRequestSuspend");
//static_assert(sizeof(GSE_EngineFuncLib_SetLevelRequestSuspend) == 0x000001, "Wrong size on GSE_EngineFuncLib_SetLevelRequestSuspend");
//static_assert(offsetof(GSE_EngineFuncLib_SetLevelRequestSuspend, ShouldSuspend) == 0x000000, "Member 'GSE_EngineFuncLib_SetLevelRequestSuspend::ShouldSuspend' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.SetLogEnable
// 0x0003 (0x0003 - 0x0000)
struct GSE_EngineFuncLib_SetLogEnable final
{
public:
	bool                                          bEnableDbg;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDbgDisplay;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableInfo;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_SetLogEnable) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_SetLogEnable");
//static_assert(sizeof(GSE_EngineFuncLib_SetLogEnable) == 0x000003, "Wrong size on GSE_EngineFuncLib_SetLogEnable");
//static_assert(offsetof(GSE_EngineFuncLib_SetLogEnable, bEnableDbg) == 0x000000, "Member 'GSE_EngineFuncLib_SetLogEnable::bEnableDbg' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SetLogEnable, bEnableDbgDisplay) == 0x000001, "Member 'GSE_EngineFuncLib_SetLogEnable::bEnableDbgDisplay' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SetLogEnable, bEnableInfo) == 0x000002, "Member 'GSE_EngineFuncLib_SetLogEnable::bEnableInfo' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.SetMouseCursorWidgetVisible
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_SetMouseCursorWidgetVisible final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_SetMouseCursorWidgetVisible) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_SetMouseCursorWidgetVisible");
//static_assert(sizeof(GSE_EngineFuncLib_SetMouseCursorWidgetVisible) == 0x000010, "Wrong size on GSE_EngineFuncLib_SetMouseCursorWidgetVisible");
//static_assert(offsetof(GSE_EngineFuncLib_SetMouseCursorWidgetVisible, PlayerController) == 0x000000, "Member 'GSE_EngineFuncLib_SetMouseCursorWidgetVisible::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SetMouseCursorWidgetVisible, bVisible) == 0x000008, "Member 'GSE_EngineFuncLib_SetMouseCursorWidgetVisible::bVisible' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.SetPSOCacheUsageMask
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_SetPSOCacheUsageMask final
{
public:
	int32                                         MapIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialQualityLevel;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NiagaraQualityLevel;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowQualityLevel;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_SetPSOCacheUsageMask) == 0x000004, "Wrong alignment on GSE_EngineFuncLib_SetPSOCacheUsageMask");
//static_assert(sizeof(GSE_EngineFuncLib_SetPSOCacheUsageMask) == 0x000010, "Wrong size on GSE_EngineFuncLib_SetPSOCacheUsageMask");
//static_assert(offsetof(GSE_EngineFuncLib_SetPSOCacheUsageMask, MapIndex) == 0x000000, "Member 'GSE_EngineFuncLib_SetPSOCacheUsageMask::MapIndex' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SetPSOCacheUsageMask, MaterialQualityLevel) == 0x000004, "Member 'GSE_EngineFuncLib_SetPSOCacheUsageMask::MaterialQualityLevel' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SetPSOCacheUsageMask, NiagaraQualityLevel) == 0x000008, "Member 'GSE_EngineFuncLib_SetPSOCacheUsageMask::NiagaraQualityLevel' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_SetPSOCacheUsageMask, ShadowQualityLevel) == 0x00000C, "Member 'GSE_EngineFuncLib_SetPSOCacheUsageMask::ShadowQualityLevel' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.StopAudio
// 0x0008 (0x0008 - 0x0000)
struct GSE_EngineFuncLib_StopAudio final
{
public:
	class AActor*                                 AudioUtilActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_StopAudio) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_StopAudio");
//static_assert(sizeof(GSE_EngineFuncLib_StopAudio) == 0x000008, "Wrong size on GSE_EngineFuncLib_StopAudio");
//static_assert(offsetof(GSE_EngineFuncLib_StopAudio, AudioUtilActor) == 0x000000, "Member 'GSE_EngineFuncLib_StopAudio::AudioUtilActor' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.TestPathSync
// 0x0028 (0x0028 - 0x0000)
struct GSE_EngineFuncLib_TestPathSync final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_TestPathSync) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_TestPathSync");
//static_assert(sizeof(GSE_EngineFuncLib_TestPathSync) == 0x000028, "Wrong size on GSE_EngineFuncLib_TestPathSync");
//static_assert(offsetof(GSE_EngineFuncLib_TestPathSync, Controller) == 0x000000, "Member 'GSE_EngineFuncLib_TestPathSync::Controller' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_TestPathSync, TargetLocation) == 0x000008, "Member 'GSE_EngineFuncLib_TestPathSync::TargetLocation' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_TestPathSync, ReturnValue) == 0x000020, "Member 'GSE_EngineFuncLib_TestPathSync::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.ToMilliseconds
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_ToMilliseconds final
{
public:
	int64                                         Cycles;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_ToMilliseconds) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_ToMilliseconds");
//static_assert(sizeof(GSE_EngineFuncLib_ToMilliseconds) == 0x000010, "Wrong size on GSE_EngineFuncLib_ToMilliseconds");
//static_assert(offsetof(GSE_EngineFuncLib_ToMilliseconds, Cycles) == 0x000000, "Member 'GSE_EngineFuncLib_ToMilliseconds::Cycles' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_ToMilliseconds, ReturnValue) == 0x000008, "Member 'GSE_EngineFuncLib_ToMilliseconds::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.UpdateAudioUtilAnalyzer
// 0x0028 (0x0028 - 0x0000)
struct GSE_EngineFuncLib_UpdateAudioUtilAnalyzer final
{
public:
	class AActor*                                 AudioUtilActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoudnessAnalyzerAssetPath;                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConstantAnalyzerAssetPath;                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_UpdateAudioUtilAnalyzer) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_UpdateAudioUtilAnalyzer");
//static_assert(sizeof(GSE_EngineFuncLib_UpdateAudioUtilAnalyzer) == 0x000028, "Wrong size on GSE_EngineFuncLib_UpdateAudioUtilAnalyzer");
//static_assert(offsetof(GSE_EngineFuncLib_UpdateAudioUtilAnalyzer, AudioUtilActor) == 0x000000, "Member 'GSE_EngineFuncLib_UpdateAudioUtilAnalyzer::AudioUtilActor' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_UpdateAudioUtilAnalyzer, LoudnessAnalyzerAssetPath) == 0x000008, "Member 'GSE_EngineFuncLib_UpdateAudioUtilAnalyzer::LoudnessAnalyzerAssetPath' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_UpdateAudioUtilAnalyzer, ConstantAnalyzerAssetPath) == 0x000018, "Member 'GSE_EngineFuncLib_UpdateAudioUtilAnalyzer::ConstantAnalyzerAssetPath' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.UploadPSOHttpRequest
// 0x0004 (0x0004 - 0x0000)
struct GSE_EngineFuncLib_UploadPSOHttpRequest final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_UploadPSOHttpRequest) == 0x000004, "Wrong alignment on GSE_EngineFuncLib_UploadPSOHttpRequest");
//static_assert(sizeof(GSE_EngineFuncLib_UploadPSOHttpRequest) == 0x000004, "Wrong size on GSE_EngineFuncLib_UploadPSOHttpRequest");
//static_assert(offsetof(GSE_EngineFuncLib_UploadPSOHttpRequest, Num) == 0x000000, "Member 'GSE_EngineFuncLib_UploadPSOHttpRequest::Num' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.UseStatsMacro
// 0x0001 (0x0001 - 0x0000)
struct GSE_EngineFuncLib_UseStatsMacro final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_UseStatsMacro) == 0x000001, "Wrong alignment on GSE_EngineFuncLib_UseStatsMacro");
//static_assert(sizeof(GSE_EngineFuncLib_UseStatsMacro) == 0x000001, "Wrong size on GSE_EngineFuncLib_UseStatsMacro");
//static_assert(offsetof(GSE_EngineFuncLib_UseStatsMacro, ReturnValue) == 0x000000, "Member 'GSE_EngineFuncLib_UseStatsMacro::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.VLogBoxError
// 0x0060 (0x0060 - 0x0000)
struct GSE_EngineFuncLib_VLogBoxError final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Catogary;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Box;                                               // 0x0010(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0048(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_VLogBoxError) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_VLogBoxError");
//static_assert(sizeof(GSE_EngineFuncLib_VLogBoxError) == 0x000060, "Wrong size on GSE_EngineFuncLib_VLogBoxError");
//static_assert(offsetof(GSE_EngineFuncLib_VLogBoxError, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_VLogBoxError::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogBoxError, Catogary) == 0x000008, "Member 'GSE_EngineFuncLib_VLogBoxError::Catogary' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogBoxError, Box) == 0x000010, "Member 'GSE_EngineFuncLib_VLogBoxError::Box' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogBoxError, Color) == 0x000048, "Member 'GSE_EngineFuncLib_VLogBoxError::Color' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogBoxError, Text) == 0x000050, "Member 'GSE_EngineFuncLib_VLogBoxError::Text' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.VLogBoxInfo
// 0x0060 (0x0060 - 0x0000)
struct GSE_EngineFuncLib_VLogBoxInfo final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Catogary;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Box;                                               // 0x0010(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0048(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_VLogBoxInfo) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_VLogBoxInfo");
//static_assert(sizeof(GSE_EngineFuncLib_VLogBoxInfo) == 0x000060, "Wrong size on GSE_EngineFuncLib_VLogBoxInfo");
//static_assert(offsetof(GSE_EngineFuncLib_VLogBoxInfo, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_VLogBoxInfo::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogBoxInfo, Catogary) == 0x000008, "Member 'GSE_EngineFuncLib_VLogBoxInfo::Catogary' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogBoxInfo, Box) == 0x000010, "Member 'GSE_EngineFuncLib_VLogBoxInfo::Box' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogBoxInfo, Color) == 0x000048, "Member 'GSE_EngineFuncLib_VLogBoxInfo::Color' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogBoxInfo, Text) == 0x000050, "Member 'GSE_EngineFuncLib_VLogBoxInfo::Text' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.VLogBoxWarning
// 0x0060 (0x0060 - 0x0000)
struct GSE_EngineFuncLib_VLogBoxWarning final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Catogary;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Box;                                               // 0x0010(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0048(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_VLogBoxWarning) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_VLogBoxWarning");
//static_assert(sizeof(GSE_EngineFuncLib_VLogBoxWarning) == 0x000060, "Wrong size on GSE_EngineFuncLib_VLogBoxWarning");
//static_assert(offsetof(GSE_EngineFuncLib_VLogBoxWarning, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_VLogBoxWarning::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogBoxWarning, Catogary) == 0x000008, "Member 'GSE_EngineFuncLib_VLogBoxWarning::Catogary' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogBoxWarning, Box) == 0x000010, "Member 'GSE_EngineFuncLib_VLogBoxWarning::Box' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogBoxWarning, Color) == 0x000048, "Member 'GSE_EngineFuncLib_VLogBoxWarning::Color' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogBoxWarning, Text) == 0x000050, "Member 'GSE_EngineFuncLib_VLogBoxWarning::Text' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.VLogError
// 0x0020 (0x0020 - 0x0000)
struct GSE_EngineFuncLib_VLogError final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Catogary;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_VLogError) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_VLogError");
//static_assert(sizeof(GSE_EngineFuncLib_VLogError) == 0x000020, "Wrong size on GSE_EngineFuncLib_VLogError");
//static_assert(offsetof(GSE_EngineFuncLib_VLogError, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_VLogError::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogError, Catogary) == 0x000008, "Member 'GSE_EngineFuncLib_VLogError::Catogary' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogError, Text) == 0x000010, "Member 'GSE_EngineFuncLib_VLogError::Text' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.VLogInfo
// 0x0020 (0x0020 - 0x0000)
struct GSE_EngineFuncLib_VLogInfo final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Catogary;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_VLogInfo) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_VLogInfo");
//static_assert(sizeof(GSE_EngineFuncLib_VLogInfo) == 0x000020, "Wrong size on GSE_EngineFuncLib_VLogInfo");
//static_assert(offsetof(GSE_EngineFuncLib_VLogInfo, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_VLogInfo::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogInfo, Catogary) == 0x000008, "Member 'GSE_EngineFuncLib_VLogInfo::Catogary' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogInfo, Text) == 0x000010, "Member 'GSE_EngineFuncLib_VLogInfo::Text' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.VLogLocationError
// 0x0040 (0x0040 - 0x0000)
struct GSE_EngineFuncLib_VLogLocationError final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Catogary;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x002C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_VLogLocationError) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_VLogLocationError");
//static_assert(sizeof(GSE_EngineFuncLib_VLogLocationError) == 0x000040, "Wrong size on GSE_EngineFuncLib_VLogLocationError");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationError, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_VLogLocationError::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationError, Catogary) == 0x000008, "Member 'GSE_EngineFuncLib_VLogLocationError::Catogary' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationError, Location) == 0x000010, "Member 'GSE_EngineFuncLib_VLogLocationError::Location' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationError, Radius) == 0x000028, "Member 'GSE_EngineFuncLib_VLogLocationError::Radius' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationError, Color) == 0x00002C, "Member 'GSE_EngineFuncLib_VLogLocationError::Color' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationError, Text) == 0x000030, "Member 'GSE_EngineFuncLib_VLogLocationError::Text' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.VLogLocationInfo
// 0x0040 (0x0040 - 0x0000)
struct GSE_EngineFuncLib_VLogLocationInfo final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Catogary;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x002C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_VLogLocationInfo) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_VLogLocationInfo");
//static_assert(sizeof(GSE_EngineFuncLib_VLogLocationInfo) == 0x000040, "Wrong size on GSE_EngineFuncLib_VLogLocationInfo");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationInfo, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_VLogLocationInfo::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationInfo, Catogary) == 0x000008, "Member 'GSE_EngineFuncLib_VLogLocationInfo::Catogary' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationInfo, Location) == 0x000010, "Member 'GSE_EngineFuncLib_VLogLocationInfo::Location' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationInfo, Radius) == 0x000028, "Member 'GSE_EngineFuncLib_VLogLocationInfo::Radius' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationInfo, Color) == 0x00002C, "Member 'GSE_EngineFuncLib_VLogLocationInfo::Color' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationInfo, Text) == 0x000030, "Member 'GSE_EngineFuncLib_VLogLocationInfo::Text' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.VLogLocationWarning
// 0x0040 (0x0040 - 0x0000)
struct GSE_EngineFuncLib_VLogLocationWarning final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Catogary;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x002C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_VLogLocationWarning) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_VLogLocationWarning");
//static_assert(sizeof(GSE_EngineFuncLib_VLogLocationWarning) == 0x000040, "Wrong size on GSE_EngineFuncLib_VLogLocationWarning");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationWarning, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_VLogLocationWarning::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationWarning, Catogary) == 0x000008, "Member 'GSE_EngineFuncLib_VLogLocationWarning::Catogary' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationWarning, Location) == 0x000010, "Member 'GSE_EngineFuncLib_VLogLocationWarning::Location' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationWarning, Radius) == 0x000028, "Member 'GSE_EngineFuncLib_VLogLocationWarning::Radius' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationWarning, Color) == 0x00002C, "Member 'GSE_EngineFuncLib_VLogLocationWarning::Color' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogLocationWarning, Text) == 0x000030, "Member 'GSE_EngineFuncLib_VLogLocationWarning::Text' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.VLogSegmentError
// 0x0058 (0x0058 - 0x0000)
struct GSE_EngineFuncLib_VLogSegmentError final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Catogary;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegmentStart;                                      // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegmentEnd;                                        // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0040(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_VLogSegmentError) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_VLogSegmentError");
//static_assert(sizeof(GSE_EngineFuncLib_VLogSegmentError) == 0x000058, "Wrong size on GSE_EngineFuncLib_VLogSegmentError");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentError, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_VLogSegmentError::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentError, Catogary) == 0x000008, "Member 'GSE_EngineFuncLib_VLogSegmentError::Catogary' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentError, SegmentStart) == 0x000010, "Member 'GSE_EngineFuncLib_VLogSegmentError::SegmentStart' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentError, SegmentEnd) == 0x000028, "Member 'GSE_EngineFuncLib_VLogSegmentError::SegmentEnd' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentError, Color) == 0x000040, "Member 'GSE_EngineFuncLib_VLogSegmentError::Color' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentError, Thickness) == 0x000044, "Member 'GSE_EngineFuncLib_VLogSegmentError::Thickness' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentError, Text) == 0x000048, "Member 'GSE_EngineFuncLib_VLogSegmentError::Text' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.VLogSegmentInfo
// 0x0058 (0x0058 - 0x0000)
struct GSE_EngineFuncLib_VLogSegmentInfo final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Catogary;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegmentStart;                                      // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegmentEnd;                                        // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0040(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_VLogSegmentInfo) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_VLogSegmentInfo");
//static_assert(sizeof(GSE_EngineFuncLib_VLogSegmentInfo) == 0x000058, "Wrong size on GSE_EngineFuncLib_VLogSegmentInfo");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentInfo, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_VLogSegmentInfo::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentInfo, Catogary) == 0x000008, "Member 'GSE_EngineFuncLib_VLogSegmentInfo::Catogary' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentInfo, SegmentStart) == 0x000010, "Member 'GSE_EngineFuncLib_VLogSegmentInfo::SegmentStart' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentInfo, SegmentEnd) == 0x000028, "Member 'GSE_EngineFuncLib_VLogSegmentInfo::SegmentEnd' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentInfo, Color) == 0x000040, "Member 'GSE_EngineFuncLib_VLogSegmentInfo::Color' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentInfo, Thickness) == 0x000044, "Member 'GSE_EngineFuncLib_VLogSegmentInfo::Thickness' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentInfo, Text) == 0x000048, "Member 'GSE_EngineFuncLib_VLogSegmentInfo::Text' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.VLogSegmentWarning
// 0x0058 (0x0058 - 0x0000)
struct GSE_EngineFuncLib_VLogSegmentWarning final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Catogary;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegmentStart;                                      // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegmentEnd;                                        // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0040(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_VLogSegmentWarning) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_VLogSegmentWarning");
//static_assert(sizeof(GSE_EngineFuncLib_VLogSegmentWarning) == 0x000058, "Wrong size on GSE_EngineFuncLib_VLogSegmentWarning");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentWarning, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_VLogSegmentWarning::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentWarning, Catogary) == 0x000008, "Member 'GSE_EngineFuncLib_VLogSegmentWarning::Catogary' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentWarning, SegmentStart) == 0x000010, "Member 'GSE_EngineFuncLib_VLogSegmentWarning::SegmentStart' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentWarning, SegmentEnd) == 0x000028, "Member 'GSE_EngineFuncLib_VLogSegmentWarning::SegmentEnd' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentWarning, Color) == 0x000040, "Member 'GSE_EngineFuncLib_VLogSegmentWarning::Color' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentWarning, Thickness) == 0x000044, "Member 'GSE_EngineFuncLib_VLogSegmentWarning::Thickness' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogSegmentWarning, Text) == 0x000048, "Member 'GSE_EngineFuncLib_VLogSegmentWarning::Text' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.VLogWarning
// 0x0020 (0x0020 - 0x0000)
struct GSE_EngineFuncLib_VLogWarning final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Catogary;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_VLogWarning) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_VLogWarning");
//static_assert(sizeof(GSE_EngineFuncLib_VLogWarning) == 0x000020, "Wrong size on GSE_EngineFuncLib_VLogWarning");
//static_assert(offsetof(GSE_EngineFuncLib_VLogWarning, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_VLogWarning::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogWarning, Catogary) == 0x000008, "Member 'GSE_EngineFuncLib_VLogWarning::Catogary' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogWarning, Text) == 0x000010, "Member 'GSE_EngineFuncLib_VLogWarning::Text' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.VLogWLevel
// 0x0028 (0x0028 - 0x0000)
struct GSE_EngineFuncLib_VLogWLevel final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLogLevel;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Catogary;                                          // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_EngineFuncLib_VLogWLevel) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_VLogWLevel");
//static_assert(sizeof(GSE_EngineFuncLib_VLogWLevel) == 0x000028, "Wrong size on GSE_EngineFuncLib_VLogWLevel");
//static_assert(offsetof(GSE_EngineFuncLib_VLogWLevel, WorldContext) == 0x000000, "Member 'GSE_EngineFuncLib_VLogWLevel::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogWLevel, InLogLevel) == 0x000008, "Member 'GSE_EngineFuncLib_VLogWLevel::InLogLevel' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogWLevel, Catogary) == 0x00000C, "Member 'GSE_EngineFuncLib_VLogWLevel::Catogary' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_VLogWLevel, Text) == 0x000018, "Member 'GSE_EngineFuncLib_VLogWLevel::Text' has a wrong offset!");

// Function UnrealExtent.GSE_EngineFuncLib.WasActorRecentlyRendered
// 0x0010 (0x0010 - 0x0000)
struct GSE_EngineFuncLib_WasActorRecentlyRendered final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTolerence;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_EngineFuncLib_WasActorRecentlyRendered) == 0x000008, "Wrong alignment on GSE_EngineFuncLib_WasActorRecentlyRendered");
//static_assert(sizeof(GSE_EngineFuncLib_WasActorRecentlyRendered) == 0x000010, "Wrong size on GSE_EngineFuncLib_WasActorRecentlyRendered");
//static_assert(offsetof(GSE_EngineFuncLib_WasActorRecentlyRendered, InActor) == 0x000000, "Member 'GSE_EngineFuncLib_WasActorRecentlyRendered::InActor' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_WasActorRecentlyRendered, InTolerence) == 0x000008, "Member 'GSE_EngineFuncLib_WasActorRecentlyRendered::InTolerence' has a wrong offset!");
//static_assert(offsetof(GSE_EngineFuncLib_WasActorRecentlyRendered, ReturnValue) == 0x00000C, "Member 'GSE_EngineFuncLib_WasActorRecentlyRendered::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_WorldFuncLib.GetWorldSettings
// 0x0018 (0x0018 - 0x0000)
struct GSE_WorldFuncLib_GetWorldSettings final
{
public:
	class ULevel*                                 Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChecked;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWorldSettings*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_WorldFuncLib_GetWorldSettings) == 0x000008, "Wrong alignment on GSE_WorldFuncLib_GetWorldSettings");
//static_assert(sizeof(GSE_WorldFuncLib_GetWorldSettings) == 0x000018, "Wrong size on GSE_WorldFuncLib_GetWorldSettings");
//static_assert(offsetof(GSE_WorldFuncLib_GetWorldSettings, Level) == 0x000000, "Member 'GSE_WorldFuncLib_GetWorldSettings::Level' has a wrong offset!");
//static_assert(offsetof(GSE_WorldFuncLib_GetWorldSettings, bChecked) == 0x000008, "Member 'GSE_WorldFuncLib_GetWorldSettings::bChecked' has a wrong offset!");
//static_assert(offsetof(GSE_WorldFuncLib_GetWorldSettings, ReturnValue) == 0x000010, "Member 'GSE_WorldFuncLib_GetWorldSettings::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_WorldFuncLib.NotifyWorldSettingsBeginPlay
// 0x0008 (0x0008 - 0x0000)
struct GSE_WorldFuncLib_NotifyWorldSettingsBeginPlay final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_WorldFuncLib_NotifyWorldSettingsBeginPlay) == 0x000008, "Wrong alignment on GSE_WorldFuncLib_NotifyWorldSettingsBeginPlay");
//static_assert(sizeof(GSE_WorldFuncLib_NotifyWorldSettingsBeginPlay) == 0x000008, "Wrong size on GSE_WorldFuncLib_NotifyWorldSettingsBeginPlay");
//static_assert(offsetof(GSE_WorldFuncLib_NotifyWorldSettingsBeginPlay, World) == 0x000000, "Member 'GSE_WorldFuncLib_NotifyWorldSettingsBeginPlay::World' has a wrong offset!");

// Function UnrealExtent.GSE_WorldFuncLib.NotifyWorldSettingsMatchStart
// 0x0008 (0x0008 - 0x0000)
struct GSE_WorldFuncLib_NotifyWorldSettingsMatchStart final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_WorldFuncLib_NotifyWorldSettingsMatchStart) == 0x000008, "Wrong alignment on GSE_WorldFuncLib_NotifyWorldSettingsMatchStart");
//static_assert(sizeof(GSE_WorldFuncLib_NotifyWorldSettingsMatchStart) == 0x000008, "Wrong size on GSE_WorldFuncLib_NotifyWorldSettingsMatchStart");
//static_assert(offsetof(GSE_WorldFuncLib_NotifyWorldSettingsMatchStart, World) == 0x000000, "Member 'GSE_WorldFuncLib_NotifyWorldSettingsMatchStart::World' has a wrong offset!");

// Function UnrealExtent.GSE_WorldFuncLib.WorldGetCurrentLevel
// 0x0010 (0x0010 - 0x0000)
struct GSE_WorldFuncLib_WorldGetCurrentLevel final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevel*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_WorldFuncLib_WorldGetCurrentLevel) == 0x000008, "Wrong alignment on GSE_WorldFuncLib_WorldGetCurrentLevel");
//static_assert(sizeof(GSE_WorldFuncLib_WorldGetCurrentLevel) == 0x000010, "Wrong size on GSE_WorldFuncLib_WorldGetCurrentLevel");
//static_assert(offsetof(GSE_WorldFuncLib_WorldGetCurrentLevel, World) == 0x000000, "Member 'GSE_WorldFuncLib_WorldGetCurrentLevel::World' has a wrong offset!");
//static_assert(offsetof(GSE_WorldFuncLib_WorldGetCurrentLevel, ReturnValue) == 0x000008, "Member 'GSE_WorldFuncLib_WorldGetCurrentLevel::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_WorldFuncLib.WorldGetPersistentLevel
// 0x0010 (0x0010 - 0x0000)
struct GSE_WorldFuncLib_WorldGetPersistentLevel final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevel*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_WorldFuncLib_WorldGetPersistentLevel) == 0x000008, "Wrong alignment on GSE_WorldFuncLib_WorldGetPersistentLevel");
//static_assert(sizeof(GSE_WorldFuncLib_WorldGetPersistentLevel) == 0x000010, "Wrong size on GSE_WorldFuncLib_WorldGetPersistentLevel");
//static_assert(offsetof(GSE_WorldFuncLib_WorldGetPersistentLevel, World) == 0x000000, "Member 'GSE_WorldFuncLib_WorldGetPersistentLevel::World' has a wrong offset!");
//static_assert(offsetof(GSE_WorldFuncLib_WorldGetPersistentLevel, ReturnValue) == 0x000008, "Member 'GSE_WorldFuncLib_WorldGetPersistentLevel::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_WorldFuncLib.WorldViewportCursorVisible
// 0x0010 (0x0010 - 0x0000)
struct GSE_WorldFuncLib_WorldViewportCursorVisible final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_WorldFuncLib_WorldViewportCursorVisible) == 0x000008, "Wrong alignment on GSE_WorldFuncLib_WorldViewportCursorVisible");
//static_assert(sizeof(GSE_WorldFuncLib_WorldViewportCursorVisible) == 0x000010, "Wrong size on GSE_WorldFuncLib_WorldViewportCursorVisible");
//static_assert(offsetof(GSE_WorldFuncLib_WorldViewportCursorVisible, World) == 0x000000, "Member 'GSE_WorldFuncLib_WorldViewportCursorVisible::World' has a wrong offset!");
//static_assert(offsetof(GSE_WorldFuncLib_WorldViewportCursorVisible, ReturnValue) == 0x000008, "Member 'GSE_WorldFuncLib_WorldViewportCursorVisible::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_WorldFuncLib.WorldViewportForeground
// 0x0010 (0x0010 - 0x0000)
struct GSE_WorldFuncLib_WorldViewportForeground final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_WorldFuncLib_WorldViewportForeground) == 0x000008, "Wrong alignment on GSE_WorldFuncLib_WorldViewportForeground");
//static_assert(sizeof(GSE_WorldFuncLib_WorldViewportForeground) == 0x000010, "Wrong size on GSE_WorldFuncLib_WorldViewportForeground");
//static_assert(offsetof(GSE_WorldFuncLib_WorldViewportForeground, World) == 0x000000, "Member 'GSE_WorldFuncLib_WorldViewportForeground::World' has a wrong offset!");
//static_assert(offsetof(GSE_WorldFuncLib_WorldViewportForeground, ReturnValue) == 0x000008, "Member 'GSE_WorldFuncLib_WorldViewportForeground::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_FoliageFuncLib.IFA_GetSelectedInstanceName
// 0x0018 (0x0018 - 0x0000)
struct GSE_FoliageFuncLib_IFA_GetSelectedInstanceName final
{
public:
	class AInstancedFoliageActor*                 FoliageActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_FoliageFuncLib_IFA_GetSelectedInstanceName) == 0x000008, "Wrong alignment on GSE_FoliageFuncLib_IFA_GetSelectedInstanceName");
//static_assert(sizeof(GSE_FoliageFuncLib_IFA_GetSelectedInstanceName) == 0x000018, "Wrong size on GSE_FoliageFuncLib_IFA_GetSelectedInstanceName");
//static_assert(offsetof(GSE_FoliageFuncLib_IFA_GetSelectedInstanceName, FoliageActor) == 0x000000, "Member 'GSE_FoliageFuncLib_IFA_GetSelectedInstanceName::FoliageActor' has a wrong offset!");
//static_assert(offsetof(GSE_FoliageFuncLib_IFA_GetSelectedInstanceName, ReturnValue) == 0x000008, "Member 'GSE_FoliageFuncLib_IFA_GetSelectedInstanceName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_FoliageFuncLib.InstancedFoliageActorSetCullDistance
// 0x0010 (0x0010 - 0x0000)
struct GSE_FoliageFuncLib_InstancedFoliageActorSetCullDistance final
{
public:
	class AInstancedFoliageActor*                 FoliageActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLodDist;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLodDist;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_FoliageFuncLib_InstancedFoliageActorSetCullDistance) == 0x000008, "Wrong alignment on GSE_FoliageFuncLib_InstancedFoliageActorSetCullDistance");
//static_assert(sizeof(GSE_FoliageFuncLib_InstancedFoliageActorSetCullDistance) == 0x000010, "Wrong size on GSE_FoliageFuncLib_InstancedFoliageActorSetCullDistance");
//static_assert(offsetof(GSE_FoliageFuncLib_InstancedFoliageActorSetCullDistance, FoliageActor) == 0x000000, "Member 'GSE_FoliageFuncLib_InstancedFoliageActorSetCullDistance::FoliageActor' has a wrong offset!");
//static_assert(offsetof(GSE_FoliageFuncLib_InstancedFoliageActorSetCullDistance, MinLodDist) == 0x000008, "Member 'GSE_FoliageFuncLib_InstancedFoliageActorSetCullDistance::MinLodDist' has a wrong offset!");
//static_assert(offsetof(GSE_FoliageFuncLib_InstancedFoliageActorSetCullDistance, MaxLodDist) == 0x00000C, "Member 'GSE_FoliageFuncLib_InstancedFoliageActorSetCullDistance::MaxLodDist' has a wrong offset!");

// Function UnrealExtent.GSE_ProfilerFuncLib.CaptureAllStatsInfo
// 0x0010 (0x0010 - 0x0000)
struct GSE_ProfilerFuncLib_CaptureAllStatsInfo final
{
public:
	TArray<struct FGSCapturedStatResult>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ProfilerFuncLib_CaptureAllStatsInfo) == 0x000008, "Wrong alignment on GSE_ProfilerFuncLib_CaptureAllStatsInfo");
//static_assert(sizeof(GSE_ProfilerFuncLib_CaptureAllStatsInfo) == 0x000010, "Wrong size on GSE_ProfilerFuncLib_CaptureAllStatsInfo");
//static_assert(offsetof(GSE_ProfilerFuncLib_CaptureAllStatsInfo, ReturnValue) == 0x000000, "Member 'GSE_ProfilerFuncLib_CaptureAllStatsInfo::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ProfilerFuncLib.CaptureSpecificStatsInfo
// 0x0020 (0x0020 - 0x0000)
struct GSE_ProfilerFuncLib_CaptureSpecificStatsInfo final
{
public:
	TArray<class FString>                         StatNames;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FGSCapturedStatResult>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_ProfilerFuncLib_CaptureSpecificStatsInfo) == 0x000008, "Wrong alignment on GSE_ProfilerFuncLib_CaptureSpecificStatsInfo");
//static_assert(sizeof(GSE_ProfilerFuncLib_CaptureSpecificStatsInfo) == 0x000020, "Wrong size on GSE_ProfilerFuncLib_CaptureSpecificStatsInfo");
//static_assert(offsetof(GSE_ProfilerFuncLib_CaptureSpecificStatsInfo, StatNames) == 0x000000, "Member 'GSE_ProfilerFuncLib_CaptureSpecificStatsInfo::StatNames' has a wrong offset!");
//static_assert(offsetof(GSE_ProfilerFuncLib_CaptureSpecificStatsInfo, ReturnValue) == 0x000010, "Member 'GSE_ProfilerFuncLib_CaptureSpecificStatsInfo::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_ProfilerFuncLib.StartRecordingPerfChart
// 0x0018 (0x0018 - 0x0000)
struct GSE_ProfilerFuncLib_StartRecordingPerfChart final
{
public:
	class FString                                 TargetFileName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTotalFrames;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollectInsightData;                               // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_ProfilerFuncLib_StartRecordingPerfChart) == 0x000008, "Wrong alignment on GSE_ProfilerFuncLib_StartRecordingPerfChart");
//static_assert(sizeof(GSE_ProfilerFuncLib_StartRecordingPerfChart) == 0x000018, "Wrong size on GSE_ProfilerFuncLib_StartRecordingPerfChart");
//static_assert(offsetof(GSE_ProfilerFuncLib_StartRecordingPerfChart, TargetFileName) == 0x000000, "Member 'GSE_ProfilerFuncLib_StartRecordingPerfChart::TargetFileName' has a wrong offset!");
//static_assert(offsetof(GSE_ProfilerFuncLib_StartRecordingPerfChart, InTotalFrames) == 0x000010, "Member 'GSE_ProfilerFuncLib_StartRecordingPerfChart::InTotalFrames' has a wrong offset!");
//static_assert(offsetof(GSE_ProfilerFuncLib_StartRecordingPerfChart, bCollectInsightData) == 0x000014, "Member 'GSE_ProfilerFuncLib_StartRecordingPerfChart::bCollectInsightData' has a wrong offset!");

// Function UnrealExtent.GSE_PostProcessFuncLib.GetSceneViewFinalPostProcessSettings
// 0x07C0 (0x07C0 - 0x0000)
struct GSE_PostProcessFuncLib_GetSceneViewFinalPostProcessSettings final
{
public:
	class AActor*                                 WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   ReturnValue;                                       // 0x0010(0x07B0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_PostProcessFuncLib_GetSceneViewFinalPostProcessSettings) == 0x000010, "Wrong alignment on GSE_PostProcessFuncLib_GetSceneViewFinalPostProcessSettings");
//static_assert(sizeof(GSE_PostProcessFuncLib_GetSceneViewFinalPostProcessSettings) == 0x0007C0, "Wrong size on GSE_PostProcessFuncLib_GetSceneViewFinalPostProcessSettings");
//static_assert(offsetof(GSE_PostProcessFuncLib_GetSceneViewFinalPostProcessSettings, WorldContext) == 0x000000, "Member 'GSE_PostProcessFuncLib_GetSceneViewFinalPostProcessSettings::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_PostProcessFuncLib_GetSceneViewFinalPostProcessSettings, ReturnValue) == 0x000010, "Member 'GSE_PostProcessFuncLib_GetSceneViewFinalPostProcessSettings::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_PostProcessFuncLib.RemovePPCompWeightBlendable
// 0x0010 (0x0010 - 0x0000)
struct GSE_PostProcessFuncLib_RemovePPCompWeightBlendable final
{
public:
	class UPostProcessComponent*                  PPComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     PPMaterialInterface;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_PostProcessFuncLib_RemovePPCompWeightBlendable) == 0x000008, "Wrong alignment on GSE_PostProcessFuncLib_RemovePPCompWeightBlendable");
//static_assert(sizeof(GSE_PostProcessFuncLib_RemovePPCompWeightBlendable) == 0x000010, "Wrong size on GSE_PostProcessFuncLib_RemovePPCompWeightBlendable");
//static_assert(offsetof(GSE_PostProcessFuncLib_RemovePPCompWeightBlendable, PPComp) == 0x000000, "Member 'GSE_PostProcessFuncLib_RemovePPCompWeightBlendable::PPComp' has a wrong offset!");
//static_assert(offsetof(GSE_PostProcessFuncLib_RemovePPCompWeightBlendable, PPMaterialInterface) == 0x000008, "Member 'GSE_PostProcessFuncLib_RemovePPCompWeightBlendable::PPMaterialInterface' has a wrong offset!");

// Function UnrealExtent.GSE_PostProcessFuncLib.RemovePPVWeightBlendable
// 0x0010 (0x0010 - 0x0000)
struct GSE_PostProcessFuncLib_RemovePPVWeightBlendable final
{
public:
	class APostProcessVolume*                     PPV;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     PPMaterialInterface;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_PostProcessFuncLib_RemovePPVWeightBlendable) == 0x000008, "Wrong alignment on GSE_PostProcessFuncLib_RemovePPVWeightBlendable");
//static_assert(sizeof(GSE_PostProcessFuncLib_RemovePPVWeightBlendable) == 0x000010, "Wrong size on GSE_PostProcessFuncLib_RemovePPVWeightBlendable");
//static_assert(offsetof(GSE_PostProcessFuncLib_RemovePPVWeightBlendable, PPV) == 0x000000, "Member 'GSE_PostProcessFuncLib_RemovePPVWeightBlendable::PPV' has a wrong offset!");
//static_assert(offsetof(GSE_PostProcessFuncLib_RemovePPVWeightBlendable, PPMaterialInterface) == 0x000008, "Member 'GSE_PostProcessFuncLib_RemovePPVWeightBlendable::PPMaterialInterface' has a wrong offset!");

// Function UnrealExtent.GSE_PostProcessFuncLib.SetCameraCompWeightedBlendableWeightByIndex
// 0x0010 (0x0010 - 0x0000)
struct GSE_PostProcessFuncLib_SetCameraCompWeightedBlendableWeightByIndex final
{
public:
	class UCameraComponent*                       CameraComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PPMatIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_PostProcessFuncLib_SetCameraCompWeightedBlendableWeightByIndex) == 0x000008, "Wrong alignment on GSE_PostProcessFuncLib_SetCameraCompWeightedBlendableWeightByIndex");
//static_assert(sizeof(GSE_PostProcessFuncLib_SetCameraCompWeightedBlendableWeightByIndex) == 0x000010, "Wrong size on GSE_PostProcessFuncLib_SetCameraCompWeightedBlendableWeightByIndex");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetCameraCompWeightedBlendableWeightByIndex, CameraComp) == 0x000000, "Member 'GSE_PostProcessFuncLib_SetCameraCompWeightedBlendableWeightByIndex::CameraComp' has a wrong offset!");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetCameraCompWeightedBlendableWeightByIndex, PPMatIndex) == 0x000008, "Member 'GSE_PostProcessFuncLib_SetCameraCompWeightedBlendableWeightByIndex::PPMatIndex' has a wrong offset!");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetCameraCompWeightedBlendableWeightByIndex, Weight) == 0x00000C, "Member 'GSE_PostProcessFuncLib_SetCameraCompWeightedBlendableWeightByIndex::Weight' has a wrong offset!");

// Function UnrealExtent.GSE_PostProcessFuncLib.SetCameraWeightedBlendableWeightByIndex
// 0x0010 (0x0010 - 0x0000)
struct GSE_PostProcessFuncLib_SetCameraWeightedBlendableWeightByIndex final
{
public:
	class AActor*                                 CameraActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PPMatIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_PostProcessFuncLib_SetCameraWeightedBlendableWeightByIndex) == 0x000008, "Wrong alignment on GSE_PostProcessFuncLib_SetCameraWeightedBlendableWeightByIndex");
//static_assert(sizeof(GSE_PostProcessFuncLib_SetCameraWeightedBlendableWeightByIndex) == 0x000010, "Wrong size on GSE_PostProcessFuncLib_SetCameraWeightedBlendableWeightByIndex");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetCameraWeightedBlendableWeightByIndex, CameraActor) == 0x000000, "Member 'GSE_PostProcessFuncLib_SetCameraWeightedBlendableWeightByIndex::CameraActor' has a wrong offset!");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetCameraWeightedBlendableWeightByIndex, PPMatIndex) == 0x000008, "Member 'GSE_PostProcessFuncLib_SetCameraWeightedBlendableWeightByIndex::PPMatIndex' has a wrong offset!");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetCameraWeightedBlendableWeightByIndex, Weight) == 0x00000C, "Member 'GSE_PostProcessFuncLib_SetCameraWeightedBlendableWeightByIndex::Weight' has a wrong offset!");

// Function UnrealExtent.GSE_PostProcessFuncLib.SetPPCompWeightedBlendableWeight
// 0x0018 (0x0018 - 0x0000)
struct GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeight final
{
public:
	class UPostProcessComponent*                  PPComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     PPMaterialInterface;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeight) == 0x000008, "Wrong alignment on GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeight");
//static_assert(sizeof(GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeight) == 0x000018, "Wrong size on GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeight");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeight, PPComp) == 0x000000, "Member 'GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeight::PPComp' has a wrong offset!");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeight, PPMaterialInterface) == 0x000008, "Member 'GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeight::PPMaterialInterface' has a wrong offset!");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeight, Weight) == 0x000010, "Member 'GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeight::Weight' has a wrong offset!");

// Function UnrealExtent.GSE_PostProcessFuncLib.SetPPCompWeightedBlendableWeightByIndex
// 0x0010 (0x0010 - 0x0000)
struct GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeightByIndex final
{
public:
	class UPostProcessComponent*                  PPComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PPMatIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeightByIndex) == 0x000008, "Wrong alignment on GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeightByIndex");
//static_assert(sizeof(GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeightByIndex) == 0x000010, "Wrong size on GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeightByIndex");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeightByIndex, PPComp) == 0x000000, "Member 'GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeightByIndex::PPComp' has a wrong offset!");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeightByIndex, PPMatIndex) == 0x000008, "Member 'GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeightByIndex::PPMatIndex' has a wrong offset!");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeightByIndex, Weight) == 0x00000C, "Member 'GSE_PostProcessFuncLib_SetPPCompWeightedBlendableWeightByIndex::Weight' has a wrong offset!");

// Function UnrealExtent.GSE_PostProcessFuncLib.SetPPVWeightedBlendableWeight
// 0x0018 (0x0018 - 0x0000)
struct GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeight final
{
public:
	class APostProcessVolume*                     PPV;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     PPMaterialInterface;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeight) == 0x000008, "Wrong alignment on GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeight");
//static_assert(sizeof(GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeight) == 0x000018, "Wrong size on GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeight");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeight, PPV) == 0x000000, "Member 'GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeight::PPV' has a wrong offset!");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeight, PPMaterialInterface) == 0x000008, "Member 'GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeight::PPMaterialInterface' has a wrong offset!");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeight, Weight) == 0x000010, "Member 'GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeight::Weight' has a wrong offset!");

// Function UnrealExtent.GSE_PostProcessFuncLib.SetPPVWeightedBlendableWeightByIndex
// 0x0010 (0x0010 - 0x0000)
struct GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeightByIndex final
{
public:
	class APostProcessVolume*                     PPV;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PPMatIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeightByIndex) == 0x000008, "Wrong alignment on GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeightByIndex");
//static_assert(sizeof(GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeightByIndex) == 0x000010, "Wrong size on GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeightByIndex");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeightByIndex, PPV) == 0x000000, "Member 'GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeightByIndex::PPV' has a wrong offset!");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeightByIndex, PPMatIndex) == 0x000008, "Member 'GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeightByIndex::PPMatIndex' has a wrong offset!");
//static_assert(offsetof(GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeightByIndex, Weight) == 0x00000C, "Member 'GSE_PostProcessFuncLib_SetPPVWeightedBlendableWeightByIndex::Weight' has a wrong offset!");

// Function UnrealExtent.GSE_CameraUtilFuncLib.GetCameraFocalParams
// 0x0018 (0x0018 - 0x0000)
struct GSE_CameraUtilFuncLib_GetCameraFocalParams final
{
public:
	class UCameraComponent*                       InCamera;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutFocalDistance;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDepthBlurKm;                                    // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDepthBlurRadius;                                // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_CameraUtilFuncLib_GetCameraFocalParams) == 0x000008, "Wrong alignment on GSE_CameraUtilFuncLib_GetCameraFocalParams");
//static_assert(sizeof(GSE_CameraUtilFuncLib_GetCameraFocalParams) == 0x000018, "Wrong size on GSE_CameraUtilFuncLib_GetCameraFocalParams");
//static_assert(offsetof(GSE_CameraUtilFuncLib_GetCameraFocalParams, InCamera) == 0x000000, "Member 'GSE_CameraUtilFuncLib_GetCameraFocalParams::InCamera' has a wrong offset!");
//static_assert(offsetof(GSE_CameraUtilFuncLib_GetCameraFocalParams, OutFocalDistance) == 0x000008, "Member 'GSE_CameraUtilFuncLib_GetCameraFocalParams::OutFocalDistance' has a wrong offset!");
//static_assert(offsetof(GSE_CameraUtilFuncLib_GetCameraFocalParams, OutDepthBlurKm) == 0x00000C, "Member 'GSE_CameraUtilFuncLib_GetCameraFocalParams::OutDepthBlurKm' has a wrong offset!");
//static_assert(offsetof(GSE_CameraUtilFuncLib_GetCameraFocalParams, OutDepthBlurRadius) == 0x000010, "Member 'GSE_CameraUtilFuncLib_GetCameraFocalParams::OutDepthBlurRadius' has a wrong offset!");

// Function UnrealExtent.GSE_CameraUtilFuncLib.GetCameraViewTarget
// 0x0010 (0x0010 - 0x0000)
struct GSE_CameraUtilFuncLib_GetCameraViewTarget final
{
public:
	class APlayerCameraManager*                   CameraManager;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_CameraUtilFuncLib_GetCameraViewTarget) == 0x000008, "Wrong alignment on GSE_CameraUtilFuncLib_GetCameraViewTarget");
//static_assert(sizeof(GSE_CameraUtilFuncLib_GetCameraViewTarget) == 0x000010, "Wrong size on GSE_CameraUtilFuncLib_GetCameraViewTarget");
//static_assert(offsetof(GSE_CameraUtilFuncLib_GetCameraViewTarget, CameraManager) == 0x000000, "Member 'GSE_CameraUtilFuncLib_GetCameraViewTarget::CameraManager' has a wrong offset!");
//static_assert(offsetof(GSE_CameraUtilFuncLib_GetCameraViewTarget, ReturnValue) == 0x000008, "Member 'GSE_CameraUtilFuncLib_GetCameraViewTarget::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CameraUtilFuncLib.IsPositionInScreenViewport
// 0x0028 (0x0028 - 0x0000)
struct GSE_CameraUtilFuncLib_IsPositionInScreenViewport final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_CameraUtilFuncLib_IsPositionInScreenViewport) == 0x000008, "Wrong alignment on GSE_CameraUtilFuncLib_IsPositionInScreenViewport");
//static_assert(sizeof(GSE_CameraUtilFuncLib_IsPositionInScreenViewport) == 0x000028, "Wrong size on GSE_CameraUtilFuncLib_IsPositionInScreenViewport");
//static_assert(offsetof(GSE_CameraUtilFuncLib_IsPositionInScreenViewport, WorldContext) == 0x000000, "Member 'GSE_CameraUtilFuncLib_IsPositionInScreenViewport::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_CameraUtilFuncLib_IsPositionInScreenViewport, Position) == 0x000008, "Member 'GSE_CameraUtilFuncLib_IsPositionInScreenViewport::Position' has a wrong offset!");
//static_assert(offsetof(GSE_CameraUtilFuncLib_IsPositionInScreenViewport, ReturnValue) == 0x000020, "Member 'GSE_CameraUtilFuncLib_IsPositionInScreenViewport::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_CameraUtilFuncLib.SetCameraFocalParams
// 0x0018 (0x0018 - 0x0000)
struct GSE_CameraUtilFuncLib_SetCameraFocalParams final
{
public:
	class UCameraComponent*                       InCamera;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFocalDistance;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDepthBlurKm;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthBlurRadius;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_CameraUtilFuncLib_SetCameraFocalParams) == 0x000008, "Wrong alignment on GSE_CameraUtilFuncLib_SetCameraFocalParams");
//static_assert(sizeof(GSE_CameraUtilFuncLib_SetCameraFocalParams) == 0x000018, "Wrong size on GSE_CameraUtilFuncLib_SetCameraFocalParams");
//static_assert(offsetof(GSE_CameraUtilFuncLib_SetCameraFocalParams, InCamera) == 0x000000, "Member 'GSE_CameraUtilFuncLib_SetCameraFocalParams::InCamera' has a wrong offset!");
//static_assert(offsetof(GSE_CameraUtilFuncLib_SetCameraFocalParams, InFocalDistance) == 0x000008, "Member 'GSE_CameraUtilFuncLib_SetCameraFocalParams::InFocalDistance' has a wrong offset!");
//static_assert(offsetof(GSE_CameraUtilFuncLib_SetCameraFocalParams, InDepthBlurKm) == 0x00000C, "Member 'GSE_CameraUtilFuncLib_SetCameraFocalParams::InDepthBlurKm' has a wrong offset!");
//static_assert(offsetof(GSE_CameraUtilFuncLib_SetCameraFocalParams, DepthBlurRadius) == 0x000010, "Member 'GSE_CameraUtilFuncLib_SetCameraFocalParams::DepthBlurRadius' has a wrong offset!");

// Function UnrealExtent.GSE_CameraUtilFuncLib.SetLocalPlayerAspectRatioAxisConstraint
// 0x0010 (0x0010 - 0x0000)
struct GSE_CameraUtilFuncLib_SetLocalPlayerAspectRatioAxisConstraint final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAspectRatioAxisConstraint                    TargetAspectRatioAxisConstraint;                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_CameraUtilFuncLib_SetLocalPlayerAspectRatioAxisConstraint) == 0x000008, "Wrong alignment on GSE_CameraUtilFuncLib_SetLocalPlayerAspectRatioAxisConstraint");
//static_assert(sizeof(GSE_CameraUtilFuncLib_SetLocalPlayerAspectRatioAxisConstraint) == 0x000010, "Wrong size on GSE_CameraUtilFuncLib_SetLocalPlayerAspectRatioAxisConstraint");
//static_assert(offsetof(GSE_CameraUtilFuncLib_SetLocalPlayerAspectRatioAxisConstraint, PlayerController) == 0x000000, "Member 'GSE_CameraUtilFuncLib_SetLocalPlayerAspectRatioAxisConstraint::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_CameraUtilFuncLib_SetLocalPlayerAspectRatioAxisConstraint, TargetAspectRatioAxisConstraint) == 0x000008, "Member 'GSE_CameraUtilFuncLib_SetLocalPlayerAspectRatioAxisConstraint::TargetAspectRatioAxisConstraint' has a wrong offset!");
//static_assert(offsetof(GSE_CameraUtilFuncLib_SetLocalPlayerAspectRatioAxisConstraint, ReturnValue) == 0x000009, "Member 'GSE_CameraUtilFuncLib_SetLocalPlayerAspectRatioAxisConstraint::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AssetUtilFuncLib.GetAssetDataAsset
// 0x0010 (0x0010 - 0x0000)
struct GSE_AssetUtilFuncLib_GetAssetDataAsset final
{
public:
	class UAssetDataArray*                        AssetData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AssetUtilFuncLib_GetAssetDataAsset) == 0x000008, "Wrong alignment on GSE_AssetUtilFuncLib_GetAssetDataAsset");
//static_assert(sizeof(GSE_AssetUtilFuncLib_GetAssetDataAsset) == 0x000010, "Wrong size on GSE_AssetUtilFuncLib_GetAssetDataAsset");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetAssetDataAsset, AssetData) == 0x000000, "Member 'GSE_AssetUtilFuncLib_GetAssetDataAsset::AssetData' has a wrong offset!");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetAssetDataAsset, ReturnValue) == 0x000008, "Member 'GSE_AssetUtilFuncLib_GetAssetDataAsset::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AssetUtilFuncLib.GetAssetDataClass
// 0x0010 (0x0010 - 0x0000)
struct GSE_AssetUtilFuncLib_GetAssetDataClass final
{
public:
	class UAssetDataArray*                        AssetData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AssetUtilFuncLib_GetAssetDataClass) == 0x000008, "Wrong alignment on GSE_AssetUtilFuncLib_GetAssetDataClass");
//static_assert(sizeof(GSE_AssetUtilFuncLib_GetAssetDataClass) == 0x000010, "Wrong size on GSE_AssetUtilFuncLib_GetAssetDataClass");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetAssetDataClass, AssetData) == 0x000000, "Member 'GSE_AssetUtilFuncLib_GetAssetDataClass::AssetData' has a wrong offset!");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetAssetDataClass, ReturnValue) == 0x000008, "Member 'GSE_AssetUtilFuncLib_GetAssetDataClass::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AssetUtilFuncLib.GetAssetDataFromPackageObj
// 0x0018 (0x0018 - 0x0000)
struct GSE_AssetUtilFuncLib_GetAssetDataFromPackageObj final
{
public:
	TArray<class UObject*>                        PackageObjects;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UAssetDataArray*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AssetUtilFuncLib_GetAssetDataFromPackageObj) == 0x000008, "Wrong alignment on GSE_AssetUtilFuncLib_GetAssetDataFromPackageObj");
//static_assert(sizeof(GSE_AssetUtilFuncLib_GetAssetDataFromPackageObj) == 0x000018, "Wrong size on GSE_AssetUtilFuncLib_GetAssetDataFromPackageObj");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetAssetDataFromPackageObj, PackageObjects) == 0x000000, "Member 'GSE_AssetUtilFuncLib_GetAssetDataFromPackageObj::PackageObjects' has a wrong offset!");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetAssetDataFromPackageObj, ReturnValue) == 0x000010, "Member 'GSE_AssetUtilFuncLib_GetAssetDataFromPackageObj::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AssetUtilFuncLib.GetAssetDataTagValue
// 0x0020 (0x0020 - 0x0000)
struct GSE_AssetUtilFuncLib_GetAssetDataTagValue final
{
public:
	class UAssetDataArray*                        AssetData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagName;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AssetUtilFuncLib_GetAssetDataTagValue) == 0x000008, "Wrong alignment on GSE_AssetUtilFuncLib_GetAssetDataTagValue");
//static_assert(sizeof(GSE_AssetUtilFuncLib_GetAssetDataTagValue) == 0x000020, "Wrong size on GSE_AssetUtilFuncLib_GetAssetDataTagValue");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetAssetDataTagValue, AssetData) == 0x000000, "Member 'GSE_AssetUtilFuncLib_GetAssetDataTagValue::AssetData' has a wrong offset!");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetAssetDataTagValue, TagName) == 0x000008, "Member 'GSE_AssetUtilFuncLib_GetAssetDataTagValue::TagName' has a wrong offset!");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetAssetDataTagValue, ReturnValue) == 0x000010, "Member 'GSE_AssetUtilFuncLib_GetAssetDataTagValue::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AssetUtilFuncLib.GetAssetsByPath
// 0x0018 (0x0018 - 0x0000)
struct GSE_AssetUtilFuncLib_GetAssetsByPath final
{
public:
	TArray<class FString>                         Paths;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAssetDataArray*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AssetUtilFuncLib_GetAssetsByPath) == 0x000008, "Wrong alignment on GSE_AssetUtilFuncLib_GetAssetsByPath");
//static_assert(sizeof(GSE_AssetUtilFuncLib_GetAssetsByPath) == 0x000018, "Wrong size on GSE_AssetUtilFuncLib_GetAssetsByPath");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetAssetsByPath, Paths) == 0x000000, "Member 'GSE_AssetUtilFuncLib_GetAssetsByPath::Paths' has a wrong offset!");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetAssetsByPath, ReturnValue) == 0x000010, "Member 'GSE_AssetUtilFuncLib_GetAssetsByPath::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AssetUtilFuncLib.GetAssetsInFolder
// 0x0018 (0x0018 - 0x0000)
struct GSE_AssetUtilFuncLib_GetAssetsInFolder final
{
public:
	class FName                                   FolderPath;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeOnlyOnDiskAssets;                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAssetDataArray*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AssetUtilFuncLib_GetAssetsInFolder) == 0x000008, "Wrong alignment on GSE_AssetUtilFuncLib_GetAssetsInFolder");
//static_assert(sizeof(GSE_AssetUtilFuncLib_GetAssetsInFolder) == 0x000018, "Wrong size on GSE_AssetUtilFuncLib_GetAssetsInFolder");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetAssetsInFolder, FolderPath) == 0x000000, "Member 'GSE_AssetUtilFuncLib_GetAssetsInFolder::FolderPath' has a wrong offset!");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetAssetsInFolder, bRecursive) == 0x000008, "Member 'GSE_AssetUtilFuncLib_GetAssetsInFolder::bRecursive' has a wrong offset!");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetAssetsInFolder, bIncludeOnlyOnDiskAssets) == 0x000009, "Member 'GSE_AssetUtilFuncLib_GetAssetsInFolder::bIncludeOnlyOnDiskAssets' has a wrong offset!");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetAssetsInFolder, ReturnValue) == 0x000010, "Member 'GSE_AssetUtilFuncLib_GetAssetsInFolder::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AssetUtilFuncLib.GetDependenciesAssetsFromAssets
// 0x0010 (0x0010 - 0x0000)
struct GSE_AssetUtilFuncLib_GetDependenciesAssetsFromAssets final
{
public:
	class UAssetDataArray*                        Assets;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAssetDataArray*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AssetUtilFuncLib_GetDependenciesAssetsFromAssets) == 0x000008, "Wrong alignment on GSE_AssetUtilFuncLib_GetDependenciesAssetsFromAssets");
//static_assert(sizeof(GSE_AssetUtilFuncLib_GetDependenciesAssetsFromAssets) == 0x000010, "Wrong size on GSE_AssetUtilFuncLib_GetDependenciesAssetsFromAssets");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetDependenciesAssetsFromAssets, Assets) == 0x000000, "Member 'GSE_AssetUtilFuncLib_GetDependenciesAssetsFromAssets::Assets' has a wrong offset!");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetDependenciesAssetsFromAssets, ReturnValue) == 0x000008, "Member 'GSE_AssetUtilFuncLib_GetDependenciesAssetsFromAssets::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AssetUtilFuncLib.GetReferenceAssetsFromAssets
// 0x0010 (0x0010 - 0x0000)
struct GSE_AssetUtilFuncLib_GetReferenceAssetsFromAssets final
{
public:
	class UAssetDataArray*                        Assets;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAssetDataArray*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AssetUtilFuncLib_GetReferenceAssetsFromAssets) == 0x000008, "Wrong alignment on GSE_AssetUtilFuncLib_GetReferenceAssetsFromAssets");
//static_assert(sizeof(GSE_AssetUtilFuncLib_GetReferenceAssetsFromAssets) == 0x000010, "Wrong size on GSE_AssetUtilFuncLib_GetReferenceAssetsFromAssets");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetReferenceAssetsFromAssets, Assets) == 0x000000, "Member 'GSE_AssetUtilFuncLib_GetReferenceAssetsFromAssets::Assets' has a wrong offset!");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetReferenceAssetsFromAssets, ReturnValue) == 0x000008, "Member 'GSE_AssetUtilFuncLib_GetReferenceAssetsFromAssets::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AssetUtilFuncLib.GetReferenceAssetsFromObjects
// 0x0018 (0x0018 - 0x0000)
struct GSE_AssetUtilFuncLib_GetReferenceAssetsFromObjects final
{
public:
	TArray<class UObject*>                        LoadedSourceAssets;                                // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAssetDataArray*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AssetUtilFuncLib_GetReferenceAssetsFromObjects) == 0x000008, "Wrong alignment on GSE_AssetUtilFuncLib_GetReferenceAssetsFromObjects");
//static_assert(sizeof(GSE_AssetUtilFuncLib_GetReferenceAssetsFromObjects) == 0x000018, "Wrong size on GSE_AssetUtilFuncLib_GetReferenceAssetsFromObjects");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetReferenceAssetsFromObjects, LoadedSourceAssets) == 0x000000, "Member 'GSE_AssetUtilFuncLib_GetReferenceAssetsFromObjects::LoadedSourceAssets' has a wrong offset!");
//static_assert(offsetof(GSE_AssetUtilFuncLib_GetReferenceAssetsFromObjects, ReturnValue) == 0x000010, "Member 'GSE_AssetUtilFuncLib_GetReferenceAssetsFromObjects::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_AssetUtilFuncLib.LoadObjectsFromAssetData
// 0x0018 (0x0018 - 0x0000)
struct GSE_AssetUtilFuncLib_LoadObjectsFromAssetData final
{
public:
	class UAssetDataArray*                        Assets;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_AssetUtilFuncLib_LoadObjectsFromAssetData) == 0x000008, "Wrong alignment on GSE_AssetUtilFuncLib_LoadObjectsFromAssetData");
//static_assert(sizeof(GSE_AssetUtilFuncLib_LoadObjectsFromAssetData) == 0x000018, "Wrong size on GSE_AssetUtilFuncLib_LoadObjectsFromAssetData");
//static_assert(offsetof(GSE_AssetUtilFuncLib_LoadObjectsFromAssetData, Assets) == 0x000000, "Member 'GSE_AssetUtilFuncLib_LoadObjectsFromAssetData::Assets' has a wrong offset!");
//static_assert(offsetof(GSE_AssetUtilFuncLib_LoadObjectsFromAssetData, ReturnValue) == 0x000008, "Member 'GSE_AssetUtilFuncLib_LoadObjectsFromAssetData::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_LoadingUtilFuncLib.ClientSetBlockOnAsyncLoading
// 0x0008 (0x0008 - 0x0000)
struct GSE_LoadingUtilFuncLib_ClientSetBlockOnAsyncLoading final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_LoadingUtilFuncLib_ClientSetBlockOnAsyncLoading) == 0x000008, "Wrong alignment on GSE_LoadingUtilFuncLib_ClientSetBlockOnAsyncLoading");
//static_assert(sizeof(GSE_LoadingUtilFuncLib_ClientSetBlockOnAsyncLoading) == 0x000008, "Wrong size on GSE_LoadingUtilFuncLib_ClientSetBlockOnAsyncLoading");
//static_assert(offsetof(GSE_LoadingUtilFuncLib_ClientSetBlockOnAsyncLoading, PlayerController) == 0x000000, "Member 'GSE_LoadingUtilFuncLib_ClientSetBlockOnAsyncLoading::PlayerController' has a wrong offset!");

// Function UnrealExtent.GSE_LoadingUtilFuncLib.SyncLoadObject
// 0x0018 (0x0018 - 0x0000)
struct GSE_LoadingUtilFuncLib_SyncLoadObject final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_LoadingUtilFuncLib_SyncLoadObject) == 0x000008, "Wrong alignment on GSE_LoadingUtilFuncLib_SyncLoadObject");
//static_assert(sizeof(GSE_LoadingUtilFuncLib_SyncLoadObject) == 0x000018, "Wrong size on GSE_LoadingUtilFuncLib_SyncLoadObject");
//static_assert(offsetof(GSE_LoadingUtilFuncLib_SyncLoadObject, Path) == 0x000000, "Member 'GSE_LoadingUtilFuncLib_SyncLoadObject::Path' has a wrong offset!");
//static_assert(offsetof(GSE_LoadingUtilFuncLib_SyncLoadObject, ReturnValue) == 0x000010, "Member 'GSE_LoadingUtilFuncLib_SyncLoadObject::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_OnlineSocketFuncLib.GetLocalListenIp
// 0x0018 (0x0018 - 0x0000)
struct GSE_OnlineSocketFuncLib_GetLocalListenIp final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_OnlineSocketFuncLib_GetLocalListenIp) == 0x000008, "Wrong alignment on GSE_OnlineSocketFuncLib_GetLocalListenIp");
//static_assert(sizeof(GSE_OnlineSocketFuncLib_GetLocalListenIp) == 0x000018, "Wrong size on GSE_OnlineSocketFuncLib_GetLocalListenIp");
//static_assert(offsetof(GSE_OnlineSocketFuncLib_GetLocalListenIp, WorldContext) == 0x000000, "Member 'GSE_OnlineSocketFuncLib_GetLocalListenIp::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_OnlineSocketFuncLib_GetLocalListenIp, ReturnValue) == 0x000008, "Member 'GSE_OnlineSocketFuncLib_GetLocalListenIp::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_OnlineSocketFuncLib.GetLocalListenPort
// 0x0010 (0x0010 - 0x0000)
struct GSE_OnlineSocketFuncLib_GetLocalListenPort final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_OnlineSocketFuncLib_GetLocalListenPort) == 0x000008, "Wrong alignment on GSE_OnlineSocketFuncLib_GetLocalListenPort");
//static_assert(sizeof(GSE_OnlineSocketFuncLib_GetLocalListenPort) == 0x000010, "Wrong size on GSE_OnlineSocketFuncLib_GetLocalListenPort");
//static_assert(offsetof(GSE_OnlineSocketFuncLib_GetLocalListenPort, WorldContext) == 0x000000, "Member 'GSE_OnlineSocketFuncLib_GetLocalListenPort::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_OnlineSocketFuncLib_GetLocalListenPort, ReturnValue) == 0x000008, "Member 'GSE_OnlineSocketFuncLib_GetLocalListenPort::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_TraceFuncLib.CharacterCapsuleTraceSingleByProfile
// 0x0078 (0x0078 - 0x0000)
struct GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 IgnoreActor;                                       // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutHitLocation;                                    // 0x0058(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile) == 0x000008, "Wrong alignment on GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile");
//static_assert(sizeof(GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile) == 0x000078, "Wrong size on GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile");
//static_assert(offsetof(GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile, WorldContextObject) == 0x000000, "Member 'GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile, Start) == 0x000008, "Member 'GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile::Start' has a wrong offset!");
//static_assert(offsetof(GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile, End) == 0x000020, "Member 'GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile::End' has a wrong offset!");
//static_assert(offsetof(GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile, Radius) == 0x000038, "Member 'GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile::Radius' has a wrong offset!");
//static_assert(offsetof(GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile, HalfHeight) == 0x00003C, "Member 'GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile::HalfHeight' has a wrong offset!");
//static_assert(offsetof(GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile, ProfileName) == 0x000040, "Member 'GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile::ProfileName' has a wrong offset!");
//static_assert(offsetof(GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile, bTraceComplex) == 0x000048, "Member 'GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile::bTraceComplex' has a wrong offset!");
//static_assert(offsetof(GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile, IgnoreActor) == 0x000050, "Member 'GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile::IgnoreActor' has a wrong offset!");
//static_assert(offsetof(GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile, OutHitLocation) == 0x000058, "Member 'GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile::OutHitLocation' has a wrong offset!");
//static_assert(offsetof(GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile, ReturnValue) == 0x000070, "Member 'GSE_TraceFuncLib_CharacterCapsuleTraceSingleByProfile::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_OverlapFuncLib.BoxOverlapActorsByProfile
// 0x0070 (0x0070 - 0x0000)
struct GSE_OverlapFuncLib_BoxOverlapActorsByProfile final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxPos;                                            // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ActorClassFilter;                                  // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_OverlapFuncLib_BoxOverlapActorsByProfile) == 0x000008, "Wrong alignment on GSE_OverlapFuncLib_BoxOverlapActorsByProfile");
//static_assert(sizeof(GSE_OverlapFuncLib_BoxOverlapActorsByProfile) == 0x000070, "Wrong size on GSE_OverlapFuncLib_BoxOverlapActorsByProfile");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapActorsByProfile, WorldContextObject) == 0x000000, "Member 'GSE_OverlapFuncLib_BoxOverlapActorsByProfile::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapActorsByProfile, BoxPos) == 0x000008, "Member 'GSE_OverlapFuncLib_BoxOverlapActorsByProfile::BoxPos' has a wrong offset!");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapActorsByProfile, BoxExtent) == 0x000020, "Member 'GSE_OverlapFuncLib_BoxOverlapActorsByProfile::BoxExtent' has a wrong offset!");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapActorsByProfile, ProfileName) == 0x000038, "Member 'GSE_OverlapFuncLib_BoxOverlapActorsByProfile::ProfileName' has a wrong offset!");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapActorsByProfile, ActorClassFilter) == 0x000040, "Member 'GSE_OverlapFuncLib_BoxOverlapActorsByProfile::ActorClassFilter' has a wrong offset!");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapActorsByProfile, ActorsToIgnore) == 0x000048, "Member 'GSE_OverlapFuncLib_BoxOverlapActorsByProfile::ActorsToIgnore' has a wrong offset!");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapActorsByProfile, OutActors) == 0x000058, "Member 'GSE_OverlapFuncLib_BoxOverlapActorsByProfile::OutActors' has a wrong offset!");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapActorsByProfile, ReturnValue) == 0x000068, "Member 'GSE_OverlapFuncLib_BoxOverlapActorsByProfile::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_OverlapFuncLib.BoxOverlapComponentsByProfile
// 0x0070 (0x0070 - 0x0000)
struct GSE_OverlapFuncLib_BoxOverlapComponentsByProfile final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxPos;                                            // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ComponentClassFilter;                              // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            OutComponents;                                     // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_OverlapFuncLib_BoxOverlapComponentsByProfile) == 0x000008, "Wrong alignment on GSE_OverlapFuncLib_BoxOverlapComponentsByProfile");
//static_assert(sizeof(GSE_OverlapFuncLib_BoxOverlapComponentsByProfile) == 0x000070, "Wrong size on GSE_OverlapFuncLib_BoxOverlapComponentsByProfile");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapComponentsByProfile, WorldContextObject) == 0x000000, "Member 'GSE_OverlapFuncLib_BoxOverlapComponentsByProfile::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapComponentsByProfile, BoxPos) == 0x000008, "Member 'GSE_OverlapFuncLib_BoxOverlapComponentsByProfile::BoxPos' has a wrong offset!");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapComponentsByProfile, BoxExtent) == 0x000020, "Member 'GSE_OverlapFuncLib_BoxOverlapComponentsByProfile::BoxExtent' has a wrong offset!");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapComponentsByProfile, ProfileName) == 0x000038, "Member 'GSE_OverlapFuncLib_BoxOverlapComponentsByProfile::ProfileName' has a wrong offset!");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapComponentsByProfile, ComponentClassFilter) == 0x000040, "Member 'GSE_OverlapFuncLib_BoxOverlapComponentsByProfile::ComponentClassFilter' has a wrong offset!");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapComponentsByProfile, ActorsToIgnore) == 0x000048, "Member 'GSE_OverlapFuncLib_BoxOverlapComponentsByProfile::ActorsToIgnore' has a wrong offset!");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapComponentsByProfile, OutComponents) == 0x000058, "Member 'GSE_OverlapFuncLib_BoxOverlapComponentsByProfile::OutComponents' has a wrong offset!");
//static_assert(offsetof(GSE_OverlapFuncLib_BoxOverlapComponentsByProfile, ReturnValue) == 0x000068, "Member 'GSE_OverlapFuncLib_BoxOverlapComponentsByProfile::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_FileFuncLib.AndroidExtractFolderFromApk
// 0x0028 (0x0028 - 0x0000)
struct GSE_FileFuncLib_AndroidExtractFolderFromApk final
{
public:
	class FString                                 SrcPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DestPath;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_FileFuncLib_AndroidExtractFolderFromApk) == 0x000008, "Wrong alignment on GSE_FileFuncLib_AndroidExtractFolderFromApk");
//static_assert(sizeof(GSE_FileFuncLib_AndroidExtractFolderFromApk) == 0x000028, "Wrong size on GSE_FileFuncLib_AndroidExtractFolderFromApk");
//static_assert(offsetof(GSE_FileFuncLib_AndroidExtractFolderFromApk, SrcPath) == 0x000000, "Member 'GSE_FileFuncLib_AndroidExtractFolderFromApk::SrcPath' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_AndroidExtractFolderFromApk, DestPath) == 0x000010, "Member 'GSE_FileFuncLib_AndroidExtractFolderFromApk::DestPath' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_AndroidExtractFolderFromApk, ReturnValue) == 0x000020, "Member 'GSE_FileFuncLib_AndroidExtractFolderFromApk::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_FileFuncLib.AndroidHasFileInApk
// 0x0018 (0x0018 - 0x0000)
struct GSE_FileFuncLib_AndroidHasFileInApk final
{
public:
	class FString                                 SrcPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_FileFuncLib_AndroidHasFileInApk) == 0x000008, "Wrong alignment on GSE_FileFuncLib_AndroidHasFileInApk");
//static_assert(sizeof(GSE_FileFuncLib_AndroidHasFileInApk) == 0x000018, "Wrong size on GSE_FileFuncLib_AndroidHasFileInApk");
//static_assert(offsetof(GSE_FileFuncLib_AndroidHasFileInApk, SrcPath) == 0x000000, "Member 'GSE_FileFuncLib_AndroidHasFileInApk::SrcPath' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_AndroidHasFileInApk, ReturnValue) == 0x000010, "Member 'GSE_FileFuncLib_AndroidHasFileInApk::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_FileFuncLib.ExtractDirToPath
// 0x0028 (0x0028 - 0x0000)
struct GSE_FileFuncLib_ExtractDirToPath final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dest;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_FileFuncLib_ExtractDirToPath) == 0x000008, "Wrong alignment on GSE_FileFuncLib_ExtractDirToPath");
//static_assert(sizeof(GSE_FileFuncLib_ExtractDirToPath) == 0x000028, "Wrong size on GSE_FileFuncLib_ExtractDirToPath");
//static_assert(offsetof(GSE_FileFuncLib_ExtractDirToPath, Src) == 0x000000, "Member 'GSE_FileFuncLib_ExtractDirToPath::Src' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_ExtractDirToPath, Dest) == 0x000010, "Member 'GSE_FileFuncLib_ExtractDirToPath::Dest' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_ExtractDirToPath, ReturnValue) == 0x000020, "Member 'GSE_FileFuncLib_ExtractDirToPath::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_FileFuncLib.ExtractFileToPath
// 0x0028 (0x0028 - 0x0000)
struct GSE_FileFuncLib_ExtractFileToPath final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dest;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_FileFuncLib_ExtractFileToPath) == 0x000008, "Wrong alignment on GSE_FileFuncLib_ExtractFileToPath");
//static_assert(sizeof(GSE_FileFuncLib_ExtractFileToPath) == 0x000028, "Wrong size on GSE_FileFuncLib_ExtractFileToPath");
//static_assert(offsetof(GSE_FileFuncLib_ExtractFileToPath, Src) == 0x000000, "Member 'GSE_FileFuncLib_ExtractFileToPath::Src' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_ExtractFileToPath, Dest) == 0x000010, "Member 'GSE_FileFuncLib_ExtractFileToPath::Dest' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_ExtractFileToPath, ReturnValue) == 0x000020, "Member 'GSE_FileFuncLib_ExtractFileToPath::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_FileFuncLib.FindFiles
// 0x0038 (0x0038 - 0x0000)
struct GSE_FileFuncLib_FindFiles final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FoundFiles;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_FileFuncLib_FindFiles) == 0x000008, "Wrong alignment on GSE_FileFuncLib_FindFiles");
//static_assert(sizeof(GSE_FileFuncLib_FindFiles) == 0x000038, "Wrong size on GSE_FileFuncLib_FindFiles");
//static_assert(offsetof(GSE_FileFuncLib_FindFiles, Directory) == 0x000000, "Member 'GSE_FileFuncLib_FindFiles::Directory' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_FindFiles, FoundFiles) == 0x000010, "Member 'GSE_FileFuncLib_FindFiles::FoundFiles' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_FindFiles, FileExtension) == 0x000020, "Member 'GSE_FileFuncLib_FindFiles::FileExtension' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_FindFiles, ReturnValue) == 0x000030, "Member 'GSE_FileFuncLib_FindFiles::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_FileFuncLib.FindFilesRecursively
// 0x0038 (0x0038 - 0x0000)
struct GSE_FileFuncLib_FindFilesRecursively final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FoundFiles;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_FileFuncLib_FindFilesRecursively) == 0x000008, "Wrong alignment on GSE_FileFuncLib_FindFilesRecursively");
//static_assert(sizeof(GSE_FileFuncLib_FindFilesRecursively) == 0x000038, "Wrong size on GSE_FileFuncLib_FindFilesRecursively");
//static_assert(offsetof(GSE_FileFuncLib_FindFilesRecursively, Directory) == 0x000000, "Member 'GSE_FileFuncLib_FindFilesRecursively::Directory' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_FindFilesRecursively, FoundFiles) == 0x000010, "Member 'GSE_FileFuncLib_FindFilesRecursively::FoundFiles' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_FindFilesRecursively, FileExtension) == 0x000020, "Member 'GSE_FileFuncLib_FindFilesRecursively::FileExtension' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_FindFilesRecursively, ReturnValue) == 0x000030, "Member 'GSE_FileFuncLib_FindFilesRecursively::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_FileFuncLib.LoadFileToArray
// 0x0028 (0x0028 - 0x0000)
struct GSE_FileFuncLib_LoadFileToArray final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 FileData;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_FileFuncLib_LoadFileToArray) == 0x000008, "Wrong alignment on GSE_FileFuncLib_LoadFileToArray");
//static_assert(sizeof(GSE_FileFuncLib_LoadFileToArray) == 0x000028, "Wrong size on GSE_FileFuncLib_LoadFileToArray");
//static_assert(offsetof(GSE_FileFuncLib_LoadFileToArray, Path) == 0x000000, "Member 'GSE_FileFuncLib_LoadFileToArray::Path' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_LoadFileToArray, FileData) == 0x000010, "Member 'GSE_FileFuncLib_LoadFileToArray::FileData' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_LoadFileToArray, ReturnValue) == 0x000020, "Member 'GSE_FileFuncLib_LoadFileToArray::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_FileFuncLib.MountAllPakFiles
// 0x0018 (0x0018 - 0x0000)
struct GSE_FileFuncLib_MountAllPakFiles final
{
public:
	TArray<class FString>                         PakFolders;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_FileFuncLib_MountAllPakFiles) == 0x000008, "Wrong alignment on GSE_FileFuncLib_MountAllPakFiles");
//static_assert(sizeof(GSE_FileFuncLib_MountAllPakFiles) == 0x000018, "Wrong size on GSE_FileFuncLib_MountAllPakFiles");
//static_assert(offsetof(GSE_FileFuncLib_MountAllPakFiles, PakFolders) == 0x000000, "Member 'GSE_FileFuncLib_MountAllPakFiles::PakFolders' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_MountAllPakFiles, ReturnValue) == 0x000010, "Member 'GSE_FileFuncLib_MountAllPakFiles::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_FileFuncLib.MountPak
// 0x0018 (0x0018 - 0x0000)
struct GSE_FileFuncLib_MountPak final
{
public:
	class FString                                 InPakFilename;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PakOrder;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_FileFuncLib_MountPak) == 0x000008, "Wrong alignment on GSE_FileFuncLib_MountPak");
//static_assert(sizeof(GSE_FileFuncLib_MountPak) == 0x000018, "Wrong size on GSE_FileFuncLib_MountPak");
//static_assert(offsetof(GSE_FileFuncLib_MountPak, InPakFilename) == 0x000000, "Member 'GSE_FileFuncLib_MountPak::InPakFilename' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_MountPak, PakOrder) == 0x000010, "Member 'GSE_FileFuncLib_MountPak::PakOrder' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_MountPak, ReturnValue) == 0x000014, "Member 'GSE_FileFuncLib_MountPak::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_FileFuncLib.MountPakWithInPath
// 0x0030 (0x0030 - 0x0000)
struct GSE_FileFuncLib_MountPakWithInPath final
{
public:
	class FString                                 InPakFilename;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PakOrder;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InPath;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_FileFuncLib_MountPakWithInPath) == 0x000008, "Wrong alignment on GSE_FileFuncLib_MountPakWithInPath");
//static_assert(sizeof(GSE_FileFuncLib_MountPakWithInPath) == 0x000030, "Wrong size on GSE_FileFuncLib_MountPakWithInPath");
//static_assert(offsetof(GSE_FileFuncLib_MountPakWithInPath, InPakFilename) == 0x000000, "Member 'GSE_FileFuncLib_MountPakWithInPath::InPakFilename' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_MountPakWithInPath, PakOrder) == 0x000010, "Member 'GSE_FileFuncLib_MountPakWithInPath::PakOrder' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_MountPakWithInPath, InPath) == 0x000018, "Member 'GSE_FileFuncLib_MountPakWithInPath::InPath' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_MountPakWithInPath, ReturnValue) == 0x000028, "Member 'GSE_FileFuncLib_MountPakWithInPath::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_FileFuncLib.ReadFile
// 0x0028 (0x0028 - 0x0000)
struct GSE_FileFuncLib_ReadFile final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BytesToRead;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_FileFuncLib_ReadFile) == 0x000008, "Wrong alignment on GSE_FileFuncLib_ReadFile");
//static_assert(sizeof(GSE_FileFuncLib_ReadFile) == 0x000028, "Wrong size on GSE_FileFuncLib_ReadFile");
//static_assert(offsetof(GSE_FileFuncLib_ReadFile, Path) == 0x000000, "Member 'GSE_FileFuncLib_ReadFile::Path' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_ReadFile, BytesToRead) == 0x000010, "Member 'GSE_FileFuncLib_ReadFile::BytesToRead' has a wrong offset!");
//static_assert(offsetof(GSE_FileFuncLib_ReadFile, ReturnValue) == 0x000020, "Member 'GSE_FileFuncLib_ReadFile::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_GamePresetsFuncLib.GetPlatformGamePresets
// 0x0024 (0x0024 - 0x0000)
struct GSE_GamePresetsFuncLib_GetPlatformGamePresets final
{
public:
	struct FGamePresets                           GamePresets;                                       // 0x0000(0x0020)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_GamePresetsFuncLib_GetPlatformGamePresets) == 0x000004, "Wrong alignment on GSE_GamePresetsFuncLib_GetPlatformGamePresets");
//static_assert(sizeof(GSE_GamePresetsFuncLib_GetPlatformGamePresets) == 0x000024, "Wrong size on GSE_GamePresetsFuncLib_GetPlatformGamePresets");
//static_assert(offsetof(GSE_GamePresetsFuncLib_GetPlatformGamePresets, GamePresets) == 0x000000, "Member 'GSE_GamePresetsFuncLib_GetPlatformGamePresets::GamePresets' has a wrong offset!");
//static_assert(offsetof(GSE_GamePresetsFuncLib_GetPlatformGamePresets, ReturnValue) == 0x000020, "Member 'GSE_GamePresetsFuncLib_GetPlatformGamePresets::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_GSGameSettingsFuncLib.ApplyGSGameResolutionSettings
// 0x0001 (0x0001 - 0x0000)
struct GSE_GSGameSettingsFuncLib_ApplyGSGameResolutionSettings final
{
public:
	bool                                          bSaveSettings;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_GSGameSettingsFuncLib_ApplyGSGameResolutionSettings) == 0x000001, "Wrong alignment on GSE_GSGameSettingsFuncLib_ApplyGSGameResolutionSettings");
//static_assert(sizeof(GSE_GSGameSettingsFuncLib_ApplyGSGameResolutionSettings) == 0x000001, "Wrong size on GSE_GSGameSettingsFuncLib_ApplyGSGameResolutionSettings");
//static_assert(offsetof(GSE_GSGameSettingsFuncLib_ApplyGSGameResolutionSettings, bSaveSettings) == 0x000000, "Member 'GSE_GSGameSettingsFuncLib_ApplyGSGameResolutionSettings::bSaveSettings' has a wrong offset!");

// Function UnrealExtent.GSE_GSGameSettingsFuncLib.ApplyGSGameSettings
// 0x0001 (0x0001 - 0x0000)
struct GSE_GSGameSettingsFuncLib_ApplyGSGameSettings final
{
public:
	bool                                          bSaveSettings;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_GSGameSettingsFuncLib_ApplyGSGameSettings) == 0x000001, "Wrong alignment on GSE_GSGameSettingsFuncLib_ApplyGSGameSettings");
//static_assert(sizeof(GSE_GSGameSettingsFuncLib_ApplyGSGameSettings) == 0x000001, "Wrong size on GSE_GSGameSettingsFuncLib_ApplyGSGameSettings");
//static_assert(offsetof(GSE_GSGameSettingsFuncLib_ApplyGSGameSettings, bSaveSettings) == 0x000000, "Member 'GSE_GSGameSettingsFuncLib_ApplyGSGameSettings::bSaveSettings' has a wrong offset!");

// Function UnrealExtent.GSE_GSGameSettingsFuncLib.GetCurGameMainScreen
// 0x0004 (0x0004 - 0x0000)
struct GSE_GSGameSettingsFuncLib_GetCurGameMainScreen final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_GSGameSettingsFuncLib_GetCurGameMainScreen) == 0x000004, "Wrong alignment on GSE_GSGameSettingsFuncLib_GetCurGameMainScreen");
//static_assert(sizeof(GSE_GSGameSettingsFuncLib_GetCurGameMainScreen) == 0x000004, "Wrong size on GSE_GSGameSettingsFuncLib_GetCurGameMainScreen");
//static_assert(offsetof(GSE_GSGameSettingsFuncLib_GetCurGameMainScreen, ReturnValue) == 0x000000, "Member 'GSE_GSGameSettingsFuncLib_GetCurGameMainScreen::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_GSGameSettingsFuncLib.GetDefaultLanguage
// 0x0010 (0x0010 - 0x0000)
struct GSE_GSGameSettingsFuncLib_GetDefaultLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_GSGameSettingsFuncLib_GetDefaultLanguage) == 0x000008, "Wrong alignment on GSE_GSGameSettingsFuncLib_GetDefaultLanguage");
//static_assert(sizeof(GSE_GSGameSettingsFuncLib_GetDefaultLanguage) == 0x000010, "Wrong size on GSE_GSGameSettingsFuncLib_GetDefaultLanguage");
//static_assert(offsetof(GSE_GSGameSettingsFuncLib_GetDefaultLanguage, ReturnValue) == 0x000000, "Member 'GSE_GSGameSettingsFuncLib_GetDefaultLanguage::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_GSGameSettingsFuncLib.GetGRHISupportsRayTracing
// 0x0001 (0x0001 - 0x0000)
struct GSE_GSGameSettingsFuncLib_GetGRHISupportsRayTracing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_GSGameSettingsFuncLib_GetGRHISupportsRayTracing) == 0x000001, "Wrong alignment on GSE_GSGameSettingsFuncLib_GetGRHISupportsRayTracing");
//static_assert(sizeof(GSE_GSGameSettingsFuncLib_GetGRHISupportsRayTracing) == 0x000001, "Wrong size on GSE_GSGameSettingsFuncLib_GetGRHISupportsRayTracing");
//static_assert(offsetof(GSE_GSGameSettingsFuncLib_GetGRHISupportsRayTracing, ReturnValue) == 0x000000, "Member 'GSE_GSGameSettingsFuncLib_GetGRHISupportsRayTracing::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_GSGameSettingsFuncLib.GetIsHDRViewport
// 0x0010 (0x0010 - 0x0000)
struct GSE_GSGameSettingsFuncLib_GetIsHDRViewport final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_GSGameSettingsFuncLib_GetIsHDRViewport) == 0x000008, "Wrong alignment on GSE_GSGameSettingsFuncLib_GetIsHDRViewport");
//static_assert(sizeof(GSE_GSGameSettingsFuncLib_GetIsHDRViewport) == 0x000010, "Wrong size on GSE_GSGameSettingsFuncLib_GetIsHDRViewport");
//static_assert(offsetof(GSE_GSGameSettingsFuncLib_GetIsHDRViewport, World) == 0x000000, "Member 'GSE_GSGameSettingsFuncLib_GetIsHDRViewport::World' has a wrong offset!");
//static_assert(offsetof(GSE_GSGameSettingsFuncLib_GetIsHDRViewport, ReturnValue) == 0x000008, "Member 'GSE_GSGameSettingsFuncLib_GetIsHDRViewport::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_GSGameSettingsFuncLib.GetMainMonitorID
// 0x0010 (0x0010 - 0x0000)
struct GSE_GSGameSettingsFuncLib_GetMainMonitorID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_GSGameSettingsFuncLib_GetMainMonitorID) == 0x000008, "Wrong alignment on GSE_GSGameSettingsFuncLib_GetMainMonitorID");
//static_assert(sizeof(GSE_GSGameSettingsFuncLib_GetMainMonitorID) == 0x000010, "Wrong size on GSE_GSGameSettingsFuncLib_GetMainMonitorID");
//static_assert(offsetof(GSE_GSGameSettingsFuncLib_GetMainMonitorID, ReturnValue) == 0x000000, "Member 'GSE_GSGameSettingsFuncLib_GetMainMonitorID::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_GSGameSettingsFuncLib.GetRHIAdapterName
// 0x0010 (0x0010 - 0x0000)
struct GSE_GSGameSettingsFuncLib_GetRHIAdapterName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_GSGameSettingsFuncLib_GetRHIAdapterName) == 0x000008, "Wrong alignment on GSE_GSGameSettingsFuncLib_GetRHIAdapterName");
//static_assert(sizeof(GSE_GSGameSettingsFuncLib_GetRHIAdapterName) == 0x000010, "Wrong size on GSE_GSGameSettingsFuncLib_GetRHIAdapterName");
//static_assert(offsetof(GSE_GSGameSettingsFuncLib_GetRHIAdapterName, ReturnValue) == 0x000000, "Member 'GSE_GSGameSettingsFuncLib_GetRHIAdapterName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_GSGameSettingsFuncLib.IsLowFeatureLevelGPU
// 0x0001 (0x0001 - 0x0000)
struct GSE_GSGameSettingsFuncLib_IsLowFeatureLevelGPU final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_GSGameSettingsFuncLib_IsLowFeatureLevelGPU) == 0x000001, "Wrong alignment on GSE_GSGameSettingsFuncLib_IsLowFeatureLevelGPU");
//static_assert(sizeof(GSE_GSGameSettingsFuncLib_IsLowFeatureLevelGPU) == 0x000001, "Wrong size on GSE_GSGameSettingsFuncLib_IsLowFeatureLevelGPU");
//static_assert(offsetof(GSE_GSGameSettingsFuncLib_IsLowFeatureLevelGPU, ReturnValue) == 0x000000, "Member 'GSE_GSGameSettingsFuncLib_IsLowFeatureLevelGPU::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_GSGameSettingsFuncLib.SetRayTracingQuality
// 0x0004 (0x0004 - 0x0000)
struct GSE_GSGameSettingsFuncLib_SetRayTracingQuality final
{
public:
	int32                                         RTXLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_GSGameSettingsFuncLib_SetRayTracingQuality) == 0x000004, "Wrong alignment on GSE_GSGameSettingsFuncLib_SetRayTracingQuality");
//static_assert(sizeof(GSE_GSGameSettingsFuncLib_SetRayTracingQuality) == 0x000004, "Wrong size on GSE_GSGameSettingsFuncLib_SetRayTracingQuality");
//static_assert(offsetof(GSE_GSGameSettingsFuncLib_SetRayTracingQuality, RTXLevel) == 0x000000, "Member 'GSE_GSGameSettingsFuncLib_SetRayTracingQuality::RTXLevel' has a wrong offset!");

// Function UnrealExtent.GSE_GSGameSettingsFuncLib.SetXeSSPercentage
// 0x0004 (0x0004 - 0x0000)
struct GSE_GSGameSettingsFuncLib_SetXeSSPercentage final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_GSGameSettingsFuncLib_SetXeSSPercentage) == 0x000004, "Wrong alignment on GSE_GSGameSettingsFuncLib_SetXeSSPercentage");
//static_assert(sizeof(GSE_GSGameSettingsFuncLib_SetXeSSPercentage) == 0x000004, "Wrong size on GSE_GSGameSettingsFuncLib_SetXeSSPercentage");
//static_assert(offsetof(GSE_GSGameSettingsFuncLib_SetXeSSPercentage, Percentage) == 0x000000, "Member 'GSE_GSGameSettingsFuncLib_SetXeSSPercentage::Percentage' has a wrong offset!");

// Function UnrealExtent.GSE_LandscapeFuncLib.AddLocationsToStreamingManager
// 0x0018 (0x0018 - 0x0000)
struct GSE_LandscapeFuncLib_AddLocationsToStreamingManager final
{
public:
	TArray<struct FVector>                        Locations;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_LandscapeFuncLib_AddLocationsToStreamingManager) == 0x000008, "Wrong alignment on GSE_LandscapeFuncLib_AddLocationsToStreamingManager");
//static_assert(sizeof(GSE_LandscapeFuncLib_AddLocationsToStreamingManager) == 0x000018, "Wrong size on GSE_LandscapeFuncLib_AddLocationsToStreamingManager");
//static_assert(offsetof(GSE_LandscapeFuncLib_AddLocationsToStreamingManager, Locations) == 0x000000, "Member 'GSE_LandscapeFuncLib_AddLocationsToStreamingManager::Locations' has a wrong offset!");
//static_assert(offsetof(GSE_LandscapeFuncLib_AddLocationsToStreamingManager, Duration) == 0x000010, "Member 'GSE_LandscapeFuncLib_AddLocationsToStreamingManager::Duration' has a wrong offset!");

// Function UnrealExtent.GSE_LandscapeFuncLib.GetLandscapeOriginOffset
// 0x0020 (0x0020 - 0x0000)
struct GSE_LandscapeFuncLib_GetLandscapeOriginOffset final
{
public:
	class AActor*                                 LandscapeActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_LandscapeFuncLib_GetLandscapeOriginOffset) == 0x000008, "Wrong alignment on GSE_LandscapeFuncLib_GetLandscapeOriginOffset");
//static_assert(sizeof(GSE_LandscapeFuncLib_GetLandscapeOriginOffset) == 0x000020, "Wrong size on GSE_LandscapeFuncLib_GetLandscapeOriginOffset");
//static_assert(offsetof(GSE_LandscapeFuncLib_GetLandscapeOriginOffset, LandscapeActor) == 0x000000, "Member 'GSE_LandscapeFuncLib_GetLandscapeOriginOffset::LandscapeActor' has a wrong offset!");
//static_assert(offsetof(GSE_LandscapeFuncLib_GetLandscapeOriginOffset, ReturnValue) == 0x000008, "Member 'GSE_LandscapeFuncLib_GetLandscapeOriginOffset::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_LandscapeFuncLib.RecreateLandscapeActorByProxy
// 0x0008 (0x0008 - 0x0000)
struct GSE_LandscapeFuncLib_RecreateLandscapeActorByProxy final
{
public:
	class AActor*                                 LandscapeProxy;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_LandscapeFuncLib_RecreateLandscapeActorByProxy) == 0x000008, "Wrong alignment on GSE_LandscapeFuncLib_RecreateLandscapeActorByProxy");
//static_assert(sizeof(GSE_LandscapeFuncLib_RecreateLandscapeActorByProxy) == 0x000008, "Wrong size on GSE_LandscapeFuncLib_RecreateLandscapeActorByProxy");
//static_assert(offsetof(GSE_LandscapeFuncLib_RecreateLandscapeActorByProxy, LandscapeProxy) == 0x000000, "Member 'GSE_LandscapeFuncLib_RecreateLandscapeActorByProxy::LandscapeProxy' has a wrong offset!");

// Function UnrealExtent.GSE_LandscapeFuncLib.SaveLandscapeLayerWeightTex
// 0x0040 (0x0040 - 0x0000)
struct GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex final
{
public:
	class FString                                 PackagePath;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LandscapeActor;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LayerName;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex) == 0x000008, "Wrong alignment on GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex");
//static_assert(sizeof(GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex) == 0x000040, "Wrong size on GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex");
//static_assert(offsetof(GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex, PackagePath) == 0x000000, "Member 'GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex::PackagePath' has a wrong offset!");
//static_assert(offsetof(GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex, AssetName) == 0x000010, "Member 'GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex::AssetName' has a wrong offset!");
//static_assert(offsetof(GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex, LandscapeActor) == 0x000020, "Member 'GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex::LandscapeActor' has a wrong offset!");
//static_assert(offsetof(GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex, LayerName) == 0x000028, "Member 'GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex::LayerName' has a wrong offset!");
//static_assert(offsetof(GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex, ReturnValue) == 0x000038, "Member 'GSE_LandscapeFuncLib_SaveLandscapeLayerWeightTex::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_LandscapeFuncLib.SaveLandscapeWeight
// 0x0030 (0x0030 - 0x0000)
struct GSE_LandscapeFuncLib_SaveLandscapeWeight final
{
public:
	class FString                                 PackagePath;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LandscapeActor;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_LandscapeFuncLib_SaveLandscapeWeight) == 0x000008, "Wrong alignment on GSE_LandscapeFuncLib_SaveLandscapeWeight");
//static_assert(sizeof(GSE_LandscapeFuncLib_SaveLandscapeWeight) == 0x000030, "Wrong size on GSE_LandscapeFuncLib_SaveLandscapeWeight");
//static_assert(offsetof(GSE_LandscapeFuncLib_SaveLandscapeWeight, PackagePath) == 0x000000, "Member 'GSE_LandscapeFuncLib_SaveLandscapeWeight::PackagePath' has a wrong offset!");
//static_assert(offsetof(GSE_LandscapeFuncLib_SaveLandscapeWeight, LandscapeActor) == 0x000010, "Member 'GSE_LandscapeFuncLib_SaveLandscapeWeight::LandscapeActor' has a wrong offset!");
//static_assert(offsetof(GSE_LandscapeFuncLib_SaveLandscapeWeight, ReturnValue) == 0x000018, "Member 'GSE_LandscapeFuncLib_SaveLandscapeWeight::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_NavigationFuncLib.SetCollisionNavAreaClass
// 0x0010 (0x0010 - 0x0000)
struct GSE_NavigationFuncLib_SetCollisionNavAreaClass final
{
public:
	class UShapeComponent*                        Collision;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavAreaBase>               AreaClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_NavigationFuncLib_SetCollisionNavAreaClass) == 0x000008, "Wrong alignment on GSE_NavigationFuncLib_SetCollisionNavAreaClass");
//static_assert(sizeof(GSE_NavigationFuncLib_SetCollisionNavAreaClass) == 0x000010, "Wrong size on GSE_NavigationFuncLib_SetCollisionNavAreaClass");
//static_assert(offsetof(GSE_NavigationFuncLib_SetCollisionNavAreaClass, Collision) == 0x000000, "Member 'GSE_NavigationFuncLib_SetCollisionNavAreaClass::Collision' has a wrong offset!");
//static_assert(offsetof(GSE_NavigationFuncLib_SetCollisionNavAreaClass, AreaClass) == 0x000008, "Member 'GSE_NavigationFuncLib_SetCollisionNavAreaClass::AreaClass' has a wrong offset!");

// Function UnrealExtent.GSE_NavigationFuncLib.SetCollisionNavDynamicObstacle
// 0x0010 (0x0010 - 0x0000)
struct GSE_NavigationFuncLib_SetCollisionNavDynamicObstacle final
{
public:
	class UShapeComponent*                        Collision;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDynamicObstacle;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_NavigationFuncLib_SetCollisionNavDynamicObstacle) == 0x000008, "Wrong alignment on GSE_NavigationFuncLib_SetCollisionNavDynamicObstacle");
//static_assert(sizeof(GSE_NavigationFuncLib_SetCollisionNavDynamicObstacle) == 0x000010, "Wrong size on GSE_NavigationFuncLib_SetCollisionNavDynamicObstacle");
//static_assert(offsetof(GSE_NavigationFuncLib_SetCollisionNavDynamicObstacle, Collision) == 0x000000, "Member 'GSE_NavigationFuncLib_SetCollisionNavDynamicObstacle::Collision' has a wrong offset!");
//static_assert(offsetof(GSE_NavigationFuncLib_SetCollisionNavDynamicObstacle, bDynamicObstacle) == 0x000008, "Member 'GSE_NavigationFuncLib_SetCollisionNavDynamicObstacle::bDynamicObstacle' has a wrong offset!");

// Function UnrealExtent.GSE_NiagaraFuncLib.ForceDestroyNiagaraComponent
// 0x0008 (0x0008 - 0x0000)
struct GSE_NiagaraFuncLib_ForceDestroyNiagaraComponent final
{
public:
	class UNiagaraComponent*                      NC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_NiagaraFuncLib_ForceDestroyNiagaraComponent) == 0x000008, "Wrong alignment on GSE_NiagaraFuncLib_ForceDestroyNiagaraComponent");
//static_assert(sizeof(GSE_NiagaraFuncLib_ForceDestroyNiagaraComponent) == 0x000008, "Wrong size on GSE_NiagaraFuncLib_ForceDestroyNiagaraComponent");
//static_assert(offsetof(GSE_NiagaraFuncLib_ForceDestroyNiagaraComponent, NC) == 0x000000, "Member 'GSE_NiagaraFuncLib_ForceDestroyNiagaraComponent::NC' has a wrong offset!");

// Function UnrealExtent.GSE_NiagaraFuncLib.GetNiagaraComponentPoolMethod
// 0x0010 (0x0010 - 0x0000)
struct GSE_NiagaraFuncLib_GetNiagaraComponentPoolMethod final
{
public:
	class UNiagaraComponent*                      NC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENCPoolMethod                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_NiagaraFuncLib_GetNiagaraComponentPoolMethod) == 0x000008, "Wrong alignment on GSE_NiagaraFuncLib_GetNiagaraComponentPoolMethod");
//static_assert(sizeof(GSE_NiagaraFuncLib_GetNiagaraComponentPoolMethod) == 0x000010, "Wrong size on GSE_NiagaraFuncLib_GetNiagaraComponentPoolMethod");
//static_assert(offsetof(GSE_NiagaraFuncLib_GetNiagaraComponentPoolMethod, NC) == 0x000000, "Member 'GSE_NiagaraFuncLib_GetNiagaraComponentPoolMethod::NC' has a wrong offset!");
//static_assert(offsetof(GSE_NiagaraFuncLib_GetNiagaraComponentPoolMethod, ReturnValue) == 0x000008, "Member 'GSE_NiagaraFuncLib_GetNiagaraComponentPoolMethod::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_NiagaraFuncLib.SetEffectTypeManagerState
// 0x0001 (0x0001 - 0x0000)
struct GSE_NiagaraFuncLib_SetEffectTypeManagerState final
{
public:
	EEffectTypeManagerCullMode                    NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_NiagaraFuncLib_SetEffectTypeManagerState) == 0x000001, "Wrong alignment on GSE_NiagaraFuncLib_SetEffectTypeManagerState");
//static_assert(sizeof(GSE_NiagaraFuncLib_SetEffectTypeManagerState) == 0x000001, "Wrong size on GSE_NiagaraFuncLib_SetEffectTypeManagerState");
//static_assert(offsetof(GSE_NiagaraFuncLib_SetEffectTypeManagerState, NewMode) == 0x000000, "Member 'GSE_NiagaraFuncLib_SetEffectTypeManagerState::NewMode' has a wrong offset!");

// Function UnrealExtent.GSE_NiagaraFuncLib.SetTextureParameterValueOnMeshRenderMaterials
// 0x0018 (0x0018 - 0x0000)
struct GSE_NiagaraFuncLib_SetTextureParameterValueOnMeshRenderMaterials final
{
public:
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ParameterValue;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_NiagaraFuncLib_SetTextureParameterValueOnMeshRenderMaterials) == 0x000008, "Wrong alignment on GSE_NiagaraFuncLib_SetTextureParameterValueOnMeshRenderMaterials");
//static_assert(sizeof(GSE_NiagaraFuncLib_SetTextureParameterValueOnMeshRenderMaterials) == 0x000018, "Wrong size on GSE_NiagaraFuncLib_SetTextureParameterValueOnMeshRenderMaterials");
//static_assert(offsetof(GSE_NiagaraFuncLib_SetTextureParameterValueOnMeshRenderMaterials, NiagaraComponent) == 0x000000, "Member 'GSE_NiagaraFuncLib_SetTextureParameterValueOnMeshRenderMaterials::NiagaraComponent' has a wrong offset!");
//static_assert(offsetof(GSE_NiagaraFuncLib_SetTextureParameterValueOnMeshRenderMaterials, ParameterName) == 0x000008, "Member 'GSE_NiagaraFuncLib_SetTextureParameterValueOnMeshRenderMaterials::ParameterName' has a wrong offset!");
//static_assert(offsetof(GSE_NiagaraFuncLib_SetTextureParameterValueOnMeshRenderMaterials, ParameterValue) == 0x000010, "Member 'GSE_NiagaraFuncLib_SetTextureParameterValueOnMeshRenderMaterials::ParameterValue' has a wrong offset!");

// Function UnrealExtent.GSE_SaveGameFuncLib.GetAllSaveGameSlotNames
// 0x0010 (0x0010 - 0x0000)
struct GSE_SaveGameFuncLib_GetAllSaveGameSlotNames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SaveGameFuncLib_GetAllSaveGameSlotNames) == 0x000008, "Wrong alignment on GSE_SaveGameFuncLib_GetAllSaveGameSlotNames");
//static_assert(sizeof(GSE_SaveGameFuncLib_GetAllSaveGameSlotNames) == 0x000010, "Wrong size on GSE_SaveGameFuncLib_GetAllSaveGameSlotNames");
//static_assert(offsetof(GSE_SaveGameFuncLib_GetAllSaveGameSlotNames, ReturnValue) == 0x000000, "Member 'GSE_SaveGameFuncLib_GetAllSaveGameSlotNames::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SaveGameFuncLib.LoadDataFromSlot
// 0x0028 (0x0028 - 0x0000)
struct GSE_SaveGameFuncLib_LoadDataFromSlot final
{
public:
	TArray<uint8>                                 OutSaveData;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 SlotName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SaveGameFuncLib_LoadDataFromSlot) == 0x000008, "Wrong alignment on GSE_SaveGameFuncLib_LoadDataFromSlot");
//static_assert(sizeof(GSE_SaveGameFuncLib_LoadDataFromSlot) == 0x000028, "Wrong size on GSE_SaveGameFuncLib_LoadDataFromSlot");
//static_assert(offsetof(GSE_SaveGameFuncLib_LoadDataFromSlot, OutSaveData) == 0x000000, "Member 'GSE_SaveGameFuncLib_LoadDataFromSlot::OutSaveData' has a wrong offset!");
//static_assert(offsetof(GSE_SaveGameFuncLib_LoadDataFromSlot, SlotName) == 0x000010, "Member 'GSE_SaveGameFuncLib_LoadDataFromSlot::SlotName' has a wrong offset!");
//static_assert(offsetof(GSE_SaveGameFuncLib_LoadDataFromSlot, UserIndex) == 0x000020, "Member 'GSE_SaveGameFuncLib_LoadDataFromSlot::UserIndex' has a wrong offset!");
//static_assert(offsetof(GSE_SaveGameFuncLib_LoadDataFromSlot, ReturnValue) == 0x000024, "Member 'GSE_SaveGameFuncLib_LoadDataFromSlot::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SaveGameFuncLib.SaveDataToSlot
// 0x0028 (0x0028 - 0x0000)
struct GSE_SaveGameFuncLib_SaveDataToSlot final
{
public:
	TArray<uint8>                                 InSaveData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 SlotName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SaveGameFuncLib_SaveDataToSlot) == 0x000008, "Wrong alignment on GSE_SaveGameFuncLib_SaveDataToSlot");
//static_assert(sizeof(GSE_SaveGameFuncLib_SaveDataToSlot) == 0x000028, "Wrong size on GSE_SaveGameFuncLib_SaveDataToSlot");
//static_assert(offsetof(GSE_SaveGameFuncLib_SaveDataToSlot, InSaveData) == 0x000000, "Member 'GSE_SaveGameFuncLib_SaveDataToSlot::InSaveData' has a wrong offset!");
//static_assert(offsetof(GSE_SaveGameFuncLib_SaveDataToSlot, SlotName) == 0x000010, "Member 'GSE_SaveGameFuncLib_SaveDataToSlot::SlotName' has a wrong offset!");
//static_assert(offsetof(GSE_SaveGameFuncLib_SaveDataToSlot, UserIndex) == 0x000020, "Member 'GSE_SaveGameFuncLib_SaveDataToSlot::UserIndex' has a wrong offset!");
//static_assert(offsetof(GSE_SaveGameFuncLib_SaveDataToSlot, ReturnValue) == 0x000024, "Member 'GSE_SaveGameFuncLib_SaveDataToSlot::ReturnValue' has a wrong offset!");

// Function UnrealExtent.HttpResposeListener.OnReponseComplete
// 0x0018 (0x0018 - 0x0000)
struct HttpResposeListener_OnReponseComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HttpCode;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Content;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(HttpResposeListener_OnReponseComplete) == 0x000008, "Wrong alignment on HttpResposeListener_OnReponseComplete");
//static_assert(sizeof(HttpResposeListener_OnReponseComplete) == 0x000018, "Wrong size on HttpResposeListener_OnReponseComplete");
//static_assert(offsetof(HttpResposeListener_OnReponseComplete, bSuccess) == 0x000000, "Member 'HttpResposeListener_OnReponseComplete::bSuccess' has a wrong offset!");
//static_assert(offsetof(HttpResposeListener_OnReponseComplete, HttpCode) == 0x000004, "Member 'HttpResposeListener_OnReponseComplete::HttpCode' has a wrong offset!");
//static_assert(offsetof(HttpResposeListener_OnReponseComplete, Content) == 0x000008, "Member 'HttpResposeListener_OnReponseComplete::Content' has a wrong offset!");

// Function UnrealExtent.HttpResposeListener.OnRequestProgress
// 0x000C (0x000C - 0x0000)
struct HttpResposeListener_OnRequestProgress final
{
public:
	int32                                         SentBytes;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LReceivedBytes;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LTotalBytes;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(HttpResposeListener_OnRequestProgress) == 0x000004, "Wrong alignment on HttpResposeListener_OnRequestProgress");
//static_assert(sizeof(HttpResposeListener_OnRequestProgress) == 0x00000C, "Wrong size on HttpResposeListener_OnRequestProgress");
//static_assert(offsetof(HttpResposeListener_OnRequestProgress, SentBytes) == 0x000000, "Member 'HttpResposeListener_OnRequestProgress::SentBytes' has a wrong offset!");
//static_assert(offsetof(HttpResposeListener_OnRequestProgress, LReceivedBytes) == 0x000004, "Member 'HttpResposeListener_OnRequestProgress::LReceivedBytes' has a wrong offset!");
//static_assert(offsetof(HttpResposeListener_OnRequestProgress, LTotalBytes) == 0x000008, "Member 'HttpResposeListener_OnRequestProgress::LTotalBytes' has a wrong offset!");

// Function UnrealExtent.HttpResposeListener.IsNeedProgress
// 0x0001 (0x0001 - 0x0000)
struct HttpResposeListener_IsNeedProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(HttpResposeListener_IsNeedProgress) == 0x000001, "Wrong alignment on HttpResposeListener_IsNeedProgress");
//static_assert(sizeof(HttpResposeListener_IsNeedProgress) == 0x000001, "Wrong size on HttpResposeListener_IsNeedProgress");
//static_assert(offsetof(HttpResposeListener_IsNeedProgress, ReturnValue) == 0x000000, "Member 'HttpResposeListener_IsNeedProgress::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.AddCrashUserData
// 0x0028 (0x0028 - 0x0000)
struct GSE_SDKFuncLib_AddCrashUserData final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SDKFuncLib_AddCrashUserData) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_AddCrashUserData");
//static_assert(sizeof(GSE_SDKFuncLib_AddCrashUserData) == 0x000028, "Wrong size on GSE_SDKFuncLib_AddCrashUserData");
//static_assert(offsetof(GSE_SDKFuncLib_AddCrashUserData, Key) == 0x000000, "Member 'GSE_SDKFuncLib_AddCrashUserData::Key' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_AddCrashUserData, Value) == 0x000010, "Member 'GSE_SDKFuncLib_AddCrashUserData::Value' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_AddCrashUserData, ReturnValue) == 0x000020, "Member 'GSE_SDKFuncLib_AddCrashUserData::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.FCommandLine_AddArg
// 0x0010 (0x0010 - 0x0000)
struct GSE_SDKFuncLib_FCommandLine_AddArg final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_FCommandLine_AddArg) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_FCommandLine_AddArg");
//static_assert(sizeof(GSE_SDKFuncLib_FCommandLine_AddArg) == 0x000010, "Wrong size on GSE_SDKFuncLib_FCommandLine_AddArg");
//static_assert(offsetof(GSE_SDKFuncLib_FCommandLine_AddArg, Command) == 0x000000, "Member 'GSE_SDKFuncLib_FCommandLine_AddArg::Command' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.FCommandLine_Get
// 0x0010 (0x0010 - 0x0000)
struct GSE_SDKFuncLib_FCommandLine_Get final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_FCommandLine_Get) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_FCommandLine_Get");
//static_assert(sizeof(GSE_SDKFuncLib_FCommandLine_Get) == 0x000010, "Wrong size on GSE_SDKFuncLib_FCommandLine_Get");
//static_assert(offsetof(GSE_SDKFuncLib_FCommandLine_Get, ReturnValue) == 0x000000, "Member 'GSE_SDKFuncLib_FCommandLine_Get::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.GetGameRunEnvContext
// 0x0050 (0x0050 - 0x0000)
struct GSE_SDKFuncLib_GetGameRunEnvContext final
{
public:
	TMap<class FString, class FString>            OutContext;                                        // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_GetGameRunEnvContext) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_GetGameRunEnvContext");
//static_assert(sizeof(GSE_SDKFuncLib_GetGameRunEnvContext) == 0x000050, "Wrong size on GSE_SDKFuncLib_GetGameRunEnvContext");
//static_assert(offsetof(GSE_SDKFuncLib_GetGameRunEnvContext, OutContext) == 0x000000, "Member 'GSE_SDKFuncLib_GetGameRunEnvContext::OutContext' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.GetIOSBundlePath
// 0x0010 (0x0010 - 0x0000)
struct GSE_SDKFuncLib_GetIOSBundlePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_GetIOSBundlePath) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_GetIOSBundlePath");
//static_assert(sizeof(GSE_SDKFuncLib_GetIOSBundlePath) == 0x000010, "Wrong size on GSE_SDKFuncLib_GetIOSBundlePath");
//static_assert(offsetof(GSE_SDKFuncLib_GetIOSBundlePath, ReturnValue) == 0x000000, "Member 'GSE_SDKFuncLib_GetIOSBundlePath::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.GetIOSDocumentPath
// 0x0010 (0x0010 - 0x0000)
struct GSE_SDKFuncLib_GetIOSDocumentPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_GetIOSDocumentPath) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_GetIOSDocumentPath");
//static_assert(sizeof(GSE_SDKFuncLib_GetIOSDocumentPath) == 0x000010, "Wrong size on GSE_SDKFuncLib_GetIOSDocumentPath");
//static_assert(offsetof(GSE_SDKFuncLib_GetIOSDocumentPath, ReturnValue) == 0x000000, "Member 'GSE_SDKFuncLib_GetIOSDocumentPath::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.GetNatInfo
// 0x0001 (0x0001 - 0x0000)
struct GSE_SDKFuncLib_GetNatInfo final
{
public:
	EBGWNATType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_GetNatInfo) == 0x000001, "Wrong alignment on GSE_SDKFuncLib_GetNatInfo");
//static_assert(sizeof(GSE_SDKFuncLib_GetNatInfo) == 0x000001, "Wrong size on GSE_SDKFuncLib_GetNatInfo");
//static_assert(offsetof(GSE_SDKFuncLib_GetNatInfo, ReturnValue) == 0x000000, "Member 'GSE_SDKFuncLib_GetNatInfo::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.GetPS5UserAccountRegionCode
// 0x0010 (0x0010 - 0x0000)
struct GSE_SDKFuncLib_GetPS5UserAccountRegionCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_GetPS5UserAccountRegionCode) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_GetPS5UserAccountRegionCode");
//static_assert(sizeof(GSE_SDKFuncLib_GetPS5UserAccountRegionCode) == 0x000010, "Wrong size on GSE_SDKFuncLib_GetPS5UserAccountRegionCode");
//static_assert(offsetof(GSE_SDKFuncLib_GetPS5UserAccountRegionCode, ReturnValue) == 0x000000, "Member 'GSE_SDKFuncLib_GetPS5UserAccountRegionCode::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.GetPS5UserDefinedParam
// 0x0008 (0x0008 - 0x0000)
struct GSE_SDKFuncLib_GetPS5UserDefinedParam final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_GetPS5UserDefinedParam) == 0x000004, "Wrong alignment on GSE_SDKFuncLib_GetPS5UserDefinedParam");
//static_assert(sizeof(GSE_SDKFuncLib_GetPS5UserDefinedParam) == 0x000008, "Wrong size on GSE_SDKFuncLib_GetPS5UserDefinedParam");
//static_assert(offsetof(GSE_SDKFuncLib_GetPS5UserDefinedParam, Index_0) == 0x000000, "Member 'GSE_SDKFuncLib_GetPS5UserDefinedParam::Index_0' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_GetPS5UserDefinedParam, ReturnValue) == 0x000004, "Member 'GSE_SDKFuncLib_GetPS5UserDefinedParam::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.HttpPostFile
// 0x0080 (0x0080 - 0x0000)
struct GSE_SDKFuncLib_HttpPostFile final
{
public:
	class FString                                 PostUrl;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExHeaders;                                         // 0x0010(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHttpResposeListener*                   Listener;                                          // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SDKFuncLib_HttpPostFile) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_HttpPostFile");
//static_assert(sizeof(GSE_SDKFuncLib_HttpPostFile) == 0x000080, "Wrong size on GSE_SDKFuncLib_HttpPostFile");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFile, PostUrl) == 0x000000, "Member 'GSE_SDKFuncLib_HttpPostFile::PostUrl' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFile, ExHeaders) == 0x000010, "Member 'GSE_SDKFuncLib_HttpPostFile::ExHeaders' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFile, FilePath) == 0x000060, "Member 'GSE_SDKFuncLib_HttpPostFile::FilePath' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFile, Listener) == 0x000070, "Member 'GSE_SDKFuncLib_HttpPostFile::Listener' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFile, ReturnValue) == 0x000078, "Member 'GSE_SDKFuncLib_HttpPostFile::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.HttpPostFileContent
// 0x0090 (0x0090 - 0x0000)
struct GSE_SDKFuncLib_HttpPostFileContent final
{
public:
	class FString                                 PostUrl;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExHeaders;                                         // 0x0010(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 FileContentData;                                   // 0x0070(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UHttpResposeListener*                   Listener;                                          // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SDKFuncLib_HttpPostFileContent) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_HttpPostFileContent");
//static_assert(sizeof(GSE_SDKFuncLib_HttpPostFileContent) == 0x000090, "Wrong size on GSE_SDKFuncLib_HttpPostFileContent");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFileContent, PostUrl) == 0x000000, "Member 'GSE_SDKFuncLib_HttpPostFileContent::PostUrl' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFileContent, ExHeaders) == 0x000010, "Member 'GSE_SDKFuncLib_HttpPostFileContent::ExHeaders' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFileContent, Filename) == 0x000060, "Member 'GSE_SDKFuncLib_HttpPostFileContent::Filename' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFileContent, FileContentData) == 0x000070, "Member 'GSE_SDKFuncLib_HttpPostFileContent::FileContentData' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFileContent, Listener) == 0x000080, "Member 'GSE_SDKFuncLib_HttpPostFileContent::Listener' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFileContent, ReturnValue) == 0x000088, "Member 'GSE_SDKFuncLib_HttpPostFileContent::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.HttpPostFileList
// 0x0080 (0x0080 - 0x0000)
struct GSE_SDKFuncLib_HttpPostFileList final
{
public:
	class FString                                 PostUrl;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExHeaders;                                         // 0x0010(0x0050)(Parm, NativeAccessSpecifierPublic)
	TArray<class FString>                         FilePathList;                                      // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UHttpResposeListener*                   Listener;                                          // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SDKFuncLib_HttpPostFileList) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_HttpPostFileList");
//static_assert(sizeof(GSE_SDKFuncLib_HttpPostFileList) == 0x000080, "Wrong size on GSE_SDKFuncLib_HttpPostFileList");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFileList, PostUrl) == 0x000000, "Member 'GSE_SDKFuncLib_HttpPostFileList::PostUrl' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFileList, ExHeaders) == 0x000010, "Member 'GSE_SDKFuncLib_HttpPostFileList::ExHeaders' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFileList, FilePathList) == 0x000060, "Member 'GSE_SDKFuncLib_HttpPostFileList::FilePathList' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFileList, Listener) == 0x000070, "Member 'GSE_SDKFuncLib_HttpPostFileList::Listener' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_HttpPostFileList, ReturnValue) == 0x000078, "Member 'GSE_SDKFuncLib_HttpPostFileList::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.IsCleanVersion
// 0x0001 (0x0001 - 0x0000)
struct GSE_SDKFuncLib_IsCleanVersion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_IsCleanVersion) == 0x000001, "Wrong alignment on GSE_SDKFuncLib_IsCleanVersion");
//static_assert(sizeof(GSE_SDKFuncLib_IsCleanVersion) == 0x000001, "Wrong size on GSE_SDKFuncLib_IsCleanVersion");
//static_assert(offsetof(GSE_SDKFuncLib_IsCleanVersion, ReturnValue) == 0x000000, "Member 'GSE_SDKFuncLib_IsCleanVersion::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.IsPureVersion
// 0x0001 (0x0001 - 0x0000)
struct GSE_SDKFuncLib_IsPureVersion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_IsPureVersion) == 0x000001, "Wrong alignment on GSE_SDKFuncLib_IsPureVersion");
//static_assert(sizeof(GSE_SDKFuncLib_IsPureVersion) == 0x000001, "Wrong size on GSE_SDKFuncLib_IsPureVersion");
//static_assert(offsetof(GSE_SDKFuncLib_IsPureVersion, ReturnValue) == 0x000000, "Member 'GSE_SDKFuncLib_IsPureVersion::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.NonGameThreadStartHttpRawDataRequestWithBlockMode
// 0x00E0 (0x00E0 - 0x0000)
struct GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Method;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExHeaders;                                         // 0x0020(0x0050)(Parm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 PostRawData;                                       // 0x0070(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RequestTimeout;                                    // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            OutResponse;                                       // 0x0088(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00D8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode");
//static_assert(sizeof(GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode) == 0x0000E0, "Wrong size on GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode");
//static_assert(offsetof(GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode, URL) == 0x000000, "Member 'GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode::URL' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode, Method) == 0x000010, "Member 'GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode::Method' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode, ExHeaders) == 0x000020, "Member 'GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode::ExHeaders' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode, PostRawData) == 0x000070, "Member 'GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode::PostRawData' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode, RequestTimeout) == 0x000080, "Member 'GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode::RequestTimeout' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode, OutResponse) == 0x000088, "Member 'GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode::OutResponse' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode, ReturnValue) == 0x0000D8, "Member 'GSE_SDKFuncLib_NonGameThreadStartHttpRawDataRequestWithBlockMode::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.PostException
// 0x0040 (0x0040 - 0x0000)
struct GSE_SDKFuncLib_PostException final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StackTrace;                                        // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SDKFuncLib_PostException) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_PostException");
//static_assert(sizeof(GSE_SDKFuncLib_PostException) == 0x000040, "Wrong size on GSE_SDKFuncLib_PostException");
//static_assert(offsetof(GSE_SDKFuncLib_PostException, Type) == 0x000000, "Member 'GSE_SDKFuncLib_PostException::Type' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_PostException, Name_0) == 0x000008, "Member 'GSE_SDKFuncLib_PostException::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_PostException, Message) == 0x000018, "Member 'GSE_SDKFuncLib_PostException::Message' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_PostException, StackTrace) == 0x000028, "Member 'GSE_SDKFuncLib_PostException::StackTrace' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_PostException, ReturnValue) == 0x000038, "Member 'GSE_SDKFuncLib_PostException::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.PostExceptionSample
// 0x0018 (0x0018 - 0x0000)
struct GSE_SDKFuncLib_PostExceptionSample final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SDKFuncLib_PostExceptionSample) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_PostExceptionSample");
//static_assert(sizeof(GSE_SDKFuncLib_PostExceptionSample) == 0x000018, "Wrong size on GSE_SDKFuncLib_PostExceptionSample");
//static_assert(offsetof(GSE_SDKFuncLib_PostExceptionSample, Message) == 0x000000, "Member 'GSE_SDKFuncLib_PostExceptionSample::Message' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_PostExceptionSample, ReturnValue) == 0x000010, "Member 'GSE_SDKFuncLib_PostExceptionSample::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.SentryCrashReporterSetContext
// 0x0060 (0x0060 - 0x0000)
struct GSE_SDKFuncLib_SentryCrashReporterSetContext final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ContextValues;                                     // 0x0010(0x0050)(Parm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_SentryCrashReporterSetContext) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_SentryCrashReporterSetContext");
//static_assert(sizeof(GSE_SDKFuncLib_SentryCrashReporterSetContext) == 0x000060, "Wrong size on GSE_SDKFuncLib_SentryCrashReporterSetContext");
//static_assert(offsetof(GSE_SDKFuncLib_SentryCrashReporterSetContext, Key) == 0x000000, "Member 'GSE_SDKFuncLib_SentryCrashReporterSetContext::Key' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_SentryCrashReporterSetContext, ContextValues) == 0x000010, "Member 'GSE_SDKFuncLib_SentryCrashReporterSetContext::ContextValues' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.SentryCrashReporterSetRoot
// 0x0020 (0x0020 - 0x0000)
struct GSE_SDKFuncLib_SentryCrashReporterSetRoot final
{
public:
	class FString                                 RootKey;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RootValue;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_SentryCrashReporterSetRoot) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_SentryCrashReporterSetRoot");
//static_assert(sizeof(GSE_SDKFuncLib_SentryCrashReporterSetRoot) == 0x000020, "Wrong size on GSE_SDKFuncLib_SentryCrashReporterSetRoot");
//static_assert(offsetof(GSE_SDKFuncLib_SentryCrashReporterSetRoot, RootKey) == 0x000000, "Member 'GSE_SDKFuncLib_SentryCrashReporterSetRoot::RootKey' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_SentryCrashReporterSetRoot, RootValue) == 0x000010, "Member 'GSE_SDKFuncLib_SentryCrashReporterSetRoot::RootValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.SentryCrashReporterSetTag
// 0x0020 (0x0020 - 0x0000)
struct GSE_SDKFuncLib_SentryCrashReporterSetTag final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_SentryCrashReporterSetTag) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_SentryCrashReporterSetTag");
//static_assert(sizeof(GSE_SDKFuncLib_SentryCrashReporterSetTag) == 0x000020, "Wrong size on GSE_SDKFuncLib_SentryCrashReporterSetTag");
//static_assert(offsetof(GSE_SDKFuncLib_SentryCrashReporterSetTag, Key) == 0x000000, "Member 'GSE_SDKFuncLib_SentryCrashReporterSetTag::Key' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_SentryCrashReporterSetTag, Value) == 0x000010, "Member 'GSE_SDKFuncLib_SentryCrashReporterSetTag::Value' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.SentryCrashReporterSetUser
// 0x0020 (0x0020 - 0x0000)
struct GSE_SDKFuncLib_SentryCrashReporterSetUser final
{
public:
	class FString                                 UserKey;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserValue;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_SentryCrashReporterSetUser) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_SentryCrashReporterSetUser");
//static_assert(sizeof(GSE_SDKFuncLib_SentryCrashReporterSetUser) == 0x000020, "Wrong size on GSE_SDKFuncLib_SentryCrashReporterSetUser");
//static_assert(offsetof(GSE_SDKFuncLib_SentryCrashReporterSetUser, UserKey) == 0x000000, "Member 'GSE_SDKFuncLib_SentryCrashReporterSetUser::UserKey' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_SentryCrashReporterSetUser, UserValue) == 0x000010, "Member 'GSE_SDKFuncLib_SentryCrashReporterSetUser::UserValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.SetAppIsAutoTestingMode
// 0x0004 (0x0004 - 0x0000)
struct GSE_SDKFuncLib_SetAppIsAutoTestingMode final
{
public:
	int32                                         bEnable;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_SetAppIsAutoTestingMode) == 0x000004, "Wrong alignment on GSE_SDKFuncLib_SetAppIsAutoTestingMode");
//static_assert(sizeof(GSE_SDKFuncLib_SetAppIsAutoTestingMode) == 0x000004, "Wrong size on GSE_SDKFuncLib_SetAppIsAutoTestingMode");
//static_assert(offsetof(GSE_SDKFuncLib_SetAppIsAutoTestingMode, bEnable) == 0x000000, "Member 'GSE_SDKFuncLib_SetAppIsAutoTestingMode::bEnable' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.SetBuglyUserMap
// 0x0028 (0x0028 - 0x0000)
struct GSE_SDKFuncLib_SetBuglyUserMap final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SDKFuncLib_SetBuglyUserMap) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_SetBuglyUserMap");
//static_assert(sizeof(GSE_SDKFuncLib_SetBuglyUserMap) == 0x000028, "Wrong size on GSE_SDKFuncLib_SetBuglyUserMap");
//static_assert(offsetof(GSE_SDKFuncLib_SetBuglyUserMap, Key) == 0x000000, "Member 'GSE_SDKFuncLib_SetBuglyUserMap::Key' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_SetBuglyUserMap, Value) == 0x000010, "Member 'GSE_SDKFuncLib_SetBuglyUserMap::Value' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_SetBuglyUserMap, ReturnValue) == 0x000020, "Member 'GSE_SDKFuncLib_SetBuglyUserMap::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.SetCrashReportClientEnable
// 0x0004 (0x0004 - 0x0000)
struct GSE_SDKFuncLib_SetCrashReportClientEnable final
{
public:
	int32                                         bEnable;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SDKFuncLib_SetCrashReportClientEnable) == 0x000004, "Wrong alignment on GSE_SDKFuncLib_SetCrashReportClientEnable");
//static_assert(sizeof(GSE_SDKFuncLib_SetCrashReportClientEnable) == 0x000004, "Wrong size on GSE_SDKFuncLib_SetCrashReportClientEnable");
//static_assert(offsetof(GSE_SDKFuncLib_SetCrashReportClientEnable, bEnable) == 0x000000, "Member 'GSE_SDKFuncLib_SetCrashReportClientEnable::bEnable' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.StartHttpBase64DataRequest
// 0x0090 (0x0090 - 0x0000)
struct GSE_SDKFuncLib_StartHttpBase64DataRequest final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Method;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExHeaders;                                         // 0x0020(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Base64PostData;                                    // 0x0070(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHttpResposeListener*                   Listener;                                          // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestTimeout;                                    // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x008C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SDKFuncLib_StartHttpBase64DataRequest) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_StartHttpBase64DataRequest");
//static_assert(sizeof(GSE_SDKFuncLib_StartHttpBase64DataRequest) == 0x000090, "Wrong size on GSE_SDKFuncLib_StartHttpBase64DataRequest");
//static_assert(offsetof(GSE_SDKFuncLib_StartHttpBase64DataRequest, URL) == 0x000000, "Member 'GSE_SDKFuncLib_StartHttpBase64DataRequest::URL' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_StartHttpBase64DataRequest, Method) == 0x000010, "Member 'GSE_SDKFuncLib_StartHttpBase64DataRequest::Method' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_StartHttpBase64DataRequest, ExHeaders) == 0x000020, "Member 'GSE_SDKFuncLib_StartHttpBase64DataRequest::ExHeaders' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_StartHttpBase64DataRequest, Base64PostData) == 0x000070, "Member 'GSE_SDKFuncLib_StartHttpBase64DataRequest::Base64PostData' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_StartHttpBase64DataRequest, Listener) == 0x000080, "Member 'GSE_SDKFuncLib_StartHttpBase64DataRequest::Listener' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_StartHttpBase64DataRequest, RequestTimeout) == 0x000088, "Member 'GSE_SDKFuncLib_StartHttpBase64DataRequest::RequestTimeout' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_StartHttpBase64DataRequest, ReturnValue) == 0x00008C, "Member 'GSE_SDKFuncLib_StartHttpBase64DataRequest::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.StartHttpRawDataRequest
// 0x0090 (0x0090 - 0x0000)
struct GSE_SDKFuncLib_StartHttpRawDataRequest final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Method;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExHeaders;                                         // 0x0020(0x0050)(Parm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 PostRawData;                                       // 0x0070(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UHttpResposeListener*                   Listener;                                          // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestTimeout;                                    // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x008C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SDKFuncLib_StartHttpRawDataRequest) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_StartHttpRawDataRequest");
//static_assert(sizeof(GSE_SDKFuncLib_StartHttpRawDataRequest) == 0x000090, "Wrong size on GSE_SDKFuncLib_StartHttpRawDataRequest");
//static_assert(offsetof(GSE_SDKFuncLib_StartHttpRawDataRequest, URL) == 0x000000, "Member 'GSE_SDKFuncLib_StartHttpRawDataRequest::URL' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_StartHttpRawDataRequest, Method) == 0x000010, "Member 'GSE_SDKFuncLib_StartHttpRawDataRequest::Method' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_StartHttpRawDataRequest, ExHeaders) == 0x000020, "Member 'GSE_SDKFuncLib_StartHttpRawDataRequest::ExHeaders' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_StartHttpRawDataRequest, PostRawData) == 0x000070, "Member 'GSE_SDKFuncLib_StartHttpRawDataRequest::PostRawData' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_StartHttpRawDataRequest, Listener) == 0x000080, "Member 'GSE_SDKFuncLib_StartHttpRawDataRequest::Listener' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_StartHttpRawDataRequest, RequestTimeout) == 0x000088, "Member 'GSE_SDKFuncLib_StartHttpRawDataRequest::RequestTimeout' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_StartHttpRawDataRequest, ReturnValue) == 0x00008C, "Member 'GSE_SDKFuncLib_StartHttpRawDataRequest::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SDKFuncLib.TestCallAndroidFunc
// 0x0018 (0x0018 - 0x0000)
struct GSE_SDKFuncLib_TestCallAndroidFunc final
{
public:
	class FString                                 Content;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SDKFuncLib_TestCallAndroidFunc) == 0x000008, "Wrong alignment on GSE_SDKFuncLib_TestCallAndroidFunc");
//static_assert(sizeof(GSE_SDKFuncLib_TestCallAndroidFunc) == 0x000018, "Wrong size on GSE_SDKFuncLib_TestCallAndroidFunc");
//static_assert(offsetof(GSE_SDKFuncLib_TestCallAndroidFunc, Content) == 0x000000, "Member 'GSE_SDKFuncLib_TestCallAndroidFunc::Content' has a wrong offset!");
//static_assert(offsetof(GSE_SDKFuncLib_TestCallAndroidFunc, ReturnValue) == 0x000010, "Member 'GSE_SDKFuncLib_TestCallAndroidFunc::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SequencerFuncLib.FQualifiedTimeAsSeconds
// 0x0014 (0x0014 - 0x0000)
struct GSE_SequencerFuncLib_FQualifiedTimeAsSeconds final
{
public:
	struct FQualifiedFrameTime                    FrameTime;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SequencerFuncLib_FQualifiedTimeAsSeconds) == 0x000004, "Wrong alignment on GSE_SequencerFuncLib_FQualifiedTimeAsSeconds");
//static_assert(sizeof(GSE_SequencerFuncLib_FQualifiedTimeAsSeconds) == 0x000014, "Wrong size on GSE_SequencerFuncLib_FQualifiedTimeAsSeconds");
//static_assert(offsetof(GSE_SequencerFuncLib_FQualifiedTimeAsSeconds, FrameTime) == 0x000000, "Member 'GSE_SequencerFuncLib_FQualifiedTimeAsSeconds::FrameTime' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_FQualifiedTimeAsSeconds, ReturnValue) == 0x000010, "Member 'GSE_SequencerFuncLib_FQualifiedTimeAsSeconds::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SequencerFuncLib.GetLevelSequenceBindingIDByDisplayName
// 0x0028 (0x0028 - 0x0000)
struct GSE_SequencerFuncLib_GetLevelSequenceBindingIDByDisplayName final
{
public:
	class ULevelSequence*                         LevelSequence;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SequencerFuncLib_GetLevelSequenceBindingIDByDisplayName) == 0x000008, "Wrong alignment on GSE_SequencerFuncLib_GetLevelSequenceBindingIDByDisplayName");
//static_assert(sizeof(GSE_SequencerFuncLib_GetLevelSequenceBindingIDByDisplayName) == 0x000028, "Wrong size on GSE_SequencerFuncLib_GetLevelSequenceBindingIDByDisplayName");
//static_assert(offsetof(GSE_SequencerFuncLib_GetLevelSequenceBindingIDByDisplayName, LevelSequence) == 0x000000, "Member 'GSE_SequencerFuncLib_GetLevelSequenceBindingIDByDisplayName::LevelSequence' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_GetLevelSequenceBindingIDByDisplayName, TargetName) == 0x000008, "Member 'GSE_SequencerFuncLib_GetLevelSequenceBindingIDByDisplayName::TargetName' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_GetLevelSequenceBindingIDByDisplayName, ReturnValue) == 0x000010, "Member 'GSE_SequencerFuncLib_GetLevelSequenceBindingIDByDisplayName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SequencerFuncLib.GetLevelSequenceBindingIDByName
// 0x0028 (0x0028 - 0x0000)
struct GSE_SequencerFuncLib_GetLevelSequenceBindingIDByName final
{
public:
	class ULevelSequence*                         LevelSequence;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SequencerFuncLib_GetLevelSequenceBindingIDByName) == 0x000008, "Wrong alignment on GSE_SequencerFuncLib_GetLevelSequenceBindingIDByName");
//static_assert(sizeof(GSE_SequencerFuncLib_GetLevelSequenceBindingIDByName) == 0x000028, "Wrong size on GSE_SequencerFuncLib_GetLevelSequenceBindingIDByName");
//static_assert(offsetof(GSE_SequencerFuncLib_GetLevelSequenceBindingIDByName, LevelSequence) == 0x000000, "Member 'GSE_SequencerFuncLib_GetLevelSequenceBindingIDByName::LevelSequence' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_GetLevelSequenceBindingIDByName, TargetName) == 0x000008, "Member 'GSE_SequencerFuncLib_GetLevelSequenceBindingIDByName::TargetName' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_GetLevelSequenceBindingIDByName, ReturnValue) == 0x000010, "Member 'GSE_SequencerFuncLib_GetLevelSequenceBindingIDByName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SequencerFuncLib.GetLevelSequenceBindingIDByNameCS
// 0x0028 (0x0028 - 0x0000)
struct GSE_SequencerFuncLib_GetLevelSequenceBindingIDByNameCS final
{
public:
	class ULevelSequence*                         LevelSequence;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequenceBindingIDInCS                 ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SequencerFuncLib_GetLevelSequenceBindingIDByNameCS) == 0x000008, "Wrong alignment on GSE_SequencerFuncLib_GetLevelSequenceBindingIDByNameCS");
//static_assert(sizeof(GSE_SequencerFuncLib_GetLevelSequenceBindingIDByNameCS) == 0x000028, "Wrong size on GSE_SequencerFuncLib_GetLevelSequenceBindingIDByNameCS");
//static_assert(offsetof(GSE_SequencerFuncLib_GetLevelSequenceBindingIDByNameCS, LevelSequence) == 0x000000, "Member 'GSE_SequencerFuncLib_GetLevelSequenceBindingIDByNameCS::LevelSequence' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_GetLevelSequenceBindingIDByNameCS, TargetName) == 0x000008, "Member 'GSE_SequencerFuncLib_GetLevelSequenceBindingIDByNameCS::TargetName' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_GetLevelSequenceBindingIDByNameCS, ReturnValue) == 0x000010, "Member 'GSE_SequencerFuncLib_GetLevelSequenceBindingIDByNameCS::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SequencerFuncLib.IsMovieSceneObjectBindingIDValidCS
// 0x001C (0x001C - 0x0000)
struct GSE_SequencerFuncLib_IsMovieSceneObjectBindingIDValidCS final
{
public:
	struct FSequenceBindingIDInCS                 BindID;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SequencerFuncLib_IsMovieSceneObjectBindingIDValidCS) == 0x000004, "Wrong alignment on GSE_SequencerFuncLib_IsMovieSceneObjectBindingIDValidCS");
//static_assert(sizeof(GSE_SequencerFuncLib_IsMovieSceneObjectBindingIDValidCS) == 0x00001C, "Wrong size on GSE_SequencerFuncLib_IsMovieSceneObjectBindingIDValidCS");
//static_assert(offsetof(GSE_SequencerFuncLib_IsMovieSceneObjectBindingIDValidCS, BindID) == 0x000000, "Member 'GSE_SequencerFuncLib_IsMovieSceneObjectBindingIDValidCS::BindID' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_IsMovieSceneObjectBindingIDValidCS, ReturnValue) == 0x000018, "Member 'GSE_SequencerFuncLib_IsMovieSceneObjectBindingIDValidCS::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SequencerFuncLib.LevelSequenceBindPossessableObjectCS
// 0x0030 (0x0030 - 0x0000)
struct GSE_SequencerFuncLib_LevelSequenceBindPossessableObjectCS final
{
public:
	class ULevelSequence*                         LevelSequence;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequenceBindingIDInCS                 BindingID;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                BindObj;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Ctx;                                               // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SequencerFuncLib_LevelSequenceBindPossessableObjectCS) == 0x000008, "Wrong alignment on GSE_SequencerFuncLib_LevelSequenceBindPossessableObjectCS");
//static_assert(sizeof(GSE_SequencerFuncLib_LevelSequenceBindPossessableObjectCS) == 0x000030, "Wrong size on GSE_SequencerFuncLib_LevelSequenceBindPossessableObjectCS");
//static_assert(offsetof(GSE_SequencerFuncLib_LevelSequenceBindPossessableObjectCS, LevelSequence) == 0x000000, "Member 'GSE_SequencerFuncLib_LevelSequenceBindPossessableObjectCS::LevelSequence' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_LevelSequenceBindPossessableObjectCS, BindingID) == 0x000008, "Member 'GSE_SequencerFuncLib_LevelSequenceBindPossessableObjectCS::BindingID' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_LevelSequenceBindPossessableObjectCS, BindObj) == 0x000020, "Member 'GSE_SequencerFuncLib_LevelSequenceBindPossessableObjectCS::BindObj' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_LevelSequenceBindPossessableObjectCS, Ctx) == 0x000028, "Member 'GSE_SequencerFuncLib_LevelSequenceBindPossessableObjectCS::Ctx' has a wrong offset!");

// Function UnrealExtent.GSE_SequencerFuncLib.LevelSequenceUnbindPossessableObjectCS
// 0x0020 (0x0020 - 0x0000)
struct GSE_SequencerFuncLib_LevelSequenceUnbindPossessableObjectCS final
{
public:
	class ULevelSequence*                         LevelSequence;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequenceBindingIDInCS                 BindingID;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SequencerFuncLib_LevelSequenceUnbindPossessableObjectCS) == 0x000008, "Wrong alignment on GSE_SequencerFuncLib_LevelSequenceUnbindPossessableObjectCS");
//static_assert(sizeof(GSE_SequencerFuncLib_LevelSequenceUnbindPossessableObjectCS) == 0x000020, "Wrong size on GSE_SequencerFuncLib_LevelSequenceUnbindPossessableObjectCS");
//static_assert(offsetof(GSE_SequencerFuncLib_LevelSequenceUnbindPossessableObjectCS, LevelSequence) == 0x000000, "Member 'GSE_SequencerFuncLib_LevelSequenceUnbindPossessableObjectCS::LevelSequence' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_LevelSequenceUnbindPossessableObjectCS, BindingID) == 0x000008, "Member 'GSE_SequencerFuncLib_LevelSequenceUnbindPossessableObjectCS::BindingID' has a wrong offset!");

// Function UnrealExtent.GSE_SequencerFuncLib.SequenceActorAddBindingCS
// 0x0028 (0x0028 - 0x0000)
struct GSE_SequencerFuncLib_SequenceActorAddBindingCS final
{
public:
	class ALevelSequenceActor*                    SeqActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequenceBindingIDInCS                 BindingID;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SequencerFuncLib_SequenceActorAddBindingCS) == 0x000008, "Wrong alignment on GSE_SequencerFuncLib_SequenceActorAddBindingCS");
//static_assert(sizeof(GSE_SequencerFuncLib_SequenceActorAddBindingCS) == 0x000028, "Wrong size on GSE_SequencerFuncLib_SequenceActorAddBindingCS");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceActorAddBindingCS, SeqActor) == 0x000000, "Member 'GSE_SequencerFuncLib_SequenceActorAddBindingCS::SeqActor' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceActorAddBindingCS, BindingID) == 0x000008, "Member 'GSE_SequencerFuncLib_SequenceActorAddBindingCS::BindingID' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceActorAddBindingCS, Actor) == 0x000020, "Member 'GSE_SequencerFuncLib_SequenceActorAddBindingCS::Actor' has a wrong offset!");

// Function UnrealExtent.GSE_SequencerFuncLib.SequenceActorInitPlayerCS
// 0x0018 (0x0018 - 0x0000)
struct GSE_SequencerFuncLib_SequenceActorInitPlayerCS final
{
public:
	class ALevelSequenceActor*                    SeqActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevel*                                 Lvl;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSeq;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SequencerFuncLib_SequenceActorInitPlayerCS) == 0x000008, "Wrong alignment on GSE_SequencerFuncLib_SequenceActorInitPlayerCS");
//static_assert(sizeof(GSE_SequencerFuncLib_SequenceActorInitPlayerCS) == 0x000018, "Wrong size on GSE_SequencerFuncLib_SequenceActorInitPlayerCS");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceActorInitPlayerCS, SeqActor) == 0x000000, "Member 'GSE_SequencerFuncLib_SequenceActorInitPlayerCS::SeqActor' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceActorInitPlayerCS, Lvl) == 0x000008, "Member 'GSE_SequencerFuncLib_SequenceActorInitPlayerCS::Lvl' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceActorInitPlayerCS, LevelSeq) == 0x000010, "Member 'GSE_SequencerFuncLib_SequenceActorInitPlayerCS::LevelSeq' has a wrong offset!");

// Function UnrealExtent.GSE_SequencerFuncLib.SequenceActorSetBindingByName
// 0x0028 (0x0028 - 0x0000)
struct GSE_SequencerFuncLib_SequenceActorSetBindingByName final
{
public:
	class ALevelSequenceActor*                    SequenceActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Actors;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bUseDisplayName;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SequencerFuncLib_SequenceActorSetBindingByName) == 0x000008, "Wrong alignment on GSE_SequencerFuncLib_SequenceActorSetBindingByName");
//static_assert(sizeof(GSE_SequencerFuncLib_SequenceActorSetBindingByName) == 0x000028, "Wrong size on GSE_SequencerFuncLib_SequenceActorSetBindingByName");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceActorSetBindingByName, SequenceActor) == 0x000000, "Member 'GSE_SequencerFuncLib_SequenceActorSetBindingByName::SequenceActor' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceActorSetBindingByName, TargetName) == 0x000008, "Member 'GSE_SequencerFuncLib_SequenceActorSetBindingByName::TargetName' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceActorSetBindingByName, Actors) == 0x000010, "Member 'GSE_SequencerFuncLib_SequenceActorSetBindingByName::Actors' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceActorSetBindingByName, bUseDisplayName) == 0x000020, "Member 'GSE_SequencerFuncLib_SequenceActorSetBindingByName::bUseDisplayName' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceActorSetBindingByName, ReturnValue) == 0x000021, "Member 'GSE_SequencerFuncLib_SequenceActorSetBindingByName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SequencerFuncLib.SequenceMasterAutoBind
// 0x0018 (0x0018 - 0x0000)
struct GSE_SequencerFuncLib_SequenceMasterAutoBind final
{
public:
	class ALevelSequenceActor*                    SequenceActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 MasterActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SequencerFuncLib_SequenceMasterAutoBind) == 0x000008, "Wrong alignment on GSE_SequencerFuncLib_SequenceMasterAutoBind");
//static_assert(sizeof(GSE_SequencerFuncLib_SequenceMasterAutoBind) == 0x000018, "Wrong size on GSE_SequencerFuncLib_SequenceMasterAutoBind");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceMasterAutoBind, SequenceActor) == 0x000000, "Member 'GSE_SequencerFuncLib_SequenceMasterAutoBind::SequenceActor' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceMasterAutoBind, MasterActor) == 0x000008, "Member 'GSE_SequencerFuncLib_SequenceMasterAutoBind::MasterActor' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceMasterAutoBind, ReturnValue) == 0x000010, "Member 'GSE_SequencerFuncLib_SequenceMasterAutoBind::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SequencerFuncLib.SequenceSetClockSource
// 0x0010 (0x0010 - 0x0000)
struct GSE_SequencerFuncLib_SequenceSetClockSource final
{
public:
	class UMovieSceneSequencePlayer*              SequencePlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUpdateClockSource                            ClockSource;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SequencerFuncLib_SequenceSetClockSource) == 0x000008, "Wrong alignment on GSE_SequencerFuncLib_SequenceSetClockSource");
//static_assert(sizeof(GSE_SequencerFuncLib_SequenceSetClockSource) == 0x000010, "Wrong size on GSE_SequencerFuncLib_SequenceSetClockSource");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceSetClockSource, SequencePlayer) == 0x000000, "Member 'GSE_SequencerFuncLib_SequenceSetClockSource::SequencePlayer' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceSetClockSource, ClockSource) == 0x000008, "Member 'GSE_SequencerFuncLib_SequenceSetClockSource::ClockSource' has a wrong offset!");
//static_assert(offsetof(GSE_SequencerFuncLib_SequenceSetClockSource, ReturnValue) == 0x000009, "Member 'GSE_SequencerFuncLib_SequenceSetClockSource::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.BakeSkinInfoToUVs
// 0x0008 (0x0008 - 0x0000)
struct GSE_SkeletalMeshFuncLib_BakeSkinInfoToUVs final
{
public:
	class USkeletalMesh*                          TargetSkeletalMesh;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_BakeSkinInfoToUVs) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_BakeSkinInfoToUVs");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_BakeSkinInfoToUVs) == 0x000008, "Wrong size on GSE_SkeletalMeshFuncLib_BakeSkinInfoToUVs");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_BakeSkinInfoToUVs, TargetSkeletalMesh) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_BakeSkinInfoToUVs::TargetSkeletalMesh' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.GetBodyInstanceCollisionProfileName
// 0x0020 (0x0020 - 0x0000)
struct GSE_SkeletalMeshFuncLib_GetBodyInstanceCollisionProfileName final
{
public:
	class USkeletalMeshComponent*                 SkMeshComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetWelded;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_GetBodyInstanceCollisionProfileName) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_GetBodyInstanceCollisionProfileName");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_GetBodyInstanceCollisionProfileName) == 0x000020, "Wrong size on GSE_SkeletalMeshFuncLib_GetBodyInstanceCollisionProfileName");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetBodyInstanceCollisionProfileName, SkMeshComp) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_GetBodyInstanceCollisionProfileName::SkMeshComp' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetBodyInstanceCollisionProfileName, BoneName) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_GetBodyInstanceCollisionProfileName::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetBodyInstanceCollisionProfileName, bGetWelded) == 0x000010, "Member 'GSE_SkeletalMeshFuncLib_GetBodyInstanceCollisionProfileName::bGetWelded' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetBodyInstanceCollisionProfileName, ReturnValue) == 0x000014, "Member 'GSE_SkeletalMeshFuncLib_GetBodyInstanceCollisionProfileName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.GetBodyInstanceShapeCollisionEnable
// 0x0018 (0x0018 - 0x0000)
struct GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable final
{
public:
	class USkeletalMeshComponent*                 SkMeshComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShapeIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetWelded;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionEnabled                             ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable) == 0x000018, "Wrong size on GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable, SkMeshComp) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable::SkMeshComp' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable, BoneName) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable, ShapeIndex) == 0x000010, "Member 'GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable::ShapeIndex' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable, bGetWelded) == 0x000014, "Member 'GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable::bGetWelded' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable, ReturnValue) == 0x000015, "Member 'GSE_SkeletalMeshFuncLib_GetBodyInstanceShapeCollisionEnable::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.GetLODSettingsGroupNum
// 0x0010 (0x0010 - 0x0000)
struct GSE_SkeletalMeshFuncLib_GetLODSettingsGroupNum final
{
public:
	class USkeletalMeshLODSettings*               LODSettings;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_GetLODSettingsGroupNum) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_GetLODSettingsGroupNum");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_GetLODSettingsGroupNum) == 0x000010, "Wrong size on GSE_SkeletalMeshFuncLib_GetLODSettingsGroupNum");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetLODSettingsGroupNum, LODSettings) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_GetLODSettingsGroupNum::LODSettings' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetLODSettingsGroupNum, ReturnValue) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_GetLODSettingsGroupNum::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.GetNumOverrideMaterials
// 0x0010 (0x0010 - 0x0000)
struct GSE_SkeletalMeshFuncLib_GetNumOverrideMaterials final
{
public:
	const class USkeletalMeshComponent*           SKComp;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_GetNumOverrideMaterials) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_GetNumOverrideMaterials");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_GetNumOverrideMaterials) == 0x000010, "Wrong size on GSE_SkeletalMeshFuncLib_GetNumOverrideMaterials");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetNumOverrideMaterials, SKComp) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_GetNumOverrideMaterials::SKComp' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetNumOverrideMaterials, ReturnValue) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_GetNumOverrideMaterials::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.GetRefPoseTransform
// 0x0070 (0x0070 - 0x0000)
struct GSE_SkeletalMeshFuncLib_GetRefPoseTransform final
{
public:
	class USkinnedMeshComponent*                  MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocal;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_GetRefPoseTransform) == 0x000010, "Wrong alignment on GSE_SkeletalMeshFuncLib_GetRefPoseTransform");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_GetRefPoseTransform) == 0x000070, "Wrong size on GSE_SkeletalMeshFuncLib_GetRefPoseTransform");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetRefPoseTransform, MeshComp) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_GetRefPoseTransform::MeshComp' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetRefPoseTransform, BoneIndex) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_GetRefPoseTransform::BoneIndex' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetRefPoseTransform, bIsLocal) == 0x00000C, "Member 'GSE_SkeletalMeshFuncLib_GetRefPoseTransform::bIsLocal' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetRefPoseTransform, ReturnValue) == 0x000010, "Member 'GSE_SkeletalMeshFuncLib_GetRefPoseTransform::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.GetUROResult
// 0x0010 (0x0010 - 0x0000)
struct GSE_SkeletalMeshFuncLib_GetUROResult final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutAccumulatedDeltaTime;                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_GetUROResult) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_GetUROResult");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_GetUROResult) == 0x000010, "Wrong size on GSE_SkeletalMeshFuncLib_GetUROResult");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetUROResult, OwnerActor) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_GetUROResult::OwnerActor' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetUROResult, OutAccumulatedDeltaTime) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_GetUROResult::OutAccumulatedDeltaTime' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GetUROResult, ReturnValue) == 0x00000C, "Member 'GSE_SkeletalMeshFuncLib_GetUROResult::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.GS_SetEndPhysicsTickEnabled
// 0x0010 (0x0010 - 0x0000)
struct GSE_SkeletalMeshFuncLib_GS_SetEndPhysicsTickEnabled final
{
public:
	class USkeletalMeshComponent*                 SKComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVal;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_GS_SetEndPhysicsTickEnabled) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_GS_SetEndPhysicsTickEnabled");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_GS_SetEndPhysicsTickEnabled) == 0x000010, "Wrong size on GSE_SkeletalMeshFuncLib_GS_SetEndPhysicsTickEnabled");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GS_SetEndPhysicsTickEnabled, SKComp) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_GS_SetEndPhysicsTickEnabled::SKComp' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_GS_SetEndPhysicsTickEnabled, bVal) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_GS_SetEndPhysicsTickEnabled::bVal' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.IsCPUAccess
// 0x0010 (0x0010 - 0x0000)
struct GSE_SkeletalMeshFuncLib_IsCPUAccess final
{
public:
	class USkeletalMesh*                          SKMesh;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_IsCPUAccess) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_IsCPUAccess");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_IsCPUAccess) == 0x000010, "Wrong size on GSE_SkeletalMeshFuncLib_IsCPUAccess");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_IsCPUAccess, SKMesh) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_IsCPUAccess::SKMesh' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_IsCPUAccess, ReturnValue) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_IsCPUAccess::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.SetAllBodiesShapeCollisionEnabled
// 0x0010 (0x0010 - 0x0000)
struct GSE_SkeletalMeshFuncLib_SetAllBodiesShapeCollisionEnabled final
{
public:
	const class USkeletalMeshComponent*           SKComp;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionEnabled                             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateFilterData;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_SetAllBodiesShapeCollisionEnabled) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_SetAllBodiesShapeCollisionEnabled");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_SetAllBodiesShapeCollisionEnabled) == 0x000010, "Wrong size on GSE_SkeletalMeshFuncLib_SetAllBodiesShapeCollisionEnabled");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetAllBodiesShapeCollisionEnabled, SKComp) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_SetAllBodiesShapeCollisionEnabled::SKComp' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetAllBodiesShapeCollisionEnabled, Type) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_SetAllBodiesShapeCollisionEnabled::Type' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetAllBodiesShapeCollisionEnabled, bUpdateFilterData) == 0x000009, "Member 'GSE_SkeletalMeshFuncLib_SetAllBodiesShapeCollisionEnabled::bUpdateFilterData' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.SetBodyInstanceAutoWeld
// 0x0018 (0x0018 - 0x0000)
struct GSE_SkeletalMeshFuncLib_SetBodyInstanceAutoWeld final
{
public:
	class USkeletalMeshComponent*                 SkMeshComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoWeld;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetWelded;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_SetBodyInstanceAutoWeld) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_SetBodyInstanceAutoWeld");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_SetBodyInstanceAutoWeld) == 0x000018, "Wrong size on GSE_SkeletalMeshFuncLib_SetBodyInstanceAutoWeld");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceAutoWeld, SkMeshComp) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceAutoWeld::SkMeshComp' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceAutoWeld, BoneName) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceAutoWeld::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceAutoWeld, bAutoWeld) == 0x000010, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceAutoWeld::bAutoWeld' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceAutoWeld, bGetWelded) == 0x000011, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceAutoWeld::bGetWelded' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.SetBodyInstanceCollisionEnable
// 0x0018 (0x0018 - 0x0000)
struct GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable final
{
public:
	class USkeletalMeshComponent*                 SkMeshComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionEnabled                             NewType;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdatePhysicsFilterData;                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetWelded;                                        // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable) == 0x000018, "Wrong size on GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable, SkMeshComp) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable::SkMeshComp' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable, BoneName) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable, NewType) == 0x000010, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable::NewType' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable, bUpdatePhysicsFilterData) == 0x000011, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable::bUpdatePhysicsFilterData' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable, bGetWelded) == 0x000012, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionEnable::bGetWelded' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.SetBodyInstanceCollisionProfileName
// 0x0020 (0x0020 - 0x0000)
struct GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionProfileName final
{
public:
	class USkeletalMeshComponent*                 SkMeshComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCollisionProfileName;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetWelded;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionProfileName) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionProfileName");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionProfileName) == 0x000020, "Wrong size on GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionProfileName");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionProfileName, SkMeshComp) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionProfileName::SkMeshComp' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionProfileName, BoneName) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionProfileName::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionProfileName, InCollisionProfileName) == 0x000010, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionProfileName::InCollisionProfileName' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionProfileName, bGetWelded) == 0x000018, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceCollisionProfileName::bGetWelded' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.SetBodyInstanceShapeCollisionEnable
// 0x0018 (0x0018 - 0x0000)
struct GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable final
{
public:
	class USkeletalMeshComponent*                 SkMeshComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShapeIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionEnabled                             NewType;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdatePhysicsFilterData;                          // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetWelded;                                        // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable) == 0x000018, "Wrong size on GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable, SkMeshComp) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable::SkMeshComp' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable, BoneName) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable::BoneName' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable, ShapeIndex) == 0x000010, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable::ShapeIndex' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable, NewType) == 0x000014, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable::NewType' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable, bUpdatePhysicsFilterData) == 0x000015, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable::bUpdatePhysicsFilterData' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable, bGetWelded) == 0x000016, "Member 'GSE_SkeletalMeshFuncLib_SetBodyInstanceShapeCollisionEnable::bGetWelded' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.SetTextureParameterValueOnMaterials
// 0x0018 (0x0018 - 0x0000)
struct GSE_SkeletalMeshFuncLib_SetTextureParameterValueOnMaterials final
{
public:
	class UMeshComponent*                         MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ParameterValue;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_SetTextureParameterValueOnMaterials) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_SetTextureParameterValueOnMaterials");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_SetTextureParameterValueOnMaterials) == 0x000018, "Wrong size on GSE_SkeletalMeshFuncLib_SetTextureParameterValueOnMaterials");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetTextureParameterValueOnMaterials, MeshComp) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_SetTextureParameterValueOnMaterials::MeshComp' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetTextureParameterValueOnMaterials, ParameterName) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_SetTextureParameterValueOnMaterials::ParameterName' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetTextureParameterValueOnMaterials, ParameterValue) == 0x000010, "Member 'GSE_SkeletalMeshFuncLib_SetTextureParameterValueOnMaterials::ParameterValue' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.SetUpdateOverlapsOnAnimationFinalize
// 0x0010 (0x0010 - 0x0000)
struct GSE_SkeletalMeshFuncLib_SetUpdateOverlapsOnAnimationFinalize final
{
public:
	class USkeletalMeshComponent*                 SKComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVal;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_SetUpdateOverlapsOnAnimationFinalize) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_SetUpdateOverlapsOnAnimationFinalize");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_SetUpdateOverlapsOnAnimationFinalize) == 0x000010, "Wrong size on GSE_SkeletalMeshFuncLib_SetUpdateOverlapsOnAnimationFinalize");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetUpdateOverlapsOnAnimationFinalize, SKComp) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_SetUpdateOverlapsOnAnimationFinalize::SKComp' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_SetUpdateOverlapsOnAnimationFinalize, bVal) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_SetUpdateOverlapsOnAnimationFinalize::bVal' has a wrong offset!");

// Function UnrealExtent.GSE_SkeletalMeshFuncLib.UpdateUROParams
// 0x0020 (0x0020 - 0x0000)
struct GSE_SkeletalMeshFuncLib_UpdateUROParams final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 BaseVisibleDistanceFactorThesholds;                // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         BaseNonRenderedUpdateRate;                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SkeletalMeshFuncLib_UpdateUROParams) == 0x000008, "Wrong alignment on GSE_SkeletalMeshFuncLib_UpdateUROParams");
//static_assert(sizeof(GSE_SkeletalMeshFuncLib_UpdateUROParams) == 0x000020, "Wrong size on GSE_SkeletalMeshFuncLib_UpdateUROParams");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_UpdateUROParams, OwnerActor) == 0x000000, "Member 'GSE_SkeletalMeshFuncLib_UpdateUROParams::OwnerActor' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_UpdateUROParams, BaseVisibleDistanceFactorThesholds) == 0x000008, "Member 'GSE_SkeletalMeshFuncLib_UpdateUROParams::BaseVisibleDistanceFactorThesholds' has a wrong offset!");
//static_assert(offsetof(GSE_SkeletalMeshFuncLib_UpdateUROParams, BaseNonRenderedUpdateRate) == 0x000018, "Member 'GSE_SkeletalMeshFuncLib_UpdateUROParams::BaseNonRenderedUpdateRate' has a wrong offset!");

// Function UnrealExtent.GSE_StaticMeshFunLib.GetCollisionComplexity
// 0x0010 (0x0010 - 0x0000)
struct GSE_StaticMeshFunLib_GetCollisionComplexity final
{
public:
	class UStaticMesh*                            TargetStaticMesh;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionTraceFlag                           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_StaticMeshFunLib_GetCollisionComplexity) == 0x000008, "Wrong alignment on GSE_StaticMeshFunLib_GetCollisionComplexity");
//static_assert(sizeof(GSE_StaticMeshFunLib_GetCollisionComplexity) == 0x000010, "Wrong size on GSE_StaticMeshFunLib_GetCollisionComplexity");
//static_assert(offsetof(GSE_StaticMeshFunLib_GetCollisionComplexity, TargetStaticMesh) == 0x000000, "Member 'GSE_StaticMeshFunLib_GetCollisionComplexity::TargetStaticMesh' has a wrong offset!");
//static_assert(offsetof(GSE_StaticMeshFunLib_GetCollisionComplexity, ReturnValue) == 0x000008, "Member 'GSE_StaticMeshFunLib_GetCollisionComplexity::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_StaticMeshFunLib.GetCollisionPremitiveNumbers
// 0x0010 (0x0010 - 0x0000)
struct GSE_StaticMeshFunLib_GetCollisionPremitiveNumbers final
{
public:
	class UStaticMesh*                            TargetStaticMesh;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_StaticMeshFunLib_GetCollisionPremitiveNumbers) == 0x000008, "Wrong alignment on GSE_StaticMeshFunLib_GetCollisionPremitiveNumbers");
//static_assert(sizeof(GSE_StaticMeshFunLib_GetCollisionPremitiveNumbers) == 0x000010, "Wrong size on GSE_StaticMeshFunLib_GetCollisionPremitiveNumbers");
//static_assert(offsetof(GSE_StaticMeshFunLib_GetCollisionPremitiveNumbers, TargetStaticMesh) == 0x000000, "Member 'GSE_StaticMeshFunLib_GetCollisionPremitiveNumbers::TargetStaticMesh' has a wrong offset!");
//static_assert(offsetof(GSE_StaticMeshFunLib_GetCollisionPremitiveNumbers, ReturnValue) == 0x000008, "Member 'GSE_StaticMeshFunLib_GetCollisionPremitiveNumbers::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_StaticMeshFunLib.GetCustomPrimitiveData
// 0x0018 (0x0018 - 0x0000)
struct GSE_StaticMeshFunLib_GetCustomPrimitiveData final
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_StaticMeshFunLib_GetCustomPrimitiveData) == 0x000008, "Wrong alignment on GSE_StaticMeshFunLib_GetCustomPrimitiveData");
//static_assert(sizeof(GSE_StaticMeshFunLib_GetCustomPrimitiveData) == 0x000018, "Wrong size on GSE_StaticMeshFunLib_GetCustomPrimitiveData");
//static_assert(offsetof(GSE_StaticMeshFunLib_GetCustomPrimitiveData, StaticMeshComponent) == 0x000000, "Member 'GSE_StaticMeshFunLib_GetCustomPrimitiveData::StaticMeshComponent' has a wrong offset!");
//static_assert(offsetof(GSE_StaticMeshFunLib_GetCustomPrimitiveData, ReturnValue) == 0x000008, "Member 'GSE_StaticMeshFunLib_GetCustomPrimitiveData::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_StaticMeshFunLib.GetStaticMeshMaterialNum
// 0x0010 (0x0010 - 0x0000)
struct GSE_StaticMeshFunLib_GetStaticMeshMaterialNum final
{
public:
	class UStaticMesh*                            TargetStaticMesh;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_StaticMeshFunLib_GetStaticMeshMaterialNum) == 0x000008, "Wrong alignment on GSE_StaticMeshFunLib_GetStaticMeshMaterialNum");
//static_assert(sizeof(GSE_StaticMeshFunLib_GetStaticMeshMaterialNum) == 0x000010, "Wrong size on GSE_StaticMeshFunLib_GetStaticMeshMaterialNum");
//static_assert(offsetof(GSE_StaticMeshFunLib_GetStaticMeshMaterialNum, TargetStaticMesh) == 0x000000, "Member 'GSE_StaticMeshFunLib_GetStaticMeshMaterialNum::TargetStaticMesh' has a wrong offset!");
//static_assert(offsetof(GSE_StaticMeshFunLib_GetStaticMeshMaterialNum, ReturnValue) == 0x000008, "Member 'GSE_StaticMeshFunLib_GetStaticMeshMaterialNum::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_StaticMeshFunLib.IsCPUAccess
// 0x0010 (0x0010 - 0x0000)
struct GSE_StaticMeshFunLib_IsCPUAccess final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_StaticMeshFunLib_IsCPUAccess) == 0x000008, "Wrong alignment on GSE_StaticMeshFunLib_IsCPUAccess");
//static_assert(sizeof(GSE_StaticMeshFunLib_IsCPUAccess) == 0x000010, "Wrong size on GSE_StaticMeshFunLib_IsCPUAccess");
//static_assert(offsetof(GSE_StaticMeshFunLib_IsCPUAccess, StaticMesh) == 0x000000, "Member 'GSE_StaticMeshFunLib_IsCPUAccess::StaticMesh' has a wrong offset!");
//static_assert(offsetof(GSE_StaticMeshFunLib_IsCPUAccess, ReturnValue) == 0x000008, "Member 'GSE_StaticMeshFunLib_IsCPUAccess::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_StaticMeshFunLib.SetCollisionComplexity
// 0x0010 (0x0010 - 0x0000)
struct GSE_StaticMeshFunLib_SetCollisionComplexity final
{
public:
	class UStaticMesh*                            TargetStaticMesh;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionTraceFlag                           _CollisionTraceFlag;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_StaticMeshFunLib_SetCollisionComplexity) == 0x000008, "Wrong alignment on GSE_StaticMeshFunLib_SetCollisionComplexity");
//static_assert(sizeof(GSE_StaticMeshFunLib_SetCollisionComplexity) == 0x000010, "Wrong size on GSE_StaticMeshFunLib_SetCollisionComplexity");
//static_assert(offsetof(GSE_StaticMeshFunLib_SetCollisionComplexity, TargetStaticMesh) == 0x000000, "Member 'GSE_StaticMeshFunLib_SetCollisionComplexity::TargetStaticMesh' has a wrong offset!");
//static_assert(offsetof(GSE_StaticMeshFunLib_SetCollisionComplexity, _CollisionTraceFlag) == 0x000008, "Member 'GSE_StaticMeshFunLib_SetCollisionComplexity::_CollisionTraceFlag' has a wrong offset!");

// Function UnrealExtent.GSE_StaticMeshFunLib.SetLinearColorParameterValueOnMaterials
// 0x0020 (0x0020 - 0x0000)
struct GSE_StaticMeshFunLib_SetLinearColorParameterValueOnMaterials final
{
public:
	class UMeshComponent*                         MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ParamValue;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_StaticMeshFunLib_SetLinearColorParameterValueOnMaterials) == 0x000008, "Wrong alignment on GSE_StaticMeshFunLib_SetLinearColorParameterValueOnMaterials");
//static_assert(sizeof(GSE_StaticMeshFunLib_SetLinearColorParameterValueOnMaterials) == 0x000020, "Wrong size on GSE_StaticMeshFunLib_SetLinearColorParameterValueOnMaterials");
//static_assert(offsetof(GSE_StaticMeshFunLib_SetLinearColorParameterValueOnMaterials, MeshComp) == 0x000000, "Member 'GSE_StaticMeshFunLib_SetLinearColorParameterValueOnMaterials::MeshComp' has a wrong offset!");
//static_assert(offsetof(GSE_StaticMeshFunLib_SetLinearColorParameterValueOnMaterials, ParamName) == 0x000008, "Member 'GSE_StaticMeshFunLib_SetLinearColorParameterValueOnMaterials::ParamName' has a wrong offset!");
//static_assert(offsetof(GSE_StaticMeshFunLib_SetLinearColorParameterValueOnMaterials, ParamValue) == 0x000010, "Member 'GSE_StaticMeshFunLib_SetLinearColorParameterValueOnMaterials::ParamValue' has a wrong offset!");

// Function UnrealExtent.GSE_StaticMeshFunLib.SetStaticMeshActorVisibility
// 0x0010 (0x0010 - 0x0000)
struct GSE_StaticMeshFunLib_SetStaticMeshActorVisibility final
{
public:
	class AStaticMeshActor*                       TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visible;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecurseToChildActor;                               // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_StaticMeshFunLib_SetStaticMeshActorVisibility) == 0x000008, "Wrong alignment on GSE_StaticMeshFunLib_SetStaticMeshActorVisibility");
//static_assert(sizeof(GSE_StaticMeshFunLib_SetStaticMeshActorVisibility) == 0x000010, "Wrong size on GSE_StaticMeshFunLib_SetStaticMeshActorVisibility");
//static_assert(offsetof(GSE_StaticMeshFunLib_SetStaticMeshActorVisibility, TargetActor) == 0x000000, "Member 'GSE_StaticMeshFunLib_SetStaticMeshActorVisibility::TargetActor' has a wrong offset!");
//static_assert(offsetof(GSE_StaticMeshFunLib_SetStaticMeshActorVisibility, Visible) == 0x000008, "Member 'GSE_StaticMeshFunLib_SetStaticMeshActorVisibility::Visible' has a wrong offset!");
//static_assert(offsetof(GSE_StaticMeshFunLib_SetStaticMeshActorVisibility, RecurseToChildActor) == 0x000009, "Member 'GSE_StaticMeshFunLib_SetStaticMeshActorVisibility::RecurseToChildActor' has a wrong offset!");

// Function UnrealExtent.GSE_SubsystemFunctionLibrary.GetEngineSubsystem
// 0x0010 (0x0010 - 0x0000)
struct GSE_SubsystemFunctionLibrary_GetEngineSubsystem final
{
public:
	TSubclassOf<class UEngineSubsystem>           Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEngineSubsystem*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SubsystemFunctionLibrary_GetEngineSubsystem) == 0x000008, "Wrong alignment on GSE_SubsystemFunctionLibrary_GetEngineSubsystem");
//static_assert(sizeof(GSE_SubsystemFunctionLibrary_GetEngineSubsystem) == 0x000010, "Wrong size on GSE_SubsystemFunctionLibrary_GetEngineSubsystem");
//static_assert(offsetof(GSE_SubsystemFunctionLibrary_GetEngineSubsystem, Class_0) == 0x000000, "Member 'GSE_SubsystemFunctionLibrary_GetEngineSubsystem::Class_0' has a wrong offset!");
//static_assert(offsetof(GSE_SubsystemFunctionLibrary_GetEngineSubsystem, ReturnValue) == 0x000008, "Member 'GSE_SubsystemFunctionLibrary_GetEngineSubsystem::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SubsystemFunctionLibrary.GetGameInstanceSubsystem
// 0x0018 (0x0018 - 0x0000)
struct GSE_SubsystemFunctionLibrary_GetGameInstanceSubsystem final
{
public:
	class UObject*                                ContextObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameInstanceSubsystem>     Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameInstanceSubsystem*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SubsystemFunctionLibrary_GetGameInstanceSubsystem) == 0x000008, "Wrong alignment on GSE_SubsystemFunctionLibrary_GetGameInstanceSubsystem");
//static_assert(sizeof(GSE_SubsystemFunctionLibrary_GetGameInstanceSubsystem) == 0x000018, "Wrong size on GSE_SubsystemFunctionLibrary_GetGameInstanceSubsystem");
//static_assert(offsetof(GSE_SubsystemFunctionLibrary_GetGameInstanceSubsystem, ContextObject) == 0x000000, "Member 'GSE_SubsystemFunctionLibrary_GetGameInstanceSubsystem::ContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_SubsystemFunctionLibrary_GetGameInstanceSubsystem, Class_0) == 0x000008, "Member 'GSE_SubsystemFunctionLibrary_GetGameInstanceSubsystem::Class_0' has a wrong offset!");
//static_assert(offsetof(GSE_SubsystemFunctionLibrary_GetGameInstanceSubsystem, ReturnValue) == 0x000010, "Member 'GSE_SubsystemFunctionLibrary_GetGameInstanceSubsystem::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SubsystemFunctionLibrary.GetLocalPlayerSubsystem
// 0x0018 (0x0018 - 0x0000)
struct GSE_SubsystemFunctionLibrary_GetLocalPlayerSubsystem final
{
public:
	class UObject*                                ContextObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULocalPlayerSubsystem>      Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULocalPlayerSubsystem*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SubsystemFunctionLibrary_GetLocalPlayerSubsystem) == 0x000008, "Wrong alignment on GSE_SubsystemFunctionLibrary_GetLocalPlayerSubsystem");
//static_assert(sizeof(GSE_SubsystemFunctionLibrary_GetLocalPlayerSubsystem) == 0x000018, "Wrong size on GSE_SubsystemFunctionLibrary_GetLocalPlayerSubsystem");
//static_assert(offsetof(GSE_SubsystemFunctionLibrary_GetLocalPlayerSubsystem, ContextObject) == 0x000000, "Member 'GSE_SubsystemFunctionLibrary_GetLocalPlayerSubsystem::ContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_SubsystemFunctionLibrary_GetLocalPlayerSubsystem, Class_0) == 0x000008, "Member 'GSE_SubsystemFunctionLibrary_GetLocalPlayerSubsystem::Class_0' has a wrong offset!");
//static_assert(offsetof(GSE_SubsystemFunctionLibrary_GetLocalPlayerSubsystem, ReturnValue) == 0x000010, "Member 'GSE_SubsystemFunctionLibrary_GetLocalPlayerSubsystem::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SubsystemFunctionLibrary.GetLocalPlayerSubSystemFromPlayerController
// 0x0018 (0x0018 - 0x0000)
struct GSE_SubsystemFunctionLibrary_GetLocalPlayerSubSystemFromPlayerController final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULocalPlayerSubsystem>      Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULocalPlayerSubsystem*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SubsystemFunctionLibrary_GetLocalPlayerSubSystemFromPlayerController) == 0x000008, "Wrong alignment on GSE_SubsystemFunctionLibrary_GetLocalPlayerSubSystemFromPlayerController");
//static_assert(sizeof(GSE_SubsystemFunctionLibrary_GetLocalPlayerSubSystemFromPlayerController) == 0x000018, "Wrong size on GSE_SubsystemFunctionLibrary_GetLocalPlayerSubSystemFromPlayerController");
//static_assert(offsetof(GSE_SubsystemFunctionLibrary_GetLocalPlayerSubSystemFromPlayerController, PlayerController) == 0x000000, "Member 'GSE_SubsystemFunctionLibrary_GetLocalPlayerSubSystemFromPlayerController::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_SubsystemFunctionLibrary_GetLocalPlayerSubSystemFromPlayerController, Class_0) == 0x000008, "Member 'GSE_SubsystemFunctionLibrary_GetLocalPlayerSubSystemFromPlayerController::Class_0' has a wrong offset!");
//static_assert(offsetof(GSE_SubsystemFunctionLibrary_GetLocalPlayerSubSystemFromPlayerController, ReturnValue) == 0x000010, "Member 'GSE_SubsystemFunctionLibrary_GetLocalPlayerSubSystemFromPlayerController::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SubsystemFunctionLibrary.GetWorldSubsystem
// 0x0018 (0x0018 - 0x0000)
struct GSE_SubsystemFunctionLibrary_GetWorldSubsystem final
{
public:
	class UObject*                                ContextObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWorldSubsystem>            Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorldSubsystem*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SubsystemFunctionLibrary_GetWorldSubsystem) == 0x000008, "Wrong alignment on GSE_SubsystemFunctionLibrary_GetWorldSubsystem");
//static_assert(sizeof(GSE_SubsystemFunctionLibrary_GetWorldSubsystem) == 0x000018, "Wrong size on GSE_SubsystemFunctionLibrary_GetWorldSubsystem");
//static_assert(offsetof(GSE_SubsystemFunctionLibrary_GetWorldSubsystem, ContextObject) == 0x000000, "Member 'GSE_SubsystemFunctionLibrary_GetWorldSubsystem::ContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_SubsystemFunctionLibrary_GetWorldSubsystem, Class_0) == 0x000008, "Member 'GSE_SubsystemFunctionLibrary_GetWorldSubsystem::Class_0' has a wrong offset!");
//static_assert(offsetof(GSE_SubsystemFunctionLibrary_GetWorldSubsystem, ReturnValue) == 0x000010, "Member 'GSE_SubsystemFunctionLibrary_GetWorldSubsystem::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SuperRSFuncLib.GetDLSSLisFeatureSupported
// 0x0001 (0x0001 - 0x0000)
struct GSE_SuperRSFuncLib_GetDLSSLisFeatureSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SuperRSFuncLib_GetDLSSLisFeatureSupported) == 0x000001, "Wrong alignment on GSE_SuperRSFuncLib_GetDLSSLisFeatureSupported");
//static_assert(sizeof(GSE_SuperRSFuncLib_GetDLSSLisFeatureSupported) == 0x000001, "Wrong size on GSE_SuperRSFuncLib_GetDLSSLisFeatureSupported");
//static_assert(offsetof(GSE_SuperRSFuncLib_GetDLSSLisFeatureSupported, ReturnValue) == 0x000000, "Member 'GSE_SuperRSFuncLib_GetDLSSLisFeatureSupported::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SuperRSFuncLib.GetIsDX12
// 0x0001 (0x0001 - 0x0000)
struct GSE_SuperRSFuncLib_GetIsDX12 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SuperRSFuncLib_GetIsDX12) == 0x000001, "Wrong alignment on GSE_SuperRSFuncLib_GetIsDX12");
//static_assert(sizeof(GSE_SuperRSFuncLib_GetIsDX12) == 0x000001, "Wrong size on GSE_SuperRSFuncLib_GetIsDX12");
//static_assert(offsetof(GSE_SuperRSFuncLib_GetIsDX12, ReturnValue) == 0x000000, "Member 'GSE_SuperRSFuncLib_GetIsDX12::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SuperRSFuncLib.GetIsXeSSSupported
// 0x0001 (0x0001 - 0x0000)
struct GSE_SuperRSFuncLib_GetIsXeSSSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SuperRSFuncLib_GetIsXeSSSupported) == 0x000001, "Wrong alignment on GSE_SuperRSFuncLib_GetIsXeSSSupported");
//static_assert(sizeof(GSE_SuperRSFuncLib_GetIsXeSSSupported) == 0x000001, "Wrong size on GSE_SuperRSFuncLib_GetIsXeSSSupported");
//static_assert(offsetof(GSE_SuperRSFuncLib_GetIsXeSSSupported, ReturnValue) == 0x000000, "Member 'GSE_SuperRSFuncLib_GetIsXeSSSupported::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.ApplySystemSettings
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_ApplySystemSettings final
{
public:
	bool                                          bSaveSettings;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_ApplySystemSettings) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_ApplySystemSettings");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_ApplySystemSettings) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_ApplySystemSettings");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_ApplySystemSettings, bSaveSettings) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_ApplySystemSettings::bSaveSettings' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.BGUBindOnCultureChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct GSE_SystemSettingsFuncLib_BGUBindOnCultureChangedEvent final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FuncName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_BGUBindOnCultureChangedEvent) == 0x000008, "Wrong alignment on GSE_SystemSettingsFuncLib_BGUBindOnCultureChangedEvent");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_BGUBindOnCultureChangedEvent) == 0x000010, "Wrong size on GSE_SystemSettingsFuncLib_BGUBindOnCultureChangedEvent");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_BGUBindOnCultureChangedEvent, Obj) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_BGUBindOnCultureChangedEvent::Obj' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_BGUBindOnCultureChangedEvent, FuncName) == 0x000008, "Member 'GSE_SystemSettingsFuncLib_BGUBindOnCultureChangedEvent::FuncName' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.BGUBindOnMonitorAsPrimaryChange
// 0x0010 (0x0010 - 0x0000)
struct GSE_SystemSettingsFuncLib_BGUBindOnMonitorAsPrimaryChange final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FuncName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_BGUBindOnMonitorAsPrimaryChange) == 0x000008, "Wrong alignment on GSE_SystemSettingsFuncLib_BGUBindOnMonitorAsPrimaryChange");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_BGUBindOnMonitorAsPrimaryChange) == 0x000010, "Wrong size on GSE_SystemSettingsFuncLib_BGUBindOnMonitorAsPrimaryChange");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_BGUBindOnMonitorAsPrimaryChange, Obj) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_BGUBindOnMonitorAsPrimaryChange::Obj' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_BGUBindOnMonitorAsPrimaryChange, FuncName) == 0x000008, "Member 'GSE_SystemSettingsFuncLib_BGUBindOnMonitorAsPrimaryChange::FuncName' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.BGUBindOnViewportResizedEvent
// 0x0010 (0x0010 - 0x0000)
struct GSE_SystemSettingsFuncLib_BGUBindOnViewportResizedEvent final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FuncName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_BGUBindOnViewportResizedEvent) == 0x000008, "Wrong alignment on GSE_SystemSettingsFuncLib_BGUBindOnViewportResizedEvent");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_BGUBindOnViewportResizedEvent) == 0x000010, "Wrong size on GSE_SystemSettingsFuncLib_BGUBindOnViewportResizedEvent");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_BGUBindOnViewportResizedEvent, Obj) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_BGUBindOnViewportResizedEvent::Obj' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_BGUBindOnViewportResizedEvent, FuncName) == 0x000008, "Member 'GSE_SystemSettingsFuncLib_BGUBindOnViewportResizedEvent::FuncName' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.BGUUnBindOnCultureChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct GSE_SystemSettingsFuncLib_BGUUnBindOnCultureChangedEvent final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FuncName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_BGUUnBindOnCultureChangedEvent) == 0x000008, "Wrong alignment on GSE_SystemSettingsFuncLib_BGUUnBindOnCultureChangedEvent");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_BGUUnBindOnCultureChangedEvent) == 0x000010, "Wrong size on GSE_SystemSettingsFuncLib_BGUUnBindOnCultureChangedEvent");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_BGUUnBindOnCultureChangedEvent, Obj) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_BGUUnBindOnCultureChangedEvent::Obj' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_BGUUnBindOnCultureChangedEvent, FuncName) == 0x000008, "Member 'GSE_SystemSettingsFuncLib_BGUUnBindOnCultureChangedEvent::FuncName' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.BGUUnBindOnMonitorAsPrimaryChange
// 0x0010 (0x0010 - 0x0000)
struct GSE_SystemSettingsFuncLib_BGUUnBindOnMonitorAsPrimaryChange final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FuncName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_BGUUnBindOnMonitorAsPrimaryChange) == 0x000008, "Wrong alignment on GSE_SystemSettingsFuncLib_BGUUnBindOnMonitorAsPrimaryChange");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_BGUUnBindOnMonitorAsPrimaryChange) == 0x000010, "Wrong size on GSE_SystemSettingsFuncLib_BGUUnBindOnMonitorAsPrimaryChange");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_BGUUnBindOnMonitorAsPrimaryChange, Obj) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_BGUUnBindOnMonitorAsPrimaryChange::Obj' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_BGUUnBindOnMonitorAsPrimaryChange, FuncName) == 0x000008, "Member 'GSE_SystemSettingsFuncLib_BGUUnBindOnMonitorAsPrimaryChange::FuncName' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.BGUUnBindOnViewportResizedEvent
// 0x0010 (0x0010 - 0x0000)
struct GSE_SystemSettingsFuncLib_BGUUnBindOnViewportResizedEvent final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FuncName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_BGUUnBindOnViewportResizedEvent) == 0x000008, "Wrong alignment on GSE_SystemSettingsFuncLib_BGUUnBindOnViewportResizedEvent");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_BGUUnBindOnViewportResizedEvent) == 0x000010, "Wrong size on GSE_SystemSettingsFuncLib_BGUUnBindOnViewportResizedEvent");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_BGUUnBindOnViewportResizedEvent, Obj) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_BGUUnBindOnViewportResizedEvent::Obj' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_BGUUnBindOnViewportResizedEvent, FuncName) == 0x000008, "Member 'GSE_SystemSettingsFuncLib_BGUUnBindOnViewportResizedEvent::FuncName' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.EngineSettingGetString
// 0x0030 (0x0030 - 0x0000)
struct GSE_SystemSettingsFuncLib_EngineSettingGetString final
{
public:
	class FString                                 Section;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_EngineSettingGetString) == 0x000008, "Wrong alignment on GSE_SystemSettingsFuncLib_EngineSettingGetString");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_EngineSettingGetString) == 0x000030, "Wrong size on GSE_SystemSettingsFuncLib_EngineSettingGetString");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_EngineSettingGetString, Section) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_EngineSettingGetString::Section' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_EngineSettingGetString, Key) == 0x000010, "Member 'GSE_SystemSettingsFuncLib_EngineSettingGetString::Key' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_EngineSettingGetString, ReturnValue) == 0x000020, "Member 'GSE_SystemSettingsFuncLib_EngineSettingGetString::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetAllMonitorInfo
// 0x0010 (0x0010 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetAllMonitorInfo final
{
public:
	TArray<struct FGSMonitorInfo>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetAllMonitorInfo) == 0x000008, "Wrong alignment on GSE_SystemSettingsFuncLib_GetAllMonitorInfo");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetAllMonitorInfo) == 0x000010, "Wrong size on GSE_SystemSettingsFuncLib_GetAllMonitorInfo");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetAllMonitorInfo, ReturnValue) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetAllMonitorInfo::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetAvailableGraphicsMemory
// 0x0008 (0x0008 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetAvailableGraphicsMemory final
{
public:
	EGSGraphicsMemoryMode                         InQueryType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetAvailableGraphicsMemory) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GetAvailableGraphicsMemory");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetAvailableGraphicsMemory) == 0x000008, "Wrong size on GSE_SystemSettingsFuncLib_GetAvailableGraphicsMemory");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetAvailableGraphicsMemory, InQueryType) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetAvailableGraphicsMemory::InQueryType' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetAvailableGraphicsMemory, ReturnValue) == 0x000004, "Member 'GSE_SystemSettingsFuncLib_GetAvailableGraphicsMemory::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetAvailableResolutions
// 0x0010 (0x0010 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetAvailableResolutions final
{
public:
	TArray<struct FIntPoint>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetAvailableResolutions) == 0x000008, "Wrong alignment on GSE_SystemSettingsFuncLib_GetAvailableResolutions");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetAvailableResolutions) == 0x000010, "Wrong size on GSE_SystemSettingsFuncLib_GetAvailableResolutions");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetAvailableResolutions, ReturnValue) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetAvailableResolutions::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetAvailableResolutionsByMonitorID
// 0x0018 (0x0018 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetAvailableResolutionsByMonitorID final
{
public:
	int32                                         InMonitorID;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FIntPoint>                      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetAvailableResolutionsByMonitorID) == 0x000008, "Wrong alignment on GSE_SystemSettingsFuncLib_GetAvailableResolutionsByMonitorID");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetAvailableResolutionsByMonitorID) == 0x000018, "Wrong size on GSE_SystemSettingsFuncLib_GetAvailableResolutionsByMonitorID");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetAvailableResolutionsByMonitorID, InMonitorID) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetAvailableResolutionsByMonitorID::InMonitorID' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetAvailableResolutionsByMonitorID, ReturnValue) == 0x000008, "Member 'GSE_SystemSettingsFuncLib_GetAvailableResolutionsByMonitorID::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCPUUsedPercentage
// 0x0004 (0x0004 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetCPUUsedPercentage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetCPUUsedPercentage) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GetCPUUsedPercentage");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetCPUUsedPercentage) == 0x000004, "Wrong size on GSE_SystemSettingsFuncLib_GetCPUUsedPercentage");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetCPUUsedPercentage, ReturnValue) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetCPUUsedPercentage::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCPUUsedTime
// 0x0004 (0x0004 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetCPUUsedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetCPUUsedTime) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GetCPUUsedTime");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetCPUUsedTime) == 0x000004, "Wrong size on GSE_SystemSettingsFuncLib_GetCPUUsedTime");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetCPUUsedTime, ReturnValue) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetCPUUsedTime::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCurrentFPS
// 0x0004 (0x0004 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetCurrentFPS final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetCurrentFPS) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GetCurrentFPS");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetCurrentFPS) == 0x000004, "Wrong size on GSE_SystemSettingsFuncLib_GetCurrentFPS");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetCurrentFPS, ReturnValue) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetCurrentFPS::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCurrentResolution
// 0x0008 (0x0008 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetCurrentResolution final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetCurrentResolution) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GetCurrentResolution");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetCurrentResolution) == 0x000008, "Wrong size on GSE_SystemSettingsFuncLib_GetCurrentResolution");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetCurrentResolution, ReturnValue) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetCurrentResolution::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCurrentScalabilityQualities
// 0x0014 (0x0014 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetCurrentScalabilityQualities final
{
public:
	bool                                          bLogInfo;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGSScalabilityQualities                ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetCurrentScalabilityQualities) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GetCurrentScalabilityQualities");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetCurrentScalabilityQualities) == 0x000014, "Wrong size on GSE_SystemSettingsFuncLib_GetCurrentScalabilityQualities");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetCurrentScalabilityQualities, bLogInfo) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetCurrentScalabilityQualities::bLogInfo' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetCurrentScalabilityQualities, ReturnValue) == 0x000004, "Member 'GSE_SystemSettingsFuncLib_GetCurrentScalabilityQualities::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCurrentScalabilityQuality
// 0x0014 (0x0014 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetCurrentScalabilityQuality final
{
public:
	bool                                          bLogInfo;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGSScalabilityQualities                ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetCurrentScalabilityQuality) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GetCurrentScalabilityQuality");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetCurrentScalabilityQuality) == 0x000014, "Wrong size on GSE_SystemSettingsFuncLib_GetCurrentScalabilityQuality");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetCurrentScalabilityQuality, bLogInfo) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetCurrentScalabilityQuality::bLogInfo' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetCurrentScalabilityQuality, ReturnValue) == 0x000004, "Member 'GSE_SystemSettingsFuncLib_GetCurrentScalabilityQuality::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCurrentScreenMode
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetCurrentScreenMode final
{
public:
	EGSScreenMode                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetCurrentScreenMode) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_GetCurrentScreenMode");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetCurrentScreenMode) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_GetCurrentScreenMode");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetCurrentScreenMode, ReturnValue) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetCurrentScreenMode::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetCurrentScreenModeV2
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetCurrentScreenModeV2 final
{
public:
	EWindowMode                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetCurrentScreenModeV2) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_GetCurrentScreenModeV2");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetCurrentScreenModeV2) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_GetCurrentScreenModeV2");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetCurrentScreenModeV2, ReturnValue) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetCurrentScreenModeV2::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetFrameRateLimit
// 0x0004 (0x0004 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetFrameRateLimit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetFrameRateLimit) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GetFrameRateLimit");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetFrameRateLimit) == 0x000004, "Wrong size on GSE_SystemSettingsFuncLib_GetFrameRateLimit");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetFrameRateLimit, ReturnValue) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetFrameRateLimit::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetGPUUsedPercentage
// 0x0004 (0x0004 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetGPUUsedPercentage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetGPUUsedPercentage) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GetGPUUsedPercentage");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetGPUUsedPercentage) == 0x000004, "Wrong size on GSE_SystemSettingsFuncLib_GetGPUUsedPercentage");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetGPUUsedPercentage, ReturnValue) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetGPUUsedPercentage::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetGPUUsedTime
// 0x0004 (0x0004 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetGPUUsedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetGPUUsedTime) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GetGPUUsedTime");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetGPUUsedTime) == 0x000004, "Wrong size on GSE_SystemSettingsFuncLib_GetGPUUsedTime");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetGPUUsedTime, ReturnValue) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetGPUUsedTime::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetGraphicsMemoryInfo
// 0x0008 (0x0008 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetGraphicsMemoryInfo final
{
public:
	EGSGraphicsMemoryMode                         InGraphicsMemoryMode;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetGraphicsMemoryInfo) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GetGraphicsMemoryInfo");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetGraphicsMemoryInfo) == 0x000008, "Wrong size on GSE_SystemSettingsFuncLib_GetGraphicsMemoryInfo");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetGraphicsMemoryInfo, InGraphicsMemoryMode) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetGraphicsMemoryInfo::InGraphicsMemoryMode' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetGraphicsMemoryInfo, ReturnValue) == 0x000004, "Member 'GSE_SystemSettingsFuncLib_GetGraphicsMemoryInfo::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetGSystemResolution
// 0x0008 (0x0008 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetGSystemResolution final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetGSystemResolution) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GetGSystemResolution");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetGSystemResolution) == 0x000008, "Wrong size on GSE_SystemSettingsFuncLib_GetGSystemResolution");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetGSystemResolution, ReturnValue) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetGSystemResolution::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetProportionalResolutions
// 0x0018 (0x0018 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetProportionalResolutions final
{
public:
	struct FIntPoint                              AspectRatio;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIntPoint>                      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetProportionalResolutions) == 0x000008, "Wrong alignment on GSE_SystemSettingsFuncLib_GetProportionalResolutions");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetProportionalResolutions) == 0x000018, "Wrong size on GSE_SystemSettingsFuncLib_GetProportionalResolutions");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetProportionalResolutions, AspectRatio) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetProportionalResolutions::AspectRatio' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetProportionalResolutions, ReturnValue) == 0x000008, "Member 'GSE_SystemSettingsFuncLib_GetProportionalResolutions::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetRecommendedScalabilityQuality
// 0x0014 (0x0014 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetRecommendedScalabilityQuality final
{
public:
	bool                                          bLogInfo;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGSScalabilityQualities                ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetRecommendedScalabilityQuality) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GetRecommendedScalabilityQuality");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetRecommendedScalabilityQuality) == 0x000014, "Wrong size on GSE_SystemSettingsFuncLib_GetRecommendedScalabilityQuality");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetRecommendedScalabilityQuality, bLogInfo) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetRecommendedScalabilityQuality::bLogInfo' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetRecommendedScalabilityQuality, ReturnValue) == 0x000004, "Member 'GSE_SystemSettingsFuncLib_GetRecommendedScalabilityQuality::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetResolutionScaleFromQualityLevel
// 0x0008 (0x0008 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetResolutionScaleFromQualityLevel final
{
public:
	EScalabilityQuality                           InQualityLevel;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetResolutionScaleFromQualityLevel) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GetResolutionScaleFromQualityLevel");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetResolutionScaleFromQualityLevel) == 0x000008, "Wrong size on GSE_SystemSettingsFuncLib_GetResolutionScaleFromQualityLevel");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetResolutionScaleFromQualityLevel, InQualityLevel) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetResolutionScaleFromQualityLevel::InQualityLevel' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetResolutionScaleFromQualityLevel, ReturnValue) == 0x000004, "Member 'GSE_SystemSettingsFuncLib_GetResolutionScaleFromQualityLevel::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetScreenSize
// 0x0010 (0x0010 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetScreenSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetScreenSize) == 0x000008, "Wrong alignment on GSE_SystemSettingsFuncLib_GetScreenSize");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetScreenSize) == 0x000010, "Wrong size on GSE_SystemSettingsFuncLib_GetScreenSize");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetScreenSize, ReturnValue) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetScreenSize::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetUsedGraphicsMemory
// 0x0008 (0x0008 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetUsedGraphicsMemory final
{
public:
	EGSGraphicsMemoryMode                         InQueryType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetUsedGraphicsMemory) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GetUsedGraphicsMemory");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetUsedGraphicsMemory) == 0x000008, "Wrong size on GSE_SystemSettingsFuncLib_GetUsedGraphicsMemory");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetUsedGraphicsMemory, InQueryType) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetUsedGraphicsMemory::InQueryType' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetUsedGraphicsMemory, ReturnValue) == 0x000004, "Member 'GSE_SystemSettingsFuncLib_GetUsedGraphicsMemory::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GetVSyncEnabled
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_GetVSyncEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GetVSyncEnabled) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_GetVSyncEnabled");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GetVSyncEnabled) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_GetVSyncEnabled");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GetVSyncEnabled, ReturnValue) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GetVSyncEnabled::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.GMChangeMonitorAsPrimary
// 0x0004 (0x0004 - 0x0000)
struct GSE_SystemSettingsFuncLib_GMChangeMonitorAsPrimary final
{
public:
	int32                                         MonitorIdx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_GMChangeMonitorAsPrimary) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_GMChangeMonitorAsPrimary");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_GMChangeMonitorAsPrimary) == 0x000004, "Wrong size on GSE_SystemSettingsFuncLib_GMChangeMonitorAsPrimary");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_GMChangeMonitorAsPrimary, MonitorIdx) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_GMChangeMonitorAsPrimary::MonitorIdx' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetAntiAliasingQuality
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetAntiAliasingQuality final
{
public:
	EScalabilityQuality                           InAntiAliasingQuality;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetAntiAliasingQuality) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetAntiAliasingQuality");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetAntiAliasingQuality) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetAntiAliasingQuality");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetAntiAliasingQuality, InAntiAliasingQuality) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetAntiAliasingQuality::InAntiAliasingQuality' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetEffectsQuality
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetEffectsQuality final
{
public:
	EScalabilityQuality                           InEffectQuality;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetEffectsQuality) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetEffectsQuality");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetEffectsQuality) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetEffectsQuality");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetEffectsQuality, InEffectQuality) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetEffectsQuality::InEffectQuality' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetFoliageQuality
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetFoliageQuality final
{
public:
	EScalabilityQuality                           InFoliageQuality;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetFoliageQuality) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetFoliageQuality");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetFoliageQuality) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetFoliageQuality");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetFoliageQuality, InFoliageQuality) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetFoliageQuality::InFoliageQuality' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetFrameRateLimit
// 0x0004 (0x0004 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetFrameRateLimit final
{
public:
	float                                         InFrameRateLimit;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetFrameRateLimit) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_SetFrameRateLimit");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetFrameRateLimit) == 0x000004, "Wrong size on GSE_SystemSettingsFuncLib_SetFrameRateLimit");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetFrameRateLimit, InFrameRateLimit) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetFrameRateLimit::InFrameRateLimit' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetGlobalIlluminationQuality
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetGlobalIlluminationQuality final
{
public:
	EScalabilityQuality                           InGIQuality;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetGlobalIlluminationQuality) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetGlobalIlluminationQuality");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetGlobalIlluminationQuality) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetGlobalIlluminationQuality");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetGlobalIlluminationQuality, InGIQuality) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetGlobalIlluminationQuality::InGIQuality' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetMonitorAsPrimary
// 0x0010 (0x0010 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetMonitorAsPrimary final
{
public:
	class FString                                 MonitorID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetMonitorAsPrimary) == 0x000008, "Wrong alignment on GSE_SystemSettingsFuncLib_SetMonitorAsPrimary");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetMonitorAsPrimary) == 0x000010, "Wrong size on GSE_SystemSettingsFuncLib_SetMonitorAsPrimary");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetMonitorAsPrimary, MonitorID) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetMonitorAsPrimary::MonitorID' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetMonitorAsPrimaryV2
// 0x0010 (0x0010 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetMonitorAsPrimaryV2 final
{
public:
	class FString                                 InMonitorID;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetMonitorAsPrimaryV2) == 0x000008, "Wrong alignment on GSE_SystemSettingsFuncLib_SetMonitorAsPrimaryV2");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetMonitorAsPrimaryV2) == 0x000010, "Wrong size on GSE_SystemSettingsFuncLib_SetMonitorAsPrimaryV2");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetMonitorAsPrimaryV2, InMonitorID) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetMonitorAsPrimaryV2::InMonitorID' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetPostProcessQuality
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetPostProcessQuality final
{
public:
	EScalabilityQuality                           InPostProcessQuality;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetPostProcessQuality) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetPostProcessQuality");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetPostProcessQuality) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetPostProcessQuality");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetPostProcessQuality, InPostProcessQuality) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetPostProcessQuality::InPostProcessQuality' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetPriorityMode
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetPriorityMode final
{
public:
	EGSPriorityMode                               InPriorityMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetPriorityMode) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetPriorityMode");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetPriorityMode) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetPriorityMode");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetPriorityMode, InPriorityMode) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetPriorityMode::InPriorityMode' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetReflectionQuality
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetReflectionQuality final
{
public:
	EScalabilityQuality                           InReflectionQuality;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetReflectionQuality) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetReflectionQuality");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetReflectionQuality) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetReflectionQuality");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetReflectionQuality, InReflectionQuality) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetReflectionQuality::InReflectionQuality' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetResolutionQualityLevel
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetResolutionQualityLevel final
{
public:
	EScalabilityQuality                           InResolutionQualityLevel;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetResolutionQualityLevel) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetResolutionQualityLevel");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetResolutionQualityLevel) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetResolutionQualityLevel");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetResolutionQualityLevel, InResolutionQualityLevel) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetResolutionQualityLevel::InResolutionQualityLevel' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetResolutionQualityScale
// 0x0004 (0x0004 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetResolutionQualityScale final
{
public:
	float                                         InResolutionQualityScale;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetResolutionQualityScale) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_SetResolutionQualityScale");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetResolutionQualityScale) == 0x000004, "Wrong size on GSE_SystemSettingsFuncLib_SetResolutionQualityScale");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetResolutionQualityScale, InResolutionQualityScale) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetResolutionQualityScale::InResolutionQualityScale' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetScalabilityQualities
// 0x0010 (0x0010 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetScalabilityQualities final
{
public:
	struct FGSScalabilityQualities                Qualities;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetScalabilityQualities) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_SetScalabilityQualities");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetScalabilityQualities) == 0x000010, "Wrong size on GSE_SystemSettingsFuncLib_SetScalabilityQualities");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetScalabilityQualities, Qualities) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetScalabilityQualities::Qualities' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetScalabilityQuality
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetScalabilityQuality final
{
public:
	EScalabilityQuality                           TargetGSQualityLevel;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetScalabilityQuality) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetScalabilityQuality");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetScalabilityQuality) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetScalabilityQuality");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetScalabilityQuality, TargetGSQualityLevel) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetScalabilityQuality::TargetGSQualityLevel' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetScreenPos
// 0x0010 (0x0010 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetScreenPos final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetScreenPos) == 0x000008, "Wrong alignment on GSE_SystemSettingsFuncLib_SetScreenPos");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetScreenPos) == 0x000010, "Wrong size on GSE_SystemSettingsFuncLib_SetScreenPos");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetScreenPos, Position) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetScreenPos::Position' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetShadingQuality
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetShadingQuality final
{
public:
	EScalabilityQuality                           InShadingQuality;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetShadingQuality) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetShadingQuality");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetShadingQuality) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetShadingQuality");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetShadingQuality, InShadingQuality) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetShadingQuality::InShadingQuality' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetShadowQuality
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetShadowQuality final
{
public:
	EScalabilityQuality                           InShadowQuality;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetShadowQuality) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetShadowQuality");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetShadowQuality) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetShadowQuality");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetShadowQuality, InShadowQuality) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetShadowQuality::InShadowQuality' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetTargetResolution
// 0x000C (0x000C - 0x0000)
struct GSE_SystemSettingsFuncLib_SetTargetResolution final
{
public:
	struct FIntPoint                              TargetResolution;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedFresh;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetTargetResolution) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_SetTargetResolution");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetTargetResolution) == 0x00000C, "Wrong size on GSE_SystemSettingsFuncLib_SetTargetResolution");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetTargetResolution, TargetResolution) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetTargetResolution::TargetResolution' has a wrong offset!");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetTargetResolution, NeedFresh) == 0x000008, "Member 'GSE_SystemSettingsFuncLib_SetTargetResolution::NeedFresh' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetTargetScreenMode
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetTargetScreenMode final
{
public:
	EGSScreenMode                                 TargetScreenMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetTargetScreenMode) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetTargetScreenMode");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetTargetScreenMode) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetTargetScreenMode");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetTargetScreenMode, TargetScreenMode) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetTargetScreenMode::TargetScreenMode' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetTargetScreenModeV2
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetTargetScreenModeV2 final
{
public:
	EWindowMode                                   TargetWindowMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetTargetScreenModeV2) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetTargetScreenModeV2");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetTargetScreenModeV2) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetTargetScreenModeV2");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetTargetScreenModeV2, TargetWindowMode) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetTargetScreenModeV2::TargetWindowMode' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetTextureQuality
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetTextureQuality final
{
public:
	EScalabilityQuality                           InTextureQuality;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetTextureQuality) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetTextureQuality");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetTextureQuality) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetTextureQuality");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetTextureQuality, InTextureQuality) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetTextureQuality::InTextureQuality' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetViewDistanceQuality
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetViewDistanceQuality final
{
public:
	EScalabilityQuality                           InViewDistanceQuality;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetViewDistanceQuality) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetViewDistanceQuality");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetViewDistanceQuality) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetViewDistanceQuality");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetViewDistanceQuality, InViewDistanceQuality) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetViewDistanceQuality::InViewDistanceQuality' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.SetVSyncEnabled
// 0x0001 (0x0001 - 0x0000)
struct GSE_SystemSettingsFuncLib_SetVSyncEnabled final
{
public:
	bool                                          bEnableVSync;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_SetVSyncEnabled) == 0x000001, "Wrong alignment on GSE_SystemSettingsFuncLib_SetVSyncEnabled");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_SetVSyncEnabled) == 0x000001, "Wrong size on GSE_SystemSettingsFuncLib_SetVSyncEnabled");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_SetVSyncEnabled, bEnableVSync) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_SetVSyncEnabled::bEnableVSync' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.OnMonitorAsPrimaryChange
// 0x0004 (0x0004 - 0x0000)
struct GSE_SystemSettingsFuncLib_OnMonitorAsPrimaryChange final
{
public:
	int32                                         TargetPrimaryMonitorIndex;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_OnMonitorAsPrimaryChange) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_OnMonitorAsPrimaryChange");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_OnMonitorAsPrimaryChange) == 0x000004, "Wrong size on GSE_SystemSettingsFuncLib_OnMonitorAsPrimaryChange");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_OnMonitorAsPrimaryChange, TargetPrimaryMonitorIndex) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_OnMonitorAsPrimaryChange::TargetPrimaryMonitorIndex' has a wrong offset!");

// Function UnrealExtent.GSE_SystemSettingsFuncLib.OnViewportResizedEvent
// 0x0008 (0x0008 - 0x0000)
struct GSE_SystemSettingsFuncLib_OnViewportResizedEvent final
{
public:
	struct FIntPoint                              NewSize;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_SystemSettingsFuncLib_OnViewportResizedEvent) == 0x000004, "Wrong alignment on GSE_SystemSettingsFuncLib_OnViewportResizedEvent");
//static_assert(sizeof(GSE_SystemSettingsFuncLib_OnViewportResizedEvent) == 0x000008, "Wrong size on GSE_SystemSettingsFuncLib_OnViewportResizedEvent");
//static_assert(offsetof(GSE_SystemSettingsFuncLib_OnViewportResizedEvent, NewSize) == 0x000000, "Member 'GSE_SystemSettingsFuncLib_OnViewportResizedEvent::NewSize' has a wrong offset!");

// Function UnrealExtent.GSE_TextureFuncLib.BuildStreamedLowMips
// 0x0008 (0x0008 - 0x0000)
struct GSE_TextureFuncLib_BuildStreamedLowMips final
{
public:
	class URuntimeVirtualTextureComponent*        RVTComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_TextureFuncLib_BuildStreamedLowMips) == 0x000008, "Wrong alignment on GSE_TextureFuncLib_BuildStreamedLowMips");
//static_assert(sizeof(GSE_TextureFuncLib_BuildStreamedLowMips) == 0x000008, "Wrong size on GSE_TextureFuncLib_BuildStreamedLowMips");
//static_assert(offsetof(GSE_TextureFuncLib_BuildStreamedLowMips, RVTComponent) == 0x000000, "Member 'GSE_TextureFuncLib_BuildStreamedLowMips::RVTComponent' has a wrong offset!");

// Function UnrealExtent.GSE_TextureFuncLib.CalculateAverageColorInTiles
// 0x0028 (0x0028 - 0x0000)
struct GSE_TextureFuncLib_CalculateAverageColorInTiles final
{
public:
	class UTexture2D*                             InTexture;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              TileCount;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugLog;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_TextureFuncLib_CalculateAverageColorInTiles) == 0x000008, "Wrong alignment on GSE_TextureFuncLib_CalculateAverageColorInTiles");
//static_assert(sizeof(GSE_TextureFuncLib_CalculateAverageColorInTiles) == 0x000028, "Wrong size on GSE_TextureFuncLib_CalculateAverageColorInTiles");
//static_assert(offsetof(GSE_TextureFuncLib_CalculateAverageColorInTiles, InTexture) == 0x000000, "Member 'GSE_TextureFuncLib_CalculateAverageColorInTiles::InTexture' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CalculateAverageColorInTiles, TileCount) == 0x000008, "Member 'GSE_TextureFuncLib_CalculateAverageColorInTiles::TileCount' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CalculateAverageColorInTiles, bDebugLog) == 0x000010, "Member 'GSE_TextureFuncLib_CalculateAverageColorInTiles::bDebugLog' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CalculateAverageColorInTiles, ReturnValue) == 0x000018, "Member 'GSE_TextureFuncLib_CalculateAverageColorInTiles::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_TextureFuncLib.ChangeImageMaterial
// 0x0028 (0x0028 - 0x0000)
struct GSE_TextureFuncLib_ChangeImageMaterial final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Image;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatPath;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_TextureFuncLib_ChangeImageMaterial) == 0x000008, "Wrong alignment on GSE_TextureFuncLib_ChangeImageMaterial");
//static_assert(sizeof(GSE_TextureFuncLib_ChangeImageMaterial) == 0x000028, "Wrong size on GSE_TextureFuncLib_ChangeImageMaterial");
//static_assert(offsetof(GSE_TextureFuncLib_ChangeImageMaterial, WorldContextObject) == 0x000000, "Member 'GSE_TextureFuncLib_ChangeImageMaterial::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_ChangeImageMaterial, Image) == 0x000008, "Member 'GSE_TextureFuncLib_ChangeImageMaterial::Image' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_ChangeImageMaterial, MatPath) == 0x000010, "Member 'GSE_TextureFuncLib_ChangeImageMaterial::MatPath' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_ChangeImageMaterial, ReturnValue) == 0x000020, "Member 'GSE_TextureFuncLib_ChangeImageMaterial::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_TextureFuncLib.CreateRenderTarget2D
// 0x0028 (0x0028 - 0x0000)
struct GSE_TextureFuncLib_CreateRenderTarget2D final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ClearColor;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_TextureFuncLib_CreateRenderTarget2D) == 0x000008, "Wrong alignment on GSE_TextureFuncLib_CreateRenderTarget2D");
//static_assert(sizeof(GSE_TextureFuncLib_CreateRenderTarget2D) == 0x000028, "Wrong size on GSE_TextureFuncLib_CreateRenderTarget2D");
//static_assert(offsetof(GSE_TextureFuncLib_CreateRenderTarget2D, WorldContextObject) == 0x000000, "Member 'GSE_TextureFuncLib_CreateRenderTarget2D::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CreateRenderTarget2D, Width) == 0x000008, "Member 'GSE_TextureFuncLib_CreateRenderTarget2D::Width' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CreateRenderTarget2D, Height) == 0x00000C, "Member 'GSE_TextureFuncLib_CreateRenderTarget2D::Height' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CreateRenderTarget2D, ClearColor) == 0x000010, "Member 'GSE_TextureFuncLib_CreateRenderTarget2D::ClearColor' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CreateRenderTarget2D, ReturnValue) == 0x000020, "Member 'GSE_TextureFuncLib_CreateRenderTarget2D::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_TextureFuncLib.CreateStaticTexture2D
// 0x0028 (0x0028 - 0x0000)
struct GSE_TextureFuncLib_CreateStaticTexture2D final
{
public:
	class UTextureRenderTarget2D*                 SourceRT;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutputPath;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutputFileName;                                    // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_TextureFuncLib_CreateStaticTexture2D) == 0x000008, "Wrong alignment on GSE_TextureFuncLib_CreateStaticTexture2D");
//static_assert(sizeof(GSE_TextureFuncLib_CreateStaticTexture2D) == 0x000028, "Wrong size on GSE_TextureFuncLib_CreateStaticTexture2D");
//static_assert(offsetof(GSE_TextureFuncLib_CreateStaticTexture2D, SourceRT) == 0x000000, "Member 'GSE_TextureFuncLib_CreateStaticTexture2D::SourceRT' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CreateStaticTexture2D, OutputPath) == 0x000008, "Member 'GSE_TextureFuncLib_CreateStaticTexture2D::OutputPath' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CreateStaticTexture2D, OutputFileName) == 0x000018, "Member 'GSE_TextureFuncLib_CreateStaticTexture2D::OutputFileName' has a wrong offset!");

// Function UnrealExtent.GSE_TextureFuncLib.CreateTexture2D
// 0x0028 (0x0028 - 0x0000)
struct GSE_TextureFuncLib_CreateTexture2D final
{
public:
	int32                                         SrcWidth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SrcHeight;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPixelFormat                                  InFormat;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_TextureFuncLib_CreateTexture2D) == 0x000008, "Wrong alignment on GSE_TextureFuncLib_CreateTexture2D");
//static_assert(sizeof(GSE_TextureFuncLib_CreateTexture2D) == 0x000028, "Wrong size on GSE_TextureFuncLib_CreateTexture2D");
//static_assert(offsetof(GSE_TextureFuncLib_CreateTexture2D, SrcWidth) == 0x000000, "Member 'GSE_TextureFuncLib_CreateTexture2D::SrcWidth' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CreateTexture2D, SrcHeight) == 0x000004, "Member 'GSE_TextureFuncLib_CreateTexture2D::SrcHeight' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CreateTexture2D, Name_0) == 0x000008, "Member 'GSE_TextureFuncLib_CreateTexture2D::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CreateTexture2D, InFormat) == 0x000018, "Member 'GSE_TextureFuncLib_CreateTexture2D::InFormat' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CreateTexture2D, ReturnValue) == 0x000020, "Member 'GSE_TextureFuncLib_CreateTexture2D::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_TextureFuncLib.CreateTexture2DFromColorData
// 0x0030 (0x0030 - 0x0000)
struct GSE_TextureFuncLib_CreateTexture2DFromColorData final
{
public:
	int32                                         SrcWidth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SrcHeight;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         ColorData;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_TextureFuncLib_CreateTexture2DFromColorData) == 0x000008, "Wrong alignment on GSE_TextureFuncLib_CreateTexture2DFromColorData");
//static_assert(sizeof(GSE_TextureFuncLib_CreateTexture2DFromColorData) == 0x000030, "Wrong size on GSE_TextureFuncLib_CreateTexture2DFromColorData");
//static_assert(offsetof(GSE_TextureFuncLib_CreateTexture2DFromColorData, SrcWidth) == 0x000000, "Member 'GSE_TextureFuncLib_CreateTexture2DFromColorData::SrcWidth' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CreateTexture2DFromColorData, SrcHeight) == 0x000004, "Member 'GSE_TextureFuncLib_CreateTexture2DFromColorData::SrcHeight' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CreateTexture2DFromColorData, ColorData) == 0x000008, "Member 'GSE_TextureFuncLib_CreateTexture2DFromColorData::ColorData' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CreateTexture2DFromColorData, Name_0) == 0x000018, "Member 'GSE_TextureFuncLib_CreateTexture2DFromColorData::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_CreateTexture2DFromColorData, ReturnValue) == 0x000028, "Member 'GSE_TextureFuncLib_CreateTexture2DFromColorData::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_TextureFuncLib.ExportColorDataAsPNG
// 0x0028 (0x0028 - 0x0000)
struct GSE_TextureFuncLib_ExportColorDataAsPNG final
{
public:
	int32                                         SrcWidth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SrcHeight;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColorBufferPtr                        ColorBuffer;                                       // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_TextureFuncLib_ExportColorDataAsPNG) == 0x000008, "Wrong alignment on GSE_TextureFuncLib_ExportColorDataAsPNG");
//static_assert(sizeof(GSE_TextureFuncLib_ExportColorDataAsPNG) == 0x000028, "Wrong size on GSE_TextureFuncLib_ExportColorDataAsPNG");
//static_assert(offsetof(GSE_TextureFuncLib_ExportColorDataAsPNG, SrcWidth) == 0x000000, "Member 'GSE_TextureFuncLib_ExportColorDataAsPNG::SrcWidth' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_ExportColorDataAsPNG, SrcHeight) == 0x000004, "Member 'GSE_TextureFuncLib_ExportColorDataAsPNG::SrcHeight' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_ExportColorDataAsPNG, FilePath) == 0x000008, "Member 'GSE_TextureFuncLib_ExportColorDataAsPNG::FilePath' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_ExportColorDataAsPNG, ColorBuffer) == 0x000018, "Member 'GSE_TextureFuncLib_ExportColorDataAsPNG::ColorBuffer' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_ExportColorDataAsPNG, Count) == 0x000020, "Member 'GSE_TextureFuncLib_ExportColorDataAsPNG::Count' has a wrong offset!");

// Function UnrealExtent.GSE_TextureFuncLib.ExportTexture2D
// 0x0030 (0x0030 - 0x0000)
struct GSE_TextureFuncLib_ExportTexture2D final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_TextureFuncLib_ExportTexture2D) == 0x000008, "Wrong alignment on GSE_TextureFuncLib_ExportTexture2D");
//static_assert(sizeof(GSE_TextureFuncLib_ExportTexture2D) == 0x000030, "Wrong size on GSE_TextureFuncLib_ExportTexture2D");
//static_assert(offsetof(GSE_TextureFuncLib_ExportTexture2D, WorldContextObject) == 0x000000, "Member 'GSE_TextureFuncLib_ExportTexture2D::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_ExportTexture2D, Texture) == 0x000008, "Member 'GSE_TextureFuncLib_ExportTexture2D::Texture' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_ExportTexture2D, FilePath) == 0x000010, "Member 'GSE_TextureFuncLib_ExportTexture2D::FilePath' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_ExportTexture2D, Filename) == 0x000020, "Member 'GSE_TextureFuncLib_ExportTexture2D::Filename' has a wrong offset!");

// Function UnrealExtent.GSE_TextureFuncLib.ReleaseRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct GSE_TextureFuncLib_ReleaseRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 TextureRenderTarget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_TextureFuncLib_ReleaseRenderTarget) == 0x000008, "Wrong alignment on GSE_TextureFuncLib_ReleaseRenderTarget");
//static_assert(sizeof(GSE_TextureFuncLib_ReleaseRenderTarget) == 0x000008, "Wrong size on GSE_TextureFuncLib_ReleaseRenderTarget");
//static_assert(offsetof(GSE_TextureFuncLib_ReleaseRenderTarget, TextureRenderTarget) == 0x000000, "Member 'GSE_TextureFuncLib_ReleaseRenderTarget::TextureRenderTarget' has a wrong offset!");

// Function UnrealExtent.GSE_TextureFuncLib.WriteToTexture_GameThread
// 0x0020 (0x0020 - 0x0000)
struct GSE_TextureFuncLib_WriteToTexture_GameThread final
{
public:
	class UTexture2D*                             TargetTexture;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColorBufferPtr                        ColorBuffer;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MipMapIndex;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_TextureFuncLib_WriteToTexture_GameThread) == 0x000008, "Wrong alignment on GSE_TextureFuncLib_WriteToTexture_GameThread");
//static_assert(sizeof(GSE_TextureFuncLib_WriteToTexture_GameThread) == 0x000020, "Wrong size on GSE_TextureFuncLib_WriteToTexture_GameThread");
//static_assert(offsetof(GSE_TextureFuncLib_WriteToTexture_GameThread, TargetTexture) == 0x000000, "Member 'GSE_TextureFuncLib_WriteToTexture_GameThread::TargetTexture' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_WriteToTexture_GameThread, ColorBuffer) == 0x000008, "Member 'GSE_TextureFuncLib_WriteToTexture_GameThread::ColorBuffer' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_WriteToTexture_GameThread, Count) == 0x000010, "Member 'GSE_TextureFuncLib_WriteToTexture_GameThread::Count' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_WriteToTexture_GameThread, MipMapIndex) == 0x000014, "Member 'GSE_TextureFuncLib_WriteToTexture_GameThread::MipMapIndex' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_WriteToTexture_GameThread, ReturnValue) == 0x000018, "Member 'GSE_TextureFuncLib_WriteToTexture_GameThread::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_TextureFuncLib.WriteToTexture_RenderingThread
// 0x0018 (0x0018 - 0x0000)
struct GSE_TextureFuncLib_WriteToTexture_RenderingThread final
{
public:
	class UTexture2D*                             TargetTexture;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColorBufferPtr                        ColorBuffer;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MipMapIndex;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_TextureFuncLib_WriteToTexture_RenderingThread) == 0x000008, "Wrong alignment on GSE_TextureFuncLib_WriteToTexture_RenderingThread");
//static_assert(sizeof(GSE_TextureFuncLib_WriteToTexture_RenderingThread) == 0x000018, "Wrong size on GSE_TextureFuncLib_WriteToTexture_RenderingThread");
//static_assert(offsetof(GSE_TextureFuncLib_WriteToTexture_RenderingThread, TargetTexture) == 0x000000, "Member 'GSE_TextureFuncLib_WriteToTexture_RenderingThread::TargetTexture' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_WriteToTexture_RenderingThread, ColorBuffer) == 0x000008, "Member 'GSE_TextureFuncLib_WriteToTexture_RenderingThread::ColorBuffer' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_WriteToTexture_RenderingThread, Count) == 0x000010, "Member 'GSE_TextureFuncLib_WriteToTexture_RenderingThread::Count' has a wrong offset!");
//static_assert(offsetof(GSE_TextureFuncLib_WriteToTexture_RenderingThread, MipMapIndex) == 0x000014, "Member 'GSE_TextureFuncLib_WriteToTexture_RenderingThread::MipMapIndex' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.AddNavigationActionKey
// 0x000C (0x000C - 0x0000)
struct GSE_UINavigationFuncLib_AddNavigationActionKey final
{
public:
	EUINavigationAction                           TargetNavigationAction;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KeyName;                                           // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_AddNavigationActionKey) == 0x000004, "Wrong alignment on GSE_UINavigationFuncLib_AddNavigationActionKey");
//static_assert(sizeof(GSE_UINavigationFuncLib_AddNavigationActionKey) == 0x00000C, "Wrong size on GSE_UINavigationFuncLib_AddNavigationActionKey");
//static_assert(offsetof(GSE_UINavigationFuncLib_AddNavigationActionKey, TargetNavigationAction) == 0x000000, "Member 'GSE_UINavigationFuncLib_AddNavigationActionKey::TargetNavigationAction' has a wrong offset!");
//static_assert(offsetof(GSE_UINavigationFuncLib_AddNavigationActionKey, KeyName) == 0x000004, "Member 'GSE_UINavigationFuncLib_AddNavigationActionKey::KeyName' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.AddNavigationKey
// 0x000C (0x000C - 0x0000)
struct GSE_UINavigationFuncLib_AddNavigationKey final
{
public:
	EUINavigation                                 TargetNavigation;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KeyName;                                           // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_AddNavigationKey) == 0x000004, "Wrong alignment on GSE_UINavigationFuncLib_AddNavigationKey");
//static_assert(sizeof(GSE_UINavigationFuncLib_AddNavigationKey) == 0x00000C, "Wrong size on GSE_UINavigationFuncLib_AddNavigationKey");
//static_assert(offsetof(GSE_UINavigationFuncLib_AddNavigationKey, TargetNavigation) == 0x000000, "Member 'GSE_UINavigationFuncLib_AddNavigationKey::TargetNavigation' has a wrong offset!");
//static_assert(offsetof(GSE_UINavigationFuncLib_AddNavigationKey, KeyName) == 0x000004, "Member 'GSE_UINavigationFuncLib_AddNavigationKey::KeyName' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.BlockConflictNavigation
// 0x0018 (0x0018 - 0x0000)
struct GSE_UINavigationFuncLib_BlockConflictNavigation final
{
public:
	EGSUIConflictNavigationType                   ConflictNavigationType;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlock;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EUINavigation>                         NotBlockNavigations;                               // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_BlockConflictNavigation) == 0x000008, "Wrong alignment on GSE_UINavigationFuncLib_BlockConflictNavigation");
//static_assert(sizeof(GSE_UINavigationFuncLib_BlockConflictNavigation) == 0x000018, "Wrong size on GSE_UINavigationFuncLib_BlockConflictNavigation");
//static_assert(offsetof(GSE_UINavigationFuncLib_BlockConflictNavigation, ConflictNavigationType) == 0x000000, "Member 'GSE_UINavigationFuncLib_BlockConflictNavigation::ConflictNavigationType' has a wrong offset!");
//static_assert(offsetof(GSE_UINavigationFuncLib_BlockConflictNavigation, bBlock) == 0x000001, "Member 'GSE_UINavigationFuncLib_BlockConflictNavigation::bBlock' has a wrong offset!");
//static_assert(offsetof(GSE_UINavigationFuncLib_BlockConflictNavigation, NotBlockNavigations) == 0x000008, "Member 'GSE_UINavigationFuncLib_BlockConflictNavigation::NotBlockNavigations' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.ClearNavigationActionKey
// 0x0008 (0x0008 - 0x0000)
struct GSE_UINavigationFuncLib_ClearNavigationActionKey final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_ClearNavigationActionKey) == 0x000004, "Wrong alignment on GSE_UINavigationFuncLib_ClearNavigationActionKey");
//static_assert(sizeof(GSE_UINavigationFuncLib_ClearNavigationActionKey) == 0x000008, "Wrong size on GSE_UINavigationFuncLib_ClearNavigationActionKey");
//static_assert(offsetof(GSE_UINavigationFuncLib_ClearNavigationActionKey, KeyName) == 0x000000, "Member 'GSE_UINavigationFuncLib_ClearNavigationActionKey::KeyName' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.ClearNavigationActionKeyByAction
// 0x0001 (0x0001 - 0x0000)
struct GSE_UINavigationFuncLib_ClearNavigationActionKeyByAction final
{
public:
	EUINavigationAction                           TargetNavigationAction;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_ClearNavigationActionKeyByAction) == 0x000001, "Wrong alignment on GSE_UINavigationFuncLib_ClearNavigationActionKeyByAction");
//static_assert(sizeof(GSE_UINavigationFuncLib_ClearNavigationActionKeyByAction) == 0x000001, "Wrong size on GSE_UINavigationFuncLib_ClearNavigationActionKeyByAction");
//static_assert(offsetof(GSE_UINavigationFuncLib_ClearNavigationActionKeyByAction, TargetNavigationAction) == 0x000000, "Member 'GSE_UINavigationFuncLib_ClearNavigationActionKeyByAction::TargetNavigationAction' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.ClearNavigationKey
// 0x0008 (0x0008 - 0x0000)
struct GSE_UINavigationFuncLib_ClearNavigationKey final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_ClearNavigationKey) == 0x000004, "Wrong alignment on GSE_UINavigationFuncLib_ClearNavigationKey");
//static_assert(sizeof(GSE_UINavigationFuncLib_ClearNavigationKey) == 0x000008, "Wrong size on GSE_UINavigationFuncLib_ClearNavigationKey");
//static_assert(offsetof(GSE_UINavigationFuncLib_ClearNavigationKey, KeyName) == 0x000000, "Member 'GSE_UINavigationFuncLib_ClearNavigationKey::KeyName' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.ClearNavigationKeyByNavigation
// 0x0001 (0x0001 - 0x0000)
struct GSE_UINavigationFuncLib_ClearNavigationKeyByNavigation final
{
public:
	EUINavigation                                 TargetNavigation;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_ClearNavigationKeyByNavigation) == 0x000001, "Wrong alignment on GSE_UINavigationFuncLib_ClearNavigationKeyByNavigation");
//static_assert(sizeof(GSE_UINavigationFuncLib_ClearNavigationKeyByNavigation) == 0x000001, "Wrong size on GSE_UINavigationFuncLib_ClearNavigationKeyByNavigation");
//static_assert(offsetof(GSE_UINavigationFuncLib_ClearNavigationKeyByNavigation, TargetNavigation) == 0x000000, "Member 'GSE_UINavigationFuncLib_ClearNavigationKeyByNavigation::TargetNavigation' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.GetIsNeedAnalogNavigation
// 0x0001 (0x0001 - 0x0000)
struct GSE_UINavigationFuncLib_GetIsNeedAnalogNavigation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_GetIsNeedAnalogNavigation) == 0x000001, "Wrong alignment on GSE_UINavigationFuncLib_GetIsNeedAnalogNavigation");
//static_assert(sizeof(GSE_UINavigationFuncLib_GetIsNeedAnalogNavigation) == 0x000001, "Wrong size on GSE_UINavigationFuncLib_GetIsNeedAnalogNavigation");
//static_assert(offsetof(GSE_UINavigationFuncLib_GetIsNeedAnalogNavigation, ReturnValue) == 0x000000, "Member 'GSE_UINavigationFuncLib_GetIsNeedAnalogNavigation::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.GetIsNeedKeyNavigation
// 0x0001 (0x0001 - 0x0000)
struct GSE_UINavigationFuncLib_GetIsNeedKeyNavigation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_GetIsNeedKeyNavigation) == 0x000001, "Wrong alignment on GSE_UINavigationFuncLib_GetIsNeedKeyNavigation");
//static_assert(sizeof(GSE_UINavigationFuncLib_GetIsNeedKeyNavigation) == 0x000001, "Wrong size on GSE_UINavigationFuncLib_GetIsNeedKeyNavigation");
//static_assert(offsetof(GSE_UINavigationFuncLib_GetIsNeedKeyNavigation, ReturnValue) == 0x000000, "Member 'GSE_UINavigationFuncLib_GetIsNeedKeyNavigation::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.GetIsNeedNavigationAction
// 0x0001 (0x0001 - 0x0000)
struct GSE_UINavigationFuncLib_GetIsNeedNavigationAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_GetIsNeedNavigationAction) == 0x000001, "Wrong alignment on GSE_UINavigationFuncLib_GetIsNeedNavigationAction");
//static_assert(sizeof(GSE_UINavigationFuncLib_GetIsNeedNavigationAction) == 0x000001, "Wrong size on GSE_UINavigationFuncLib_GetIsNeedNavigationAction");
//static_assert(offsetof(GSE_UINavigationFuncLib_GetIsNeedNavigationAction, ReturnValue) == 0x000000, "Member 'GSE_UINavigationFuncLib_GetIsNeedNavigationAction::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.GetIsNeedTabKeyNavigation
// 0x0001 (0x0001 - 0x0000)
struct GSE_UINavigationFuncLib_GetIsNeedTabKeyNavigation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_GetIsNeedTabKeyNavigation) == 0x000001, "Wrong alignment on GSE_UINavigationFuncLib_GetIsNeedTabKeyNavigation");
//static_assert(sizeof(GSE_UINavigationFuncLib_GetIsNeedTabKeyNavigation) == 0x000001, "Wrong size on GSE_UINavigationFuncLib_GetIsNeedTabKeyNavigation");
//static_assert(offsetof(GSE_UINavigationFuncLib_GetIsNeedTabKeyNavigation, ReturnValue) == 0x000000, "Member 'GSE_UINavigationFuncLib_GetIsNeedTabKeyNavigation::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.GetNavigationActionFromKey
// 0x0040 (0x0040 - 0x0000)
struct GSE_UINavigationFuncLib_GetNavigationActionFromKey final
{
public:
	struct FKeyEvent                              InKeyEvent;                                        // 0x0000(0x0038)(ConstParm, Parm, NativeAccessSpecifierPublic)
	EUINavigationAction                           ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UINavigationFuncLib_GetNavigationActionFromKey) == 0x000008, "Wrong alignment on GSE_UINavigationFuncLib_GetNavigationActionFromKey");
//static_assert(sizeof(GSE_UINavigationFuncLib_GetNavigationActionFromKey) == 0x000040, "Wrong size on GSE_UINavigationFuncLib_GetNavigationActionFromKey");
//static_assert(offsetof(GSE_UINavigationFuncLib_GetNavigationActionFromKey, InKeyEvent) == 0x000000, "Member 'GSE_UINavigationFuncLib_GetNavigationActionFromKey::InKeyEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UINavigationFuncLib_GetNavigationActionFromKey, ReturnValue) == 0x000038, "Member 'GSE_UINavigationFuncLib_GetNavigationActionFromKey::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.GetNavigationDirectionFromAnalogForOP
// 0x0048 (0x0048 - 0x0000)
struct GSE_UINavigationFuncLib_GetNavigationDirectionFromAnalogForOP final
{
public:
	struct FAnalogInputEvent                      InAnalogEvent;                                     // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EUINavigation                                 ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UINavigationFuncLib_GetNavigationDirectionFromAnalogForOP) == 0x000008, "Wrong alignment on GSE_UINavigationFuncLib_GetNavigationDirectionFromAnalogForOP");
//static_assert(sizeof(GSE_UINavigationFuncLib_GetNavigationDirectionFromAnalogForOP) == 0x000048, "Wrong size on GSE_UINavigationFuncLib_GetNavigationDirectionFromAnalogForOP");
//static_assert(offsetof(GSE_UINavigationFuncLib_GetNavigationDirectionFromAnalogForOP, InAnalogEvent) == 0x000000, "Member 'GSE_UINavigationFuncLib_GetNavigationDirectionFromAnalogForOP::InAnalogEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UINavigationFuncLib_GetNavigationDirectionFromAnalogForOP, ReturnValue) == 0x000040, "Member 'GSE_UINavigationFuncLib_GetNavigationDirectionFromAnalogForOP::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.GetNavigationDirectionFromKey
// 0x0040 (0x0040 - 0x0000)
struct GSE_UINavigationFuncLib_GetNavigationDirectionFromKey final
{
public:
	struct FKeyEvent                              InKeyEvent;                                        // 0x0000(0x0038)(ConstParm, Parm, NativeAccessSpecifierPublic)
	EUINavigation                                 ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UINavigationFuncLib_GetNavigationDirectionFromKey) == 0x000008, "Wrong alignment on GSE_UINavigationFuncLib_GetNavigationDirectionFromKey");
//static_assert(sizeof(GSE_UINavigationFuncLib_GetNavigationDirectionFromKey) == 0x000040, "Wrong size on GSE_UINavigationFuncLib_GetNavigationDirectionFromKey");
//static_assert(offsetof(GSE_UINavigationFuncLib_GetNavigationDirectionFromKey, InKeyEvent) == 0x000000, "Member 'GSE_UINavigationFuncLib_GetNavigationDirectionFromKey::InKeyEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UINavigationFuncLib_GetNavigationDirectionFromKey, ReturnValue) == 0x000038, "Member 'GSE_UINavigationFuncLib_GetNavigationDirectionFromKey::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.IsRepeatAction
// 0x0040 (0x0040 - 0x0000)
struct GSE_UINavigationFuncLib_IsRepeatAction final
{
public:
	struct FKeyEvent                              InKeyEvent;                                        // 0x0000(0x0038)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UINavigationFuncLib_IsRepeatAction) == 0x000008, "Wrong alignment on GSE_UINavigationFuncLib_IsRepeatAction");
//static_assert(sizeof(GSE_UINavigationFuncLib_IsRepeatAction) == 0x000040, "Wrong size on GSE_UINavigationFuncLib_IsRepeatAction");
//static_assert(offsetof(GSE_UINavigationFuncLib_IsRepeatAction, InKeyEvent) == 0x000000, "Member 'GSE_UINavigationFuncLib_IsRepeatAction::InKeyEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UINavigationFuncLib_IsRepeatAction, ReturnValue) == 0x000038, "Member 'GSE_UINavigationFuncLib_IsRepeatAction::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.SetAnalogNavigationHorizontalThreshold
// 0x0004 (0x0004 - 0x0000)
struct GSE_UINavigationFuncLib_SetAnalogNavigationHorizontalThreshold final
{
public:
	float                                         TargetThreshold;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_SetAnalogNavigationHorizontalThreshold) == 0x000004, "Wrong alignment on GSE_UINavigationFuncLib_SetAnalogNavigationHorizontalThreshold");
//static_assert(sizeof(GSE_UINavigationFuncLib_SetAnalogNavigationHorizontalThreshold) == 0x000004, "Wrong size on GSE_UINavigationFuncLib_SetAnalogNavigationHorizontalThreshold");
//static_assert(offsetof(GSE_UINavigationFuncLib_SetAnalogNavigationHorizontalThreshold, TargetThreshold) == 0x000000, "Member 'GSE_UINavigationFuncLib_SetAnalogNavigationHorizontalThreshold::TargetThreshold' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.SetAnalogNavigationVerticalThreshold
// 0x0004 (0x0004 - 0x0000)
struct GSE_UINavigationFuncLib_SetAnalogNavigationVerticalThreshold final
{
public:
	float                                         TargetThreshold;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_SetAnalogNavigationVerticalThreshold) == 0x000004, "Wrong alignment on GSE_UINavigationFuncLib_SetAnalogNavigationVerticalThreshold");
//static_assert(sizeof(GSE_UINavigationFuncLib_SetAnalogNavigationVerticalThreshold) == 0x000004, "Wrong size on GSE_UINavigationFuncLib_SetAnalogNavigationVerticalThreshold");
//static_assert(offsetof(GSE_UINavigationFuncLib_SetAnalogNavigationVerticalThreshold, TargetThreshold) == 0x000000, "Member 'GSE_UINavigationFuncLib_SetAnalogNavigationVerticalThreshold::TargetThreshold' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.SetNeedAnalogNavigation
// 0x0001 (0x0001 - 0x0000)
struct GSE_UINavigationFuncLib_SetNeedAnalogNavigation final
{
public:
	bool                                          IsNeed;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_SetNeedAnalogNavigation) == 0x000001, "Wrong alignment on GSE_UINavigationFuncLib_SetNeedAnalogNavigation");
//static_assert(sizeof(GSE_UINavigationFuncLib_SetNeedAnalogNavigation) == 0x000001, "Wrong size on GSE_UINavigationFuncLib_SetNeedAnalogNavigation");
//static_assert(offsetof(GSE_UINavigationFuncLib_SetNeedAnalogNavigation, IsNeed) == 0x000000, "Member 'GSE_UINavigationFuncLib_SetNeedAnalogNavigation::IsNeed' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.SetNeedKeyNavigation
// 0x0001 (0x0001 - 0x0000)
struct GSE_UINavigationFuncLib_SetNeedKeyNavigation final
{
public:
	bool                                          IsNeed;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_SetNeedKeyNavigation) == 0x000001, "Wrong alignment on GSE_UINavigationFuncLib_SetNeedKeyNavigation");
//static_assert(sizeof(GSE_UINavigationFuncLib_SetNeedKeyNavigation) == 0x000001, "Wrong size on GSE_UINavigationFuncLib_SetNeedKeyNavigation");
//static_assert(offsetof(GSE_UINavigationFuncLib_SetNeedKeyNavigation, IsNeed) == 0x000000, "Member 'GSE_UINavigationFuncLib_SetNeedKeyNavigation::IsNeed' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.SetNeedNavigationAction
// 0x0001 (0x0001 - 0x0000)
struct GSE_UINavigationFuncLib_SetNeedNavigationAction final
{
public:
	bool                                          IsNeed;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_SetNeedNavigationAction) == 0x000001, "Wrong alignment on GSE_UINavigationFuncLib_SetNeedNavigationAction");
//static_assert(sizeof(GSE_UINavigationFuncLib_SetNeedNavigationAction) == 0x000001, "Wrong size on GSE_UINavigationFuncLib_SetNeedNavigationAction");
//static_assert(offsetof(GSE_UINavigationFuncLib_SetNeedNavigationAction, IsNeed) == 0x000000, "Member 'GSE_UINavigationFuncLib_SetNeedNavigationAction::IsNeed' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.SetNeedTabKeyNavigation
// 0x0001 (0x0001 - 0x0000)
struct GSE_UINavigationFuncLib_SetNeedTabKeyNavigation final
{
public:
	bool                                          IsNeed;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_SetNeedTabKeyNavigation) == 0x000001, "Wrong alignment on GSE_UINavigationFuncLib_SetNeedTabKeyNavigation");
//static_assert(sizeof(GSE_UINavigationFuncLib_SetNeedTabKeyNavigation) == 0x000001, "Wrong size on GSE_UINavigationFuncLib_SetNeedTabKeyNavigation");
//static_assert(offsetof(GSE_UINavigationFuncLib_SetNeedTabKeyNavigation, IsNeed) == 0x000000, "Member 'GSE_UINavigationFuncLib_SetNeedTabKeyNavigation::IsNeed' has a wrong offset!");

// Function UnrealExtent.GSE_UINavigationFuncLib.SetRepeatFactor
// 0x0010 (0x0010 - 0x0000)
struct GSE_UINavigationFuncLib_SetRepeatFactor final
{
public:
	float                                         RepeatFactorInDefault;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepeatFactorInPressure;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepeatPressureFactor;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepeatPressureCondition;                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UINavigationFuncLib_SetRepeatFactor) == 0x000004, "Wrong alignment on GSE_UINavigationFuncLib_SetRepeatFactor");
//static_assert(sizeof(GSE_UINavigationFuncLib_SetRepeatFactor) == 0x000010, "Wrong size on GSE_UINavigationFuncLib_SetRepeatFactor");
//static_assert(offsetof(GSE_UINavigationFuncLib_SetRepeatFactor, RepeatFactorInDefault) == 0x000000, "Member 'GSE_UINavigationFuncLib_SetRepeatFactor::RepeatFactorInDefault' has a wrong offset!");
//static_assert(offsetof(GSE_UINavigationFuncLib_SetRepeatFactor, RepeatFactorInPressure) == 0x000004, "Member 'GSE_UINavigationFuncLib_SetRepeatFactor::RepeatFactorInPressure' has a wrong offset!");
//static_assert(offsetof(GSE_UINavigationFuncLib_SetRepeatFactor, RepeatPressureFactor) == 0x000008, "Member 'GSE_UINavigationFuncLib_SetRepeatFactor::RepeatPressureFactor' has a wrong offset!");
//static_assert(offsetof(GSE_UINavigationFuncLib_SetRepeatFactor, RepeatPressureCondition) == 0x00000C, "Member 'GSE_UINavigationFuncLib_SetRepeatFactor::RepeatPressureCondition' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.ActiveVirtualKeyboard
// 0x0001 (0x0001 - 0x0000)
struct GSE_UMGFuncLib_ActiveVirtualKeyboard final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_ActiveVirtualKeyboard) == 0x000001, "Wrong alignment on GSE_UMGFuncLib_ActiveVirtualKeyboard");
//static_assert(sizeof(GSE_UMGFuncLib_ActiveVirtualKeyboard) == 0x000001, "Wrong size on GSE_UMGFuncLib_ActiveVirtualKeyboard");
//static_assert(offsetof(GSE_UMGFuncLib_ActiveVirtualKeyboard, IsActive) == 0x000000, "Member 'GSE_UMGFuncLib_ActiveVirtualKeyboard::IsActive' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.AddUserWidgetAsSlateToViewport
// 0x0010 (0x0010 - 0x0000)
struct GSE_UMGFuncLib_AddUserWidgetAsSlateToViewport final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_AddUserWidgetAsSlateToViewport) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_AddUserWidgetAsSlateToViewport");
//static_assert(sizeof(GSE_UMGFuncLib_AddUserWidgetAsSlateToViewport) == 0x000010, "Wrong size on GSE_UMGFuncLib_AddUserWidgetAsSlateToViewport");
//static_assert(offsetof(GSE_UMGFuncLib_AddUserWidgetAsSlateToViewport, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_AddUserWidgetAsSlateToViewport::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_AddUserWidgetAsSlateToViewport, ZOrder) == 0x000008, "Member 'GSE_UMGFuncLib_AddUserWidgetAsSlateToViewport::ZOrder' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.BindBorderOnMouseDownEvent
// 0x0020 (0x0020 - 0x0000)
struct GSE_UMGFuncLib_BindBorderOnMouseDownEvent final
{
public:
	class UBorder*                                Border;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TargetObj;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_BindBorderOnMouseDownEvent) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_BindBorderOnMouseDownEvent");
//static_assert(sizeof(GSE_UMGFuncLib_BindBorderOnMouseDownEvent) == 0x000020, "Wrong size on GSE_UMGFuncLib_BindBorderOnMouseDownEvent");
//static_assert(offsetof(GSE_UMGFuncLib_BindBorderOnMouseDownEvent, Border) == 0x000000, "Member 'GSE_UMGFuncLib_BindBorderOnMouseDownEvent::Border' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_BindBorderOnMouseDownEvent, TargetObj) == 0x000008, "Member 'GSE_UMGFuncLib_BindBorderOnMouseDownEvent::TargetObj' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_BindBorderOnMouseDownEvent, Name_0) == 0x000010, "Member 'GSE_UMGFuncLib_BindBorderOnMouseDownEvent::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_BindBorderOnMouseDownEvent, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_BindBorderOnMouseDownEvent::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.BindImageOnMouseDownEvent
// 0x0020 (0x0020 - 0x0000)
struct GSE_UMGFuncLib_BindImageOnMouseDownEvent final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TargetObj;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_BindImageOnMouseDownEvent) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_BindImageOnMouseDownEvent");
//static_assert(sizeof(GSE_UMGFuncLib_BindImageOnMouseDownEvent) == 0x000020, "Wrong size on GSE_UMGFuncLib_BindImageOnMouseDownEvent");
//static_assert(offsetof(GSE_UMGFuncLib_BindImageOnMouseDownEvent, Image) == 0x000000, "Member 'GSE_UMGFuncLib_BindImageOnMouseDownEvent::Image' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_BindImageOnMouseDownEvent, TargetObj) == 0x000008, "Member 'GSE_UMGFuncLib_BindImageOnMouseDownEvent::TargetObj' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_BindImageOnMouseDownEvent, Name_0) == 0x000010, "Member 'GSE_UMGFuncLib_BindImageOnMouseDownEvent::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_BindImageOnMouseDownEvent, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_BindImageOnMouseDownEvent::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.CalcImageTexture
// 0x0028 (0x0028 - 0x0000)
struct GSE_UMGFuncLib_CalcImageTexture final
{
public:
	class UImage*                                 InImage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         OutColorArray;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      OutPosArray;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_CalcImageTexture) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_CalcImageTexture");
//static_assert(sizeof(GSE_UMGFuncLib_CalcImageTexture) == 0x000028, "Wrong size on GSE_UMGFuncLib_CalcImageTexture");
//static_assert(offsetof(GSE_UMGFuncLib_CalcImageTexture, InImage) == 0x000000, "Member 'GSE_UMGFuncLib_CalcImageTexture::InImage' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_CalcImageTexture, OutColorArray) == 0x000008, "Member 'GSE_UMGFuncLib_CalcImageTexture::OutColorArray' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_CalcImageTexture, OutPosArray) == 0x000018, "Member 'GSE_UMGFuncLib_CalcImageTexture::OutPosArray' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.CloneUserWidget
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_CloneUserWidget final
{
public:
	class UUserWidget*                            BaseWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_CloneUserWidget) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_CloneUserWidget");
//static_assert(sizeof(GSE_UMGFuncLib_CloneUserWidget) == 0x000018, "Wrong size on GSE_UMGFuncLib_CloneUserWidget");
//static_assert(offsetof(GSE_UMGFuncLib_CloneUserWidget, BaseWidget) == 0x000000, "Member 'GSE_UMGFuncLib_CloneUserWidget::BaseWidget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_CloneUserWidget, Name_0) == 0x000008, "Member 'GSE_UMGFuncLib_CloneUserWidget::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_CloneUserWidget, ReturnValue) == 0x000010, "Member 'GSE_UMGFuncLib_CloneUserWidget::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.ConstructUWidgetWithClass
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_ConstructUWidgetWithClass final
{
public:
	class UUserWidget*                            FromWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_ConstructUWidgetWithClass) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_ConstructUWidgetWithClass");
//static_assert(sizeof(GSE_UMGFuncLib_ConstructUWidgetWithClass) == 0x000018, "Wrong size on GSE_UMGFuncLib_ConstructUWidgetWithClass");
//static_assert(offsetof(GSE_UMGFuncLib_ConstructUWidgetWithClass, FromWidget) == 0x000000, "Member 'GSE_UMGFuncLib_ConstructUWidgetWithClass::FromWidget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_ConstructUWidgetWithClass, WidgetClass) == 0x000008, "Member 'GSE_UMGFuncLib_ConstructUWidgetWithClass::WidgetClass' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_ConstructUWidgetWithClass, ReturnValue) == 0x000010, "Member 'GSE_UMGFuncLib_ConstructUWidgetWithClass::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.ConvertToDateText
// 0x0030 (0x0030 - 0x0000)
struct GSE_UMGFuncLib_ConvertToDateText final
{
public:
	int32                                         Year;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hour;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Second;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_ConvertToDateText) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_ConvertToDateText");
//static_assert(sizeof(GSE_UMGFuncLib_ConvertToDateText) == 0x000030, "Wrong size on GSE_UMGFuncLib_ConvertToDateText");
//static_assert(offsetof(GSE_UMGFuncLib_ConvertToDateText, Year) == 0x000000, "Member 'GSE_UMGFuncLib_ConvertToDateText::Year' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_ConvertToDateText, Month) == 0x000004, "Member 'GSE_UMGFuncLib_ConvertToDateText::Month' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_ConvertToDateText, Day) == 0x000008, "Member 'GSE_UMGFuncLib_ConvertToDateText::Day' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_ConvertToDateText, Hour) == 0x00000C, "Member 'GSE_UMGFuncLib_ConvertToDateText::Hour' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_ConvertToDateText, Minute) == 0x000010, "Member 'GSE_UMGFuncLib_ConvertToDateText::Minute' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_ConvertToDateText, Second) == 0x000014, "Member 'GSE_UMGFuncLib_ConvertToDateText::Second' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_ConvertToDateText, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_ConvertToDateText::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.ConvertToTimeText
// 0x0030 (0x0030 - 0x0000)
struct GSE_UMGFuncLib_ConvertToTimeText final
{
public:
	int32                                         Year;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hour;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Second;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_ConvertToTimeText) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_ConvertToTimeText");
//static_assert(sizeof(GSE_UMGFuncLib_ConvertToTimeText) == 0x000030, "Wrong size on GSE_UMGFuncLib_ConvertToTimeText");
//static_assert(offsetof(GSE_UMGFuncLib_ConvertToTimeText, Year) == 0x000000, "Member 'GSE_UMGFuncLib_ConvertToTimeText::Year' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_ConvertToTimeText, Month) == 0x000004, "Member 'GSE_UMGFuncLib_ConvertToTimeText::Month' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_ConvertToTimeText, Day) == 0x000008, "Member 'GSE_UMGFuncLib_ConvertToTimeText::Day' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_ConvertToTimeText, Hour) == 0x00000C, "Member 'GSE_UMGFuncLib_ConvertToTimeText::Hour' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_ConvertToTimeText, Minute) == 0x000010, "Member 'GSE_UMGFuncLib_ConvertToTimeText::Minute' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_ConvertToTimeText, Second) == 0x000014, "Member 'GSE_UMGFuncLib_ConvertToTimeText::Second' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_ConvertToTimeText, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_ConvertToTimeText::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.CreateEditorStandaloneWidget
// 0x0028 (0x0028 - 0x0000)
struct GSE_UMGFuncLib_CreateEditorStandaloneWidget final
{
public:
	class UWidget*                                OwningWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResPath;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_CreateEditorStandaloneWidget) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_CreateEditorStandaloneWidget");
//static_assert(sizeof(GSE_UMGFuncLib_CreateEditorStandaloneWidget) == 0x000028, "Wrong size on GSE_UMGFuncLib_CreateEditorStandaloneWidget");
//static_assert(offsetof(GSE_UMGFuncLib_CreateEditorStandaloneWidget, OwningWidget) == 0x000000, "Member 'GSE_UMGFuncLib_CreateEditorStandaloneWidget::OwningWidget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_CreateEditorStandaloneWidget, ResPath) == 0x000008, "Member 'GSE_UMGFuncLib_CreateEditorStandaloneWidget::ResPath' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_CreateEditorStandaloneWidget, Name_0) == 0x000018, "Member 'GSE_UMGFuncLib_CreateEditorStandaloneWidget::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_CreateEditorStandaloneWidget, ReturnValue) == 0x000020, "Member 'GSE_UMGFuncLib_CreateEditorStandaloneWidget::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.CreateGSAnimKeyStateBlender
// 0x0010 (0x0010 - 0x0000)
struct GSE_UMGFuncLib_CreateGSAnimKeyStateBlender final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGSAnimKeyStateBlender*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_CreateGSAnimKeyStateBlender) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_CreateGSAnimKeyStateBlender");
//static_assert(sizeof(GSE_UMGFuncLib_CreateGSAnimKeyStateBlender) == 0x000010, "Wrong size on GSE_UMGFuncLib_CreateGSAnimKeyStateBlender");
//static_assert(offsetof(GSE_UMGFuncLib_CreateGSAnimKeyStateBlender, WorldContext) == 0x000000, "Member 'GSE_UMGFuncLib_CreateGSAnimKeyStateBlender::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_CreateGSAnimKeyStateBlender, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_CreateGSAnimKeyStateBlender::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.CreateGSViewPortHelper
// 0x0010 (0x0010 - 0x0000)
struct GSE_UMGFuncLib_CreateGSViewPortHelper final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGSViewPortHelper*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_CreateGSViewPortHelper) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_CreateGSViewPortHelper");
//static_assert(sizeof(GSE_UMGFuncLib_CreateGSViewPortHelper) == 0x000010, "Wrong size on GSE_UMGFuncLib_CreateGSViewPortHelper");
//static_assert(offsetof(GSE_UMGFuncLib_CreateGSViewPortHelper, WorldContext) == 0x000000, "Member 'GSE_UMGFuncLib_CreateGSViewPortHelper::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_CreateGSViewPortHelper, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_CreateGSViewPortHelper::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.CreateUserWidget
// 0x0020 (0x0020 - 0x0000)
struct GSE_UMGFuncLib_CreateUserWidget final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResPath;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_CreateUserWidget) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_CreateUserWidget");
//static_assert(sizeof(GSE_UMGFuncLib_CreateUserWidget) == 0x000020, "Wrong size on GSE_UMGFuncLib_CreateUserWidget");
//static_assert(offsetof(GSE_UMGFuncLib_CreateUserWidget, WorldContext) == 0x000000, "Member 'GSE_UMGFuncLib_CreateUserWidget::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_CreateUserWidget, ResPath) == 0x000008, "Member 'GSE_UMGFuncLib_CreateUserWidget::ResPath' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_CreateUserWidget, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_CreateUserWidget::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.CreateUserWidgetWithClass
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_CreateUserWidgetWithClass final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_CreateUserWidgetWithClass) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_CreateUserWidgetWithClass");
//static_assert(sizeof(GSE_UMGFuncLib_CreateUserWidgetWithClass) == 0x000018, "Wrong size on GSE_UMGFuncLib_CreateUserWidgetWithClass");
//static_assert(offsetof(GSE_UMGFuncLib_CreateUserWidgetWithClass, WorldContext) == 0x000000, "Member 'GSE_UMGFuncLib_CreateUserWidgetWithClass::WorldContext' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_CreateUserWidgetWithClass, WidgetClass) == 0x000008, "Member 'GSE_UMGFuncLib_CreateUserWidgetWithClass::WidgetClass' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_CreateUserWidgetWithClass, ReturnValue) == 0x000010, "Member 'GSE_UMGFuncLib_CreateUserWidgetWithClass::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.FindChildWidget
// 0x0020 (0x0020 - 0x0000)
struct GSE_UMGFuncLib_FindChildWidget final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelWidget*                           ParentWidget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildWidgetName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_FindChildWidget) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_FindChildWidget");
//static_assert(sizeof(GSE_UMGFuncLib_FindChildWidget) == 0x000020, "Wrong size on GSE_UMGFuncLib_FindChildWidget");
//static_assert(offsetof(GSE_UMGFuncLib_FindChildWidget, UserWidget) == 0x000000, "Member 'GSE_UMGFuncLib_FindChildWidget::UserWidget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_FindChildWidget, ParentWidget) == 0x000008, "Member 'GSE_UMGFuncLib_FindChildWidget::ParentWidget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_FindChildWidget, ChildWidgetName) == 0x000010, "Member 'GSE_UMGFuncLib_FindChildWidget::ChildWidgetName' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_FindChildWidget, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_FindChildWidget::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.FindChildWidgetIndex
// 0x0020 (0x0020 - 0x0000)
struct GSE_UMGFuncLib_FindChildWidgetIndex final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelWidget*                           ParentWidget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildWidgetName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_FindChildWidgetIndex) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_FindChildWidgetIndex");
//static_assert(sizeof(GSE_UMGFuncLib_FindChildWidgetIndex) == 0x000020, "Wrong size on GSE_UMGFuncLib_FindChildWidgetIndex");
//static_assert(offsetof(GSE_UMGFuncLib_FindChildWidgetIndex, UserWidget) == 0x000000, "Member 'GSE_UMGFuncLib_FindChildWidgetIndex::UserWidget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_FindChildWidgetIndex, ParentWidget) == 0x000008, "Member 'GSE_UMGFuncLib_FindChildWidgetIndex::ParentWidget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_FindChildWidgetIndex, ChildWidgetName) == 0x000010, "Member 'GSE_UMGFuncLib_FindChildWidgetIndex::ChildWidgetName' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_FindChildWidgetIndex, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_FindChildWidgetIndex::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.FoldTextContent
// 0x0028 (0x0028 - 0x0000)
struct GSE_UMGFuncLib_FoldTextContent final
{
public:
	class UTextBlock*                             InTextBlock;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTextFoldingConfig                     InFoldingConfig;                                   // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_FoldTextContent) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_FoldTextContent");
//static_assert(sizeof(GSE_UMGFuncLib_FoldTextContent) == 0x000028, "Wrong size on GSE_UMGFuncLib_FoldTextContent");
//static_assert(offsetof(GSE_UMGFuncLib_FoldTextContent, InTextBlock) == 0x000000, "Member 'GSE_UMGFuncLib_FoldTextContent::InTextBlock' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_FoldTextContent, InFoldingConfig) == 0x000008, "Member 'GSE_UMGFuncLib_FoldTextContent::InFoldingConfig' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetAllChildUserWidget
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_GetAllChildUserWidget final
{
public:
	class UPanelWidget*                           ParentWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUserWidget*>                    ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetAllChildUserWidget) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetAllChildUserWidget");
//static_assert(sizeof(GSE_UMGFuncLib_GetAllChildUserWidget) == 0x000018, "Wrong size on GSE_UMGFuncLib_GetAllChildUserWidget");
//static_assert(offsetof(GSE_UMGFuncLib_GetAllChildUserWidget, ParentWidget) == 0x000000, "Member 'GSE_UMGFuncLib_GetAllChildUserWidget::ParentWidget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetAllChildUserWidget, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetAllChildUserWidget::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetAllChildUserWidgetWithClass
// 0x0020 (0x0020 - 0x0000)
struct GSE_UMGFuncLib_GetAllChildUserWidgetWithClass final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidget*>                        ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetAllChildUserWidgetWithClass) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetAllChildUserWidgetWithClass");
//static_assert(sizeof(GSE_UMGFuncLib_GetAllChildUserWidgetWithClass) == 0x000020, "Wrong size on GSE_UMGFuncLib_GetAllChildUserWidgetWithClass");
//static_assert(offsetof(GSE_UMGFuncLib_GetAllChildUserWidgetWithClass, UserWidget) == 0x000000, "Member 'GSE_UMGFuncLib_GetAllChildUserWidgetWithClass::UserWidget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetAllChildUserWidgetWithClass, WidgetClass) == 0x000008, "Member 'GSE_UMGFuncLib_GetAllChildUserWidgetWithClass::WidgetClass' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetAllChildUserWidgetWithClass, ReturnValue) == 0x000010, "Member 'GSE_UMGFuncLib_GetAllChildUserWidgetWithClass::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetAllChildWidget
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_GetAllChildWidget final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidget*>                        ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetAllChildWidget) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetAllChildWidget");
//static_assert(sizeof(GSE_UMGFuncLib_GetAllChildWidget) == 0x000018, "Wrong size on GSE_UMGFuncLib_GetAllChildWidget");
//static_assert(offsetof(GSE_UMGFuncLib_GetAllChildWidget, UserWidget) == 0x000000, "Member 'GSE_UMGFuncLib_GetAllChildWidget::UserWidget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetAllChildWidget, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetAllChildWidget::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetAllChildWidgetWithClass
// 0x0020 (0x0020 - 0x0000)
struct GSE_UMGFuncLib_GetAllChildWidgetWithClass final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidget*>                        ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetAllChildWidgetWithClass) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetAllChildWidgetWithClass");
//static_assert(sizeof(GSE_UMGFuncLib_GetAllChildWidgetWithClass) == 0x000020, "Wrong size on GSE_UMGFuncLib_GetAllChildWidgetWithClass");
//static_assert(offsetof(GSE_UMGFuncLib_GetAllChildWidgetWithClass, UserWidget) == 0x000000, "Member 'GSE_UMGFuncLib_GetAllChildWidgetWithClass::UserWidget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetAllChildWidgetWithClass, WidgetClass) == 0x000008, "Member 'GSE_UMGFuncLib_GetAllChildWidgetWithClass::WidgetClass' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetAllChildWidgetWithClass, ReturnValue) == 0x000010, "Member 'GSE_UMGFuncLib_GetAllChildWidgetWithClass::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetAnalogKey
// 0x0058 (0x0058 - 0x0000)
struct GSE_UMGFuncLib_GetAnalogKey final
{
public:
	struct FAnalogInputEvent                      AnalogInputEvent;                                  // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0040(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetAnalogKey) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetAnalogKey");
//static_assert(sizeof(GSE_UMGFuncLib_GetAnalogKey) == 0x000058, "Wrong size on GSE_UMGFuncLib_GetAnalogKey");
//static_assert(offsetof(GSE_UMGFuncLib_GetAnalogKey, AnalogInputEvent) == 0x000000, "Member 'GSE_UMGFuncLib_GetAnalogKey::AnalogInputEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetAnalogKey, ReturnValue) == 0x000040, "Member 'GSE_UMGFuncLib_GetAnalogKey::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetAnalogKeyIsRepeat
// 0x0048 (0x0048 - 0x0000)
struct GSE_UMGFuncLib_GetAnalogKeyIsRepeat final
{
public:
	struct FAnalogInputEvent                      AnalogInputEvent;                                  // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_GetAnalogKeyIsRepeat) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetAnalogKeyIsRepeat");
//static_assert(sizeof(GSE_UMGFuncLib_GetAnalogKeyIsRepeat) == 0x000048, "Wrong size on GSE_UMGFuncLib_GetAnalogKeyIsRepeat");
//static_assert(offsetof(GSE_UMGFuncLib_GetAnalogKeyIsRepeat, AnalogInputEvent) == 0x000000, "Member 'GSE_UMGFuncLib_GetAnalogKeyIsRepeat::AnalogInputEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetAnalogKeyIsRepeat, ReturnValue) == 0x000040, "Member 'GSE_UMGFuncLib_GetAnalogKeyIsRepeat::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetAnalogValue
// 0x0048 (0x0048 - 0x0000)
struct GSE_UMGFuncLib_GetAnalogValue final
{
public:
	struct FAnalogInputEvent                      AnalogInputEvent;                                  // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_GetAnalogValue) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetAnalogValue");
//static_assert(sizeof(GSE_UMGFuncLib_GetAnalogValue) == 0x000048, "Wrong size on GSE_UMGFuncLib_GetAnalogValue");
//static_assert(offsetof(GSE_UMGFuncLib_GetAnalogValue, AnalogInputEvent) == 0x000000, "Member 'GSE_UMGFuncLib_GetAnalogValue::AnalogInputEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetAnalogValue, ReturnValue) == 0x000040, "Member 'GSE_UMGFuncLib_GetAnalogValue::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetChildWidgetAt
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_GetChildWidgetAt final
{
public:
	class UPanelWidget*                           ParentWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChildIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetChildWidgetAt) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetChildWidgetAt");
//static_assert(sizeof(GSE_UMGFuncLib_GetChildWidgetAt) == 0x000018, "Wrong size on GSE_UMGFuncLib_GetChildWidgetAt");
//static_assert(offsetof(GSE_UMGFuncLib_GetChildWidgetAt, ParentWidget) == 0x000000, "Member 'GSE_UMGFuncLib_GetChildWidgetAt::ParentWidget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetChildWidgetAt, ChildIndex) == 0x000008, "Member 'GSE_UMGFuncLib_GetChildWidgetAt::ChildIndex' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetChildWidgetAt, ReturnValue) == 0x000010, "Member 'GSE_UMGFuncLib_GetChildWidgetAt::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetCurrentCulture
// 0x0010 (0x0010 - 0x0000)
struct GSE_UMGFuncLib_GetCurrentCulture final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetCurrentCulture) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetCurrentCulture");
//static_assert(sizeof(GSE_UMGFuncLib_GetCurrentCulture) == 0x000010, "Wrong size on GSE_UMGFuncLib_GetCurrentCulture");
//static_assert(offsetof(GSE_UMGFuncLib_GetCurrentCulture, ReturnValue) == 0x000000, "Member 'GSE_UMGFuncLib_GetCurrentCulture::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetFocusEventCause
// 0x000C (0x000C - 0x0000)
struct GSE_UMGFuncLib_GetFocusEventCause final
{
public:
	struct FFocusEvent                            FocusEvent;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EFocusCause                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_GetFocusEventCause) == 0x000004, "Wrong alignment on GSE_UMGFuncLib_GetFocusEventCause");
//static_assert(sizeof(GSE_UMGFuncLib_GetFocusEventCause) == 0x00000C, "Wrong size on GSE_UMGFuncLib_GetFocusEventCause");
//static_assert(offsetof(GSE_UMGFuncLib_GetFocusEventCause, FocusEvent) == 0x000000, "Member 'GSE_UMGFuncLib_GetFocusEventCause::FocusEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetFocusEventCause, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetFocusEventCause::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetFocusEventUser
// 0x000C (0x000C - 0x0000)
struct GSE_UMGFuncLib_GetFocusEventUser final
{
public:
	struct FFocusEvent                            FocusEvent;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetFocusEventUser) == 0x000004, "Wrong alignment on GSE_UMGFuncLib_GetFocusEventUser");
//static_assert(sizeof(GSE_UMGFuncLib_GetFocusEventUser) == 0x00000C, "Wrong size on GSE_UMGFuncLib_GetFocusEventUser");
//static_assert(offsetof(GSE_UMGFuncLib_GetFocusEventUser, FocusEvent) == 0x000000, "Member 'GSE_UMGFuncLib_GetFocusEventUser::FocusEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetFocusEventUser, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetFocusEventUser::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetIsAxis1DKey
// 0x000C (0x000C - 0x0000)
struct GSE_UMGFuncLib_GetIsAxis1DKey final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_GetIsAxis1DKey) == 0x000004, "Wrong alignment on GSE_UMGFuncLib_GetIsAxis1DKey");
//static_assert(sizeof(GSE_UMGFuncLib_GetIsAxis1DKey) == 0x00000C, "Wrong size on GSE_UMGFuncLib_GetIsAxis1DKey");
//static_assert(offsetof(GSE_UMGFuncLib_GetIsAxis1DKey, KeyName) == 0x000000, "Member 'GSE_UMGFuncLib_GetIsAxis1DKey::KeyName' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetIsAxis1DKey, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetIsAxis1DKey::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetIsGamepadKey
// 0x000C (0x000C - 0x0000)
struct GSE_UMGFuncLib_GetIsGamepadKey final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_GetIsGamepadKey) == 0x000004, "Wrong alignment on GSE_UMGFuncLib_GetIsGamepadKey");
//static_assert(sizeof(GSE_UMGFuncLib_GetIsGamepadKey) == 0x00000C, "Wrong size on GSE_UMGFuncLib_GetIsGamepadKey");
//static_assert(offsetof(GSE_UMGFuncLib_GetIsGamepadKey, KeyName) == 0x000000, "Member 'GSE_UMGFuncLib_GetIsGamepadKey::KeyName' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetIsGamepadKey, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetIsGamepadKey::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetKeyWithName
// 0x0020 (0x0020 - 0x0000)
struct GSE_UMGFuncLib_GetKeyWithName final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetKeyWithName) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetKeyWithName");
//static_assert(sizeof(GSE_UMGFuncLib_GetKeyWithName) == 0x000020, "Wrong size on GSE_UMGFuncLib_GetKeyWithName");
//static_assert(offsetof(GSE_UMGFuncLib_GetKeyWithName, KeyName) == 0x000000, "Member 'GSE_UMGFuncLib_GetKeyWithName::KeyName' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetKeyWithName, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetKeyWithName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetMediaPlayerTimer
// 0x0010 (0x0010 - 0x0000)
struct GSE_UMGFuncLib_GetMediaPlayerTimer final
{
public:
	class UMediaPlayer*                           MediaPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetMediaPlayerTimer) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetMediaPlayerTimer");
//static_assert(sizeof(GSE_UMGFuncLib_GetMediaPlayerTimer) == 0x000010, "Wrong size on GSE_UMGFuncLib_GetMediaPlayerTimer");
//static_assert(offsetof(GSE_UMGFuncLib_GetMediaPlayerTimer, MediaPlayer) == 0x000000, "Member 'GSE_UMGFuncLib_GetMediaPlayerTimer::MediaPlayer' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetMediaPlayerTimer, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetMediaPlayerTimer::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetMouseKey
// 0x00A8 (0x00A8 - 0x0000)
struct GSE_UMGFuncLib_GetMouseKey final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0090(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetMouseKey) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetMouseKey");
//static_assert(sizeof(GSE_UMGFuncLib_GetMouseKey) == 0x0000A8, "Wrong size on GSE_UMGFuncLib_GetMouseKey");
//static_assert(offsetof(GSE_UMGFuncLib_GetMouseKey, PointerEvent) == 0x000000, "Member 'GSE_UMGFuncLib_GetMouseKey::PointerEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetMouseKey, ReturnValue) == 0x000090, "Member 'GSE_UMGFuncLib_GetMouseKey::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetMousePositionFromViewport
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_GetMousePositionFromViewport final
{
public:
	struct FVector2D                              OutPosition;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_GetMousePositionFromViewport) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetMousePositionFromViewport");
//static_assert(sizeof(GSE_UMGFuncLib_GetMousePositionFromViewport) == 0x000018, "Wrong size on GSE_UMGFuncLib_GetMousePositionFromViewport");
//static_assert(offsetof(GSE_UMGFuncLib_GetMousePositionFromViewport, OutPosition) == 0x000000, "Member 'GSE_UMGFuncLib_GetMousePositionFromViewport::OutPosition' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetMousePositionFromViewport, ReturnValue) == 0x000010, "Member 'GSE_UMGFuncLib_GetMousePositionFromViewport::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetMouseWheelDelta
// 0x0098 (0x0098 - 0x0000)
struct GSE_UMGFuncLib_GetMouseWheelDelta final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0090(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_GetMouseWheelDelta) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetMouseWheelDelta");
//static_assert(sizeof(GSE_UMGFuncLib_GetMouseWheelDelta) == 0x000098, "Wrong size on GSE_UMGFuncLib_GetMouseWheelDelta");
//static_assert(offsetof(GSE_UMGFuncLib_GetMouseWheelDelta, PointerEvent) == 0x000000, "Member 'GSE_UMGFuncLib_GetMouseWheelDelta::PointerEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetMouseWheelDelta, ReturnValue) == 0x000090, "Member 'GSE_UMGFuncLib_GetMouseWheelDelta::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetRootWidget
// 0x0010 (0x0010 - 0x0000)
struct GSE_UMGFuncLib_GetRootWidget final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetRootWidget) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetRootWidget");
//static_assert(sizeof(GSE_UMGFuncLib_GetRootWidget) == 0x000010, "Wrong size on GSE_UMGFuncLib_GetRootWidget");
//static_assert(offsetof(GSE_UMGFuncLib_GetRootWidget, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_GetRootWidget::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetRootWidget, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetRootWidget::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetSafeZonePaddingSize
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_GetSafeZonePaddingSize final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetSafeZonePaddingSize) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetSafeZonePaddingSize");
//static_assert(sizeof(GSE_UMGFuncLib_GetSafeZonePaddingSize) == 0x000018, "Wrong size on GSE_UMGFuncLib_GetSafeZonePaddingSize");
//static_assert(offsetof(GSE_UMGFuncLib_GetSafeZonePaddingSize, WorldContextObject) == 0x000000, "Member 'GSE_UMGFuncLib_GetSafeZonePaddingSize::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetSafeZonePaddingSize, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetSafeZonePaddingSize::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetTextBlockOutlineDynamicMaterial
// 0x0010 (0x0010 - 0x0000)
struct GSE_UMGFuncLib_GetTextBlockOutlineDynamicMaterial final
{
public:
	class UTextBlock*                             TextBlock;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetTextBlockOutlineDynamicMaterial) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetTextBlockOutlineDynamicMaterial");
//static_assert(sizeof(GSE_UMGFuncLib_GetTextBlockOutlineDynamicMaterial) == 0x000010, "Wrong size on GSE_UMGFuncLib_GetTextBlockOutlineDynamicMaterial");
//static_assert(offsetof(GSE_UMGFuncLib_GetTextBlockOutlineDynamicMaterial, TextBlock) == 0x000000, "Member 'GSE_UMGFuncLib_GetTextBlockOutlineDynamicMaterial::TextBlock' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetTextBlockOutlineDynamicMaterial, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetTextBlockOutlineDynamicMaterial::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetViewPortAbsPosition
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_GetViewPortAbsPosition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetViewPortAbsPosition) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetViewPortAbsPosition");
//static_assert(sizeof(GSE_UMGFuncLib_GetViewPortAbsPosition) == 0x000018, "Wrong size on GSE_UMGFuncLib_GetViewPortAbsPosition");
//static_assert(offsetof(GSE_UMGFuncLib_GetViewPortAbsPosition, WorldContextObject) == 0x000000, "Member 'GSE_UMGFuncLib_GetViewPortAbsPosition::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetViewPortAbsPosition, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetViewPortAbsPosition::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetViewPortScale
// 0x0010 (0x0010 - 0x0000)
struct GSE_UMGFuncLib_GetViewPortScale final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_GetViewPortScale) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetViewPortScale");
//static_assert(sizeof(GSE_UMGFuncLib_GetViewPortScale) == 0x000010, "Wrong size on GSE_UMGFuncLib_GetViewPortScale");
//static_assert(offsetof(GSE_UMGFuncLib_GetViewPortScale, WorldContextObject) == 0x000000, "Member 'GSE_UMGFuncLib_GetViewPortScale::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetViewPortScale, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetViewPortScale::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetViewportSize
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_GetViewportSize final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetViewportSize) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetViewportSize");
//static_assert(sizeof(GSE_UMGFuncLib_GetViewportSize) == 0x000018, "Wrong size on GSE_UMGFuncLib_GetViewportSize");
//static_assert(offsetof(GSE_UMGFuncLib_GetViewportSize, WorldContextObject) == 0x000000, "Member 'GSE_UMGFuncLib_GetViewportSize::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetViewportSize, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetViewportSize::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetViewportSizeXY
// 0x0008 (0x0008 - 0x0000)
struct GSE_UMGFuncLib_GetViewportSizeXY final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetViewportSizeXY) == 0x000004, "Wrong alignment on GSE_UMGFuncLib_GetViewportSizeXY");
//static_assert(sizeof(GSE_UMGFuncLib_GetViewportSizeXY) == 0x000008, "Wrong size on GSE_UMGFuncLib_GetViewportSizeXY");
//static_assert(offsetof(GSE_UMGFuncLib_GetViewportSizeXY, ReturnValue) == 0x000000, "Member 'GSE_UMGFuncLib_GetViewportSizeXY::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetAbsolutePosition
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_GetWidgetAbsolutePosition final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetWidgetAbsolutePosition) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetWidgetAbsolutePosition");
//static_assert(sizeof(GSE_UMGFuncLib_GetWidgetAbsolutePosition) == 0x000018, "Wrong size on GSE_UMGFuncLib_GetWidgetAbsolutePosition");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAbsolutePosition, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_GetWidgetAbsolutePosition::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAbsolutePosition, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetWidgetAbsolutePosition::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetAbsolutePositionAtCoordinates
// 0x0028 (0x0028 - 0x0000)
struct GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinates final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NormalCoordinates;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinates) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinates");
//static_assert(sizeof(GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinates) == 0x000028, "Wrong size on GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinates");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinates, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinates::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinates, NormalCoordinates) == 0x000008, "Member 'GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinates::NormalCoordinates' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinates, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinates::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace
// 0x0028 (0x0028 - 0x0000)
struct GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NormalCoordinates;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace");
//static_assert(sizeof(GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace) == 0x000028, "Wrong size on GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace, NormalCoordinates) == 0x000008, "Member 'GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace::NormalCoordinates' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_GetWidgetAbsolutePositionAtCoordinatesWithPaintSpace::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetAbsoluteSize
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_GetWidgetAbsoluteSize final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetWidgetAbsoluteSize) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetWidgetAbsoluteSize");
//static_assert(sizeof(GSE_UMGFuncLib_GetWidgetAbsoluteSize) == 0x000018, "Wrong size on GSE_UMGFuncLib_GetWidgetAbsoluteSize");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAbsoluteSize, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_GetWidgetAbsoluteSize::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAbsoluteSize, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetWidgetAbsoluteSize::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetAbsScale
// 0x0010 (0x0010 - 0x0000)
struct GSE_UMGFuncLib_GetWidgetAbsScale final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_GetWidgetAbsScale) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetWidgetAbsScale");
//static_assert(sizeof(GSE_UMGFuncLib_GetWidgetAbsScale) == 0x000010, "Wrong size on GSE_UMGFuncLib_GetWidgetAbsScale");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAbsScale, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_GetWidgetAbsScale::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAbsScale, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetWidgetAbsScale::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetAnimationByName
// 0x0020 (0x0020 - 0x0000)
struct GSE_UMGFuncLib_GetWidgetAnimationByName final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetWidgetAnimationByName) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetWidgetAnimationByName");
//static_assert(sizeof(GSE_UMGFuncLib_GetWidgetAnimationByName) == 0x000020, "Wrong size on GSE_UMGFuncLib_GetWidgetAnimationByName");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAnimationByName, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_GetWidgetAnimationByName::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAnimationByName, Name_0) == 0x000008, "Member 'GSE_UMGFuncLib_GetWidgetAnimationByName::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAnimationByName, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_GetWidgetAnimationByName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetAnimationName
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_GetWidgetAnimationName final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetWidgetAnimationName) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetWidgetAnimationName");
//static_assert(sizeof(GSE_UMGFuncLib_GetWidgetAnimationName) == 0x000018, "Wrong size on GSE_UMGFuncLib_GetWidgetAnimationName");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAnimationName, Animation) == 0x000000, "Member 'GSE_UMGFuncLib_GetWidgetAnimationName::Animation' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetAnimationName, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetWidgetAnimationName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetFromName
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_GetWidgetFromName final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetWidgetFromName) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetWidgetFromName");
//static_assert(sizeof(GSE_UMGFuncLib_GetWidgetFromName) == 0x000018, "Wrong size on GSE_UMGFuncLib_GetWidgetFromName");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetFromName, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_GetWidgetFromName::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetFromName, Name_0) == 0x000008, "Member 'GSE_UMGFuncLib_GetWidgetFromName::Name_0' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetFromName, ReturnValue) == 0x000010, "Member 'GSE_UMGFuncLib_GetWidgetFromName::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetIsVariable
// 0x0010 (0x0010 - 0x0000)
struct GSE_UMGFuncLib_GetWidgetIsVariable final
{
public:
	const class UWidget*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_GetWidgetIsVariable) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetWidgetIsVariable");
//static_assert(sizeof(GSE_UMGFuncLib_GetWidgetIsVariable) == 0x000010, "Wrong size on GSE_UMGFuncLib_GetWidgetIsVariable");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetIsVariable, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_GetWidgetIsVariable::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetIsVariable, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetWidgetIsVariable::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetLocalPositionAtCoordinates
// 0x0028 (0x0028 - 0x0000)
struct GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinates final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NormalCoordinates;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinates) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinates");
//static_assert(sizeof(GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinates) == 0x000028, "Wrong size on GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinates");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinates, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinates::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinates, NormalCoordinates) == 0x000008, "Member 'GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinates::NormalCoordinates' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinates, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinates::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetLocalPositionAtCoordinatesWithPaintSpace
// 0x0028 (0x0028 - 0x0000)
struct GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinatesWithPaintSpace final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NormalCoordinates;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinatesWithPaintSpace) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinatesWithPaintSpace");
//static_assert(sizeof(GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinatesWithPaintSpace) == 0x000028, "Wrong size on GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinatesWithPaintSpace");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinatesWithPaintSpace, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinatesWithPaintSpace::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinatesWithPaintSpace, NormalCoordinates) == 0x000008, "Member 'GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinatesWithPaintSpace::NormalCoordinates' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinatesWithPaintSpace, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_GetWidgetLocalPositionAtCoordinatesWithPaintSpace::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetLocalSize
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_GetWidgetLocalSize final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetWidgetLocalSize) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetWidgetLocalSize");
//static_assert(sizeof(GSE_UMGFuncLib_GetWidgetLocalSize) == 0x000018, "Wrong size on GSE_UMGFuncLib_GetWidgetLocalSize");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetLocalSize, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_GetWidgetLocalSize::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetLocalSize, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_GetWidgetLocalSize::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GetWidgetPositionSizeRefViewPort
// 0x0028 (0x0028 - 0x0000)
struct GSE_UMGFuncLib_GetWidgetPositionSizeRefViewPort final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetSize;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GetWidgetPositionSizeRefViewPort) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GetWidgetPositionSizeRefViewPort");
//static_assert(sizeof(GSE_UMGFuncLib_GetWidgetPositionSizeRefViewPort) == 0x000028, "Wrong size on GSE_UMGFuncLib_GetWidgetPositionSizeRefViewPort");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetPositionSizeRefViewPort, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_GetWidgetPositionSizeRefViewPort::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetPositionSizeRefViewPort, Position) == 0x000008, "Member 'GSE_UMGFuncLib_GetWidgetPositionSizeRefViewPort::Position' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GetWidgetPositionSizeRefViewPort, WidgetSize) == 0x000018, "Member 'GSE_UMGFuncLib_GetWidgetPositionSizeRefViewPort::WidgetSize' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GSProjectWidgetList
// 0x0030 (0x0030 - 0x0000)
struct GSE_UMGFuncLib_GSProjectWidgetList final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Canvas;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProjWidgetInfo>                ProjWidgetInfos;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FProjResult>                    Results;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_GSProjectWidgetList) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GSProjectWidgetList");
//static_assert(sizeof(GSE_UMGFuncLib_GSProjectWidgetList) == 0x000030, "Wrong size on GSE_UMGFuncLib_GSProjectWidgetList");
//static_assert(offsetof(GSE_UMGFuncLib_GSProjectWidgetList, PlayerController) == 0x000000, "Member 'GSE_UMGFuncLib_GSProjectWidgetList::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GSProjectWidgetList, Canvas) == 0x000008, "Member 'GSE_UMGFuncLib_GSProjectWidgetList::Canvas' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GSProjectWidgetList, ProjWidgetInfos) == 0x000010, "Member 'GSE_UMGFuncLib_GSProjectWidgetList::ProjWidgetInfos' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GSProjectWidgetList, Results) == 0x000020, "Member 'GSE_UMGFuncLib_GSProjectWidgetList::Results' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.GSProjectWorldLocationToWidgetPosition
// 0x0038 (0x0038 - 0x0000)
struct GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewportPosition;                                  // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInFront;                                        // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition");
//static_assert(sizeof(GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition) == 0x000038, "Wrong size on GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition");
//static_assert(offsetof(GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition, PlayerController) == 0x000000, "Member 'GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition, WorldLocation) == 0x000008, "Member 'GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition::WorldLocation' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition, ViewportPosition) == 0x000020, "Member 'GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition::ViewportPosition' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition, bIsInFront) == 0x000030, "Member 'GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition::bIsInFront' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition, ReturnValue) == 0x000031, "Member 'GSE_UMGFuncLib_GSProjectWorldLocationToWidgetPosition::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.InvokeWidgetInputEvent
// 0x00E0 (0x00E0 - 0x0000)
struct GSE_UMGFuncLib_InvokeWidgetInputEvent final
{
public:
	class UWidget*                                UWidget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InputType;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              MyGeometry;                                        // 0x0010(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0050(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_InvokeWidgetInputEvent) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_InvokeWidgetInputEvent");
//static_assert(sizeof(GSE_UMGFuncLib_InvokeWidgetInputEvent) == 0x0000E0, "Wrong size on GSE_UMGFuncLib_InvokeWidgetInputEvent");
//static_assert(offsetof(GSE_UMGFuncLib_InvokeWidgetInputEvent, UWidget) == 0x000000, "Member 'GSE_UMGFuncLib_InvokeWidgetInputEvent::UWidget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_InvokeWidgetInputEvent, InputType) == 0x000008, "Member 'GSE_UMGFuncLib_InvokeWidgetInputEvent::InputType' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_InvokeWidgetInputEvent, MyGeometry) == 0x000010, "Member 'GSE_UMGFuncLib_InvokeWidgetInputEvent::MyGeometry' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_InvokeWidgetInputEvent, MouseEvent) == 0x000050, "Member 'GSE_UMGFuncLib_InvokeWidgetInputEvent::MouseEvent' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.IsBinkMediaBeginPlay
// 0x0010 (0x0010 - 0x0000)
struct GSE_UMGFuncLib_IsBinkMediaBeginPlay final
{
public:
	const class UBinkMediaPlayer*                 BinkMediaPlayer;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_IsBinkMediaBeginPlay) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_IsBinkMediaBeginPlay");
//static_assert(sizeof(GSE_UMGFuncLib_IsBinkMediaBeginPlay) == 0x000010, "Wrong size on GSE_UMGFuncLib_IsBinkMediaBeginPlay");
//static_assert(offsetof(GSE_UMGFuncLib_IsBinkMediaBeginPlay, BinkMediaPlayer) == 0x000000, "Member 'GSE_UMGFuncLib_IsBinkMediaBeginPlay::BinkMediaPlayer' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_IsBinkMediaBeginPlay, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_IsBinkMediaBeginPlay::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.IsMediaBeginPlay
// 0x0010 (0x0010 - 0x0000)
struct GSE_UMGFuncLib_IsMediaBeginPlay final
{
public:
	const class UMediaPlayer*                     MediaPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_IsMediaBeginPlay) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_IsMediaBeginPlay");
//static_assert(sizeof(GSE_UMGFuncLib_IsMediaBeginPlay) == 0x000010, "Wrong size on GSE_UMGFuncLib_IsMediaBeginPlay");
//static_assert(offsetof(GSE_UMGFuncLib_IsMediaBeginPlay, MediaPlayer) == 0x000000, "Member 'GSE_UMGFuncLib_IsMediaBeginPlay::MediaPlayer' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_IsMediaBeginPlay, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_IsMediaBeginPlay::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.IsWidgetVisiableWithParent
// 0x0010 (0x0010 - 0x0000)
struct GSE_UMGFuncLib_IsWidgetVisiableWithParent final
{
public:
	class UWidget*                                TargetWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_IsWidgetVisiableWithParent) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_IsWidgetVisiableWithParent");
//static_assert(sizeof(GSE_UMGFuncLib_IsWidgetVisiableWithParent) == 0x000010, "Wrong size on GSE_UMGFuncLib_IsWidgetVisiableWithParent");
//static_assert(offsetof(GSE_UMGFuncLib_IsWidgetVisiableWithParent, TargetWidget) == 0x000000, "Member 'GSE_UMGFuncLib_IsWidgetVisiableWithParent::TargetWidget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_IsWidgetVisiableWithParent, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_IsWidgetVisiableWithParent::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.IsWidgetVisiableWithParentInList
// 0x0020 (0x0020 - 0x0000)
struct GSE_UMGFuncLib_IsWidgetVisiableWithParentInList final
{
public:
	TArray<class UUserWidget*>                    InWidgetList;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UUserWidget*>                    OutWidgetList;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_IsWidgetVisiableWithParentInList) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_IsWidgetVisiableWithParentInList");
//static_assert(sizeof(GSE_UMGFuncLib_IsWidgetVisiableWithParentInList) == 0x000020, "Wrong size on GSE_UMGFuncLib_IsWidgetVisiableWithParentInList");
//static_assert(offsetof(GSE_UMGFuncLib_IsWidgetVisiableWithParentInList, InWidgetList) == 0x000000, "Member 'GSE_UMGFuncLib_IsWidgetVisiableWithParentInList::InWidgetList' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_IsWidgetVisiableWithParentInList, OutWidgetList) == 0x000010, "Member 'GSE_UMGFuncLib_IsWidgetVisiableWithParentInList::OutWidgetList' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.LoadTexture2DToAreaIDArray
// 0x00E0 (0x00E0 - 0x0000)
struct GSE_UMGFuncLib_LoadTexture2DToAreaIDArray final
{
public:
	class UTexture2D*                             TargetTexture;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FColor, int32>                    AreaColorIDMap;                                    // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<int32, uint8>                            AreaData;                                          // 0x0058(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FVector2D                              OutOriginPos;                                      // 0x00A8(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutMapSize;                                        // 0x00B8(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrMsg;                                            // 0x00C8(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00D8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_LoadTexture2DToAreaIDArray) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_LoadTexture2DToAreaIDArray");
//static_assert(sizeof(GSE_UMGFuncLib_LoadTexture2DToAreaIDArray) == 0x0000E0, "Wrong size on GSE_UMGFuncLib_LoadTexture2DToAreaIDArray");
//static_assert(offsetof(GSE_UMGFuncLib_LoadTexture2DToAreaIDArray, TargetTexture) == 0x000000, "Member 'GSE_UMGFuncLib_LoadTexture2DToAreaIDArray::TargetTexture' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_LoadTexture2DToAreaIDArray, AreaColorIDMap) == 0x000008, "Member 'GSE_UMGFuncLib_LoadTexture2DToAreaIDArray::AreaColorIDMap' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_LoadTexture2DToAreaIDArray, AreaData) == 0x000058, "Member 'GSE_UMGFuncLib_LoadTexture2DToAreaIDArray::AreaData' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_LoadTexture2DToAreaIDArray, OutOriginPos) == 0x0000A8, "Member 'GSE_UMGFuncLib_LoadTexture2DToAreaIDArray::OutOriginPos' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_LoadTexture2DToAreaIDArray, OutMapSize) == 0x0000B8, "Member 'GSE_UMGFuncLib_LoadTexture2DToAreaIDArray::OutMapSize' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_LoadTexture2DToAreaIDArray, ErrMsg) == 0x0000C8, "Member 'GSE_UMGFuncLib_LoadTexture2DToAreaIDArray::ErrMsg' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_LoadTexture2DToAreaIDArray, ReturnValue) == 0x0000D8, "Member 'GSE_UMGFuncLib_LoadTexture2DToAreaIDArray::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.LocalToViewPortPixelPos
// 0x0058 (0x0058 - 0x0000)
struct GSE_UMGFuncLib_LocalToViewPortPixelPos final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              Geometry;                                          // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_LocalToViewPortPixelPos) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_LocalToViewPortPixelPos");
//static_assert(sizeof(GSE_UMGFuncLib_LocalToViewPortPixelPos) == 0x000058, "Wrong size on GSE_UMGFuncLib_LocalToViewPortPixelPos");
//static_assert(offsetof(GSE_UMGFuncLib_LocalToViewPortPixelPos, WorldContextObject) == 0x000000, "Member 'GSE_UMGFuncLib_LocalToViewPortPixelPos::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_LocalToViewPortPixelPos, Geometry) == 0x000008, "Member 'GSE_UMGFuncLib_LocalToViewPortPixelPos::Geometry' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_LocalToViewPortPixelPos, ReturnValue) == 0x000048, "Member 'GSE_UMGFuncLib_LocalToViewPortPixelPos::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.LocalToViewPortPos
// 0x0058 (0x0058 - 0x0000)
struct GSE_UMGFuncLib_LocalToViewPortPos final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              Geometry;                                          // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_LocalToViewPortPos) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_LocalToViewPortPos");
//static_assert(sizeof(GSE_UMGFuncLib_LocalToViewPortPos) == 0x000058, "Wrong size on GSE_UMGFuncLib_LocalToViewPortPos");
//static_assert(offsetof(GSE_UMGFuncLib_LocalToViewPortPos, WorldContextObject) == 0x000000, "Member 'GSE_UMGFuncLib_LocalToViewPortPos::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_LocalToViewPortPos, Geometry) == 0x000008, "Member 'GSE_UMGFuncLib_LocalToViewPortPos::Geometry' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_LocalToViewPortPos, ReturnValue) == 0x000048, "Member 'GSE_UMGFuncLib_LocalToViewPortPos::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.MakeEventReply
// 0x00C0 (0x00C0 - 0x0000)
struct GSE_UMGFuncLib_MakeEventReply final
{
public:
	bool                                          IsHandled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            ReturnValue;                                       // 0x0008(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_MakeEventReply) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_MakeEventReply");
//static_assert(sizeof(GSE_UMGFuncLib_MakeEventReply) == 0x0000C0, "Wrong size on GSE_UMGFuncLib_MakeEventReply");
//static_assert(offsetof(GSE_UMGFuncLib_MakeEventReply, IsHandled) == 0x000000, "Member 'GSE_UMGFuncLib_MakeEventReply::IsHandled' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_MakeEventReply, ReturnValue) == 0x000008, "Member 'GSE_UMGFuncLib_MakeEventReply::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.NeedExecuteAction
// 0x00E0 (0x00E0 - 0x0000)
struct GSE_UMGFuncLib_NeedExecuteAction final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UTexture2D*                             AdvancedHitTexture;                                // 0x00D0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdvancedHitAlpha;                                  // 0x00D8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00DC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_NeedExecuteAction) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_NeedExecuteAction");
//static_assert(sizeof(GSE_UMGFuncLib_NeedExecuteAction) == 0x0000E0, "Wrong size on GSE_UMGFuncLib_NeedExecuteAction");
//static_assert(offsetof(GSE_UMGFuncLib_NeedExecuteAction, MyGeometry) == 0x000000, "Member 'GSE_UMGFuncLib_NeedExecuteAction::MyGeometry' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_NeedExecuteAction, MouseEvent) == 0x000040, "Member 'GSE_UMGFuncLib_NeedExecuteAction::MouseEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_NeedExecuteAction, AdvancedHitTexture) == 0x0000D0, "Member 'GSE_UMGFuncLib_NeedExecuteAction::AdvancedHitTexture' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_NeedExecuteAction, AdvancedHitAlpha) == 0x0000D8, "Member 'GSE_UMGFuncLib_NeedExecuteAction::AdvancedHitAlpha' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_NeedExecuteAction, ReturnValue) == 0x0000DC, "Member 'GSE_UMGFuncLib_NeedExecuteAction::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.NeedExecuteActionWithDA
// 0x00E0 (0x00E0 - 0x0000)
struct GSE_UMGFuncLib_NeedExecuteActionWithDA final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UDataAsset*                             HitAreaDA;                                         // 0x00D0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdvancedHitAlpha;                                  // 0x00D8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00DC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_NeedExecuteActionWithDA) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_NeedExecuteActionWithDA");
//static_assert(sizeof(GSE_UMGFuncLib_NeedExecuteActionWithDA) == 0x0000E0, "Wrong size on GSE_UMGFuncLib_NeedExecuteActionWithDA");
//static_assert(offsetof(GSE_UMGFuncLib_NeedExecuteActionWithDA, MyGeometry) == 0x000000, "Member 'GSE_UMGFuncLib_NeedExecuteActionWithDA::MyGeometry' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_NeedExecuteActionWithDA, MouseEvent) == 0x000040, "Member 'GSE_UMGFuncLib_NeedExecuteActionWithDA::MouseEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_NeedExecuteActionWithDA, HitAreaDA) == 0x0000D0, "Member 'GSE_UMGFuncLib_NeedExecuteActionWithDA::HitAreaDA' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_NeedExecuteActionWithDA, AdvancedHitAlpha) == 0x0000D8, "Member 'GSE_UMGFuncLib_NeedExecuteActionWithDA::AdvancedHitAlpha' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_NeedExecuteActionWithDA, ReturnValue) == 0x0000DC, "Member 'GSE_UMGFuncLib_NeedExecuteActionWithDA::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.NewLocalStringTable
// 0x0020 (0x0020 - 0x0000)
struct GSE_UMGFuncLib_NewLocalStringTable final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_NewLocalStringTable) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_NewLocalStringTable");
//static_assert(sizeof(GSE_UMGFuncLib_NewLocalStringTable) == 0x000020, "Wrong size on GSE_UMGFuncLib_NewLocalStringTable");
//static_assert(offsetof(GSE_UMGFuncLib_NewLocalStringTable, ID) == 0x000000, "Member 'GSE_UMGFuncLib_NewLocalStringTable::ID' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_NewLocalStringTable, Namespace) == 0x000008, "Member 'GSE_UMGFuncLib_NewLocalStringTable::Namespace' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_NewLocalStringTable, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_NewLocalStringTable::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.PointerEvent_GetPointerIndex
// 0x0098 (0x0098 - 0x0000)
struct GSE_UMGFuncLib_PointerEvent_GetPointerIndex final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0090(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_PointerEvent_GetPointerIndex) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_PointerEvent_GetPointerIndex");
//static_assert(sizeof(GSE_UMGFuncLib_PointerEvent_GetPointerIndex) == 0x000098, "Wrong size on GSE_UMGFuncLib_PointerEvent_GetPointerIndex");
//static_assert(offsetof(GSE_UMGFuncLib_PointerEvent_GetPointerIndex, PointerEvent) == 0x000000, "Member 'GSE_UMGFuncLib_PointerEvent_GetPointerIndex::PointerEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_PointerEvent_GetPointerIndex, ReturnValue) == 0x000090, "Member 'GSE_UMGFuncLib_PointerEvent_GetPointerIndex::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.PointerEvent_GetPositionInGeometry
// 0x00E0 (0x00E0 - 0x0000)
struct GSE_UMGFuncLib_PointerEvent_GetPositionInGeometry final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          PointerEvent;                                      // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x00D0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_PointerEvent_GetPositionInGeometry) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_PointerEvent_GetPositionInGeometry");
//static_assert(sizeof(GSE_UMGFuncLib_PointerEvent_GetPositionInGeometry) == 0x0000E0, "Wrong size on GSE_UMGFuncLib_PointerEvent_GetPositionInGeometry");
//static_assert(offsetof(GSE_UMGFuncLib_PointerEvent_GetPositionInGeometry, Geometry) == 0x000000, "Member 'GSE_UMGFuncLib_PointerEvent_GetPositionInGeometry::Geometry' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_PointerEvent_GetPositionInGeometry, PointerEvent) == 0x000040, "Member 'GSE_UMGFuncLib_PointerEvent_GetPositionInGeometry::PointerEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_PointerEvent_GetPositionInGeometry, ReturnValue) == 0x0000D0, "Member 'GSE_UMGFuncLib_PointerEvent_GetPositionInGeometry::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.PointerEvent_GetScreenSpacePosition
// 0x00A0 (0x00A0 - 0x0000)
struct GSE_UMGFuncLib_PointerEvent_GetScreenSpacePosition final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0090(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_PointerEvent_GetScreenSpacePosition) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_PointerEvent_GetScreenSpacePosition");
//static_assert(sizeof(GSE_UMGFuncLib_PointerEvent_GetScreenSpacePosition) == 0x0000A0, "Wrong size on GSE_UMGFuncLib_PointerEvent_GetScreenSpacePosition");
//static_assert(offsetof(GSE_UMGFuncLib_PointerEvent_GetScreenSpacePosition, PointerEvent) == 0x000000, "Member 'GSE_UMGFuncLib_PointerEvent_GetScreenSpacePosition::PointerEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_PointerEvent_GetScreenSpacePosition, ReturnValue) == 0x000090, "Member 'GSE_UMGFuncLib_PointerEvent_GetScreenSpacePosition::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.PointerEvent_IsMouseButtonDown
// 0x00A0 (0x00A0 - 0x0000)
struct GSE_UMGFuncLib_PointerEvent_IsMouseButtonDown final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   MouseButtonName;                                   // 0x0090(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_PointerEvent_IsMouseButtonDown) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_PointerEvent_IsMouseButtonDown");
//static_assert(sizeof(GSE_UMGFuncLib_PointerEvent_IsMouseButtonDown) == 0x0000A0, "Wrong size on GSE_UMGFuncLib_PointerEvent_IsMouseButtonDown");
//static_assert(offsetof(GSE_UMGFuncLib_PointerEvent_IsMouseButtonDown, PointerEvent) == 0x000000, "Member 'GSE_UMGFuncLib_PointerEvent_IsMouseButtonDown::PointerEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_PointerEvent_IsMouseButtonDown, MouseButtonName) == 0x000090, "Member 'GSE_UMGFuncLib_PointerEvent_IsMouseButtonDown::MouseButtonName' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_PointerEvent_IsMouseButtonDown, ReturnValue) == 0x000098, "Member 'GSE_UMGFuncLib_PointerEvent_IsMouseButtonDown::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.PointerEvent_IsMouseTouchEvent
// 0x0098 (0x0098 - 0x0000)
struct GSE_UMGFuncLib_PointerEvent_IsMouseTouchEvent final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_PointerEvent_IsMouseTouchEvent) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_PointerEvent_IsMouseTouchEvent");
//static_assert(sizeof(GSE_UMGFuncLib_PointerEvent_IsMouseTouchEvent) == 0x000098, "Wrong size on GSE_UMGFuncLib_PointerEvent_IsMouseTouchEvent");
//static_assert(offsetof(GSE_UMGFuncLib_PointerEvent_IsMouseTouchEvent, PointerEvent) == 0x000000, "Member 'GSE_UMGFuncLib_PointerEvent_IsMouseTouchEvent::PointerEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_PointerEvent_IsMouseTouchEvent, ReturnValue) == 0x000090, "Member 'GSE_UMGFuncLib_PointerEvent_IsMouseTouchEvent::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.PointerEvent_IsTouchFirstMove
// 0x0098 (0x0098 - 0x0000)
struct GSE_UMGFuncLib_PointerEvent_IsTouchFirstMove final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_PointerEvent_IsTouchFirstMove) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_PointerEvent_IsTouchFirstMove");
//static_assert(sizeof(GSE_UMGFuncLib_PointerEvent_IsTouchFirstMove) == 0x000098, "Wrong size on GSE_UMGFuncLib_PointerEvent_IsTouchFirstMove");
//static_assert(offsetof(GSE_UMGFuncLib_PointerEvent_IsTouchFirstMove, PointerEvent) == 0x000000, "Member 'GSE_UMGFuncLib_PointerEvent_IsTouchFirstMove::PointerEvent' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_PointerEvent_IsTouchFirstMove, ReturnValue) == 0x000090, "Member 'GSE_UMGFuncLib_PointerEvent_IsTouchFirstMove::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.QAGetAllWidgetsOfClass
// 0x0020 (0x0020 - 0x0000)
struct GSE_UMGFuncLib_QAGetAllWidgetsOfClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidget*>                        FoundWidgets;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UWidget>                    WidgetClass;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_QAGetAllWidgetsOfClass) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_QAGetAllWidgetsOfClass");
//static_assert(sizeof(GSE_UMGFuncLib_QAGetAllWidgetsOfClass) == 0x000020, "Wrong size on GSE_UMGFuncLib_QAGetAllWidgetsOfClass");
//static_assert(offsetof(GSE_UMGFuncLib_QAGetAllWidgetsOfClass, WorldContextObject) == 0x000000, "Member 'GSE_UMGFuncLib_QAGetAllWidgetsOfClass::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_QAGetAllWidgetsOfClass, FoundWidgets) == 0x000008, "Member 'GSE_UMGFuncLib_QAGetAllWidgetsOfClass::FoundWidgets' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_QAGetAllWidgetsOfClass, WidgetClass) == 0x000018, "Member 'GSE_UMGFuncLib_QAGetAllWidgetsOfClass::WidgetClass' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.QAGetWidgetCenterPosition
// 0x0038 (0x0038 - 0x0000)
struct GSE_UMGFuncLib_QAGetWidgetCenterPosition final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetPosition;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CenterPosition;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetSize;                                        // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_QAGetWidgetCenterPosition) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_QAGetWidgetCenterPosition");
//static_assert(sizeof(GSE_UMGFuncLib_QAGetWidgetCenterPosition) == 0x000038, "Wrong size on GSE_UMGFuncLib_QAGetWidgetCenterPosition");
//static_assert(offsetof(GSE_UMGFuncLib_QAGetWidgetCenterPosition, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_QAGetWidgetCenterPosition::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_QAGetWidgetCenterPosition, WidgetPosition) == 0x000008, "Member 'GSE_UMGFuncLib_QAGetWidgetCenterPosition::WidgetPosition' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_QAGetWidgetCenterPosition, CenterPosition) == 0x000018, "Member 'GSE_UMGFuncLib_QAGetWidgetCenterPosition::CenterPosition' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_QAGetWidgetCenterPosition, WidgetSize) == 0x000028, "Member 'GSE_UMGFuncLib_QAGetWidgetCenterPosition::WidgetSize' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.QAGetWidgetWithText
// 0x0028 (0x0028 - 0x0000)
struct GSE_UMGFuncLib_QAGetWidgetWithText final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidget*>                        FoundWidgets;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_QAGetWidgetWithText) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_QAGetWidgetWithText");
//static_assert(sizeof(GSE_UMGFuncLib_QAGetWidgetWithText) == 0x000028, "Wrong size on GSE_UMGFuncLib_QAGetWidgetWithText");
//static_assert(offsetof(GSE_UMGFuncLib_QAGetWidgetWithText, WorldContextObject) == 0x000000, "Member 'GSE_UMGFuncLib_QAGetWidgetWithText::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_QAGetWidgetWithText, FoundWidgets) == 0x000008, "Member 'GSE_UMGFuncLib_QAGetWidgetWithText::FoundWidgets' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_QAGetWidgetWithText, Text) == 0x000018, "Member 'GSE_UMGFuncLib_QAGetWidgetWithText::Text' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.RefreshDPIScale
// 0x0008 (0x0008 - 0x0000)
struct GSE_UMGFuncLib_RefreshDPIScale final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_RefreshDPIScale) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_RefreshDPIScale");
//static_assert(sizeof(GSE_UMGFuncLib_RefreshDPIScale) == 0x000008, "Wrong size on GSE_UMGFuncLib_RefreshDPIScale");
//static_assert(offsetof(GSE_UMGFuncLib_RefreshDPIScale, WorldContext) == 0x000000, "Member 'GSE_UMGFuncLib_RefreshDPIScale::WorldContext' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.RefreshRichTextDefaultStyle
// 0x0008 (0x0008 - 0x0000)
struct GSE_UMGFuncLib_RefreshRichTextDefaultStyle final
{
public:
	class URichTextBlock*                         RichTextBlock;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_RefreshRichTextDefaultStyle) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_RefreshRichTextDefaultStyle");
//static_assert(sizeof(GSE_UMGFuncLib_RefreshRichTextDefaultStyle) == 0x000008, "Wrong size on GSE_UMGFuncLib_RefreshRichTextDefaultStyle");
//static_assert(offsetof(GSE_UMGFuncLib_RefreshRichTextDefaultStyle, RichTextBlock) == 0x000000, "Member 'GSE_UMGFuncLib_RefreshRichTextDefaultStyle::RichTextBlock' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.RemoveUserWidgetAsSlateFromViewport
// 0x0008 (0x0008 - 0x0000)
struct GSE_UMGFuncLib_RemoveUserWidgetAsSlateFromViewport final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_RemoveUserWidgetAsSlateFromViewport) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_RemoveUserWidgetAsSlateFromViewport");
//static_assert(sizeof(GSE_UMGFuncLib_RemoveUserWidgetAsSlateFromViewport) == 0x000008, "Wrong size on GSE_UMGFuncLib_RemoveUserWidgetAsSlateFromViewport");
//static_assert(offsetof(GSE_UMGFuncLib_RemoveUserWidgetAsSlateFromViewport, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_RemoveUserWidgetAsSlateFromViewport::Widget' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.SetColorVisionDeficiencyType
// 0x000C (0x000C - 0x0000)
struct GSE_UMGFuncLib_SetColorVisionDeficiencyType final
{
public:
	EColorVisionDeficiency                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Severity;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrectDeficiency;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowCorrectionWithDeficiency;                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_SetColorVisionDeficiencyType) == 0x000004, "Wrong alignment on GSE_UMGFuncLib_SetColorVisionDeficiencyType");
//static_assert(sizeof(GSE_UMGFuncLib_SetColorVisionDeficiencyType) == 0x00000C, "Wrong size on GSE_UMGFuncLib_SetColorVisionDeficiencyType");
//static_assert(offsetof(GSE_UMGFuncLib_SetColorVisionDeficiencyType, Type) == 0x000000, "Member 'GSE_UMGFuncLib_SetColorVisionDeficiencyType::Type' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SetColorVisionDeficiencyType, Severity) == 0x000004, "Member 'GSE_UMGFuncLib_SetColorVisionDeficiencyType::Severity' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SetColorVisionDeficiencyType, CorrectDeficiency) == 0x000008, "Member 'GSE_UMGFuncLib_SetColorVisionDeficiencyType::CorrectDeficiency' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SetColorVisionDeficiencyType, ShowCorrectionWithDeficiency) == 0x000009, "Member 'GSE_UMGFuncLib_SetColorVisionDeficiencyType::ShowCorrectionWithDeficiency' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.SetCurrentCulture
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_SetCurrentCulture final
{
public:
	class FString                                 CultureName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_SetCurrentCulture) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_SetCurrentCulture");
//static_assert(sizeof(GSE_UMGFuncLib_SetCurrentCulture) == 0x000018, "Wrong size on GSE_UMGFuncLib_SetCurrentCulture");
//static_assert(offsetof(GSE_UMGFuncLib_SetCurrentCulture, CultureName) == 0x000000, "Member 'GSE_UMGFuncLib_SetCurrentCulture::CultureName' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SetCurrentCulture, ReturnValue) == 0x000010, "Member 'GSE_UMGFuncLib_SetCurrentCulture::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.SetHardwareCursor
// 0x0030 (0x0030 - 0x0000)
struct GSE_UMGFuncLib_SetHardwareCursor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMouseCursor                                  CursorShape;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CursorName;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              HotSpot;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_SetHardwareCursor) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_SetHardwareCursor");
//static_assert(sizeof(GSE_UMGFuncLib_SetHardwareCursor) == 0x000030, "Wrong size on GSE_UMGFuncLib_SetHardwareCursor");
//static_assert(offsetof(GSE_UMGFuncLib_SetHardwareCursor, WorldContextObject) == 0x000000, "Member 'GSE_UMGFuncLib_SetHardwareCursor::WorldContextObject' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SetHardwareCursor, CursorShape) == 0x000008, "Member 'GSE_UMGFuncLib_SetHardwareCursor::CursorShape' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SetHardwareCursor, CursorName) == 0x00000C, "Member 'GSE_UMGFuncLib_SetHardwareCursor::CursorName' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SetHardwareCursor, HotSpot) == 0x000018, "Member 'GSE_UMGFuncLib_SetHardwareCursor::HotSpot' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SetHardwareCursor, ReturnValue) == 0x000028, "Member 'GSE_UMGFuncLib_SetHardwareCursor::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.SetLocalStringTableEntry
// 0x0030 (0x0030 - 0x0000)
struct GSE_UMGFuncLib_SetLocalStringTableEntry final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Src;                                               // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_SetLocalStringTableEntry) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_SetLocalStringTableEntry");
//static_assert(sizeof(GSE_UMGFuncLib_SetLocalStringTableEntry) == 0x000030, "Wrong size on GSE_UMGFuncLib_SetLocalStringTableEntry");
//static_assert(offsetof(GSE_UMGFuncLib_SetLocalStringTableEntry, ID) == 0x000000, "Member 'GSE_UMGFuncLib_SetLocalStringTableEntry::ID' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SetLocalStringTableEntry, Key) == 0x000008, "Member 'GSE_UMGFuncLib_SetLocalStringTableEntry::Key' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SetLocalStringTableEntry, Src) == 0x000018, "Member 'GSE_UMGFuncLib_SetLocalStringTableEntry::Src' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SetLocalStringTableEntry, ReturnValue) == 0x000028, "Member 'GSE_UMGFuncLib_SetLocalStringTableEntry::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.SetTextToBitmapFontBox
// 0x0020 (0x0020 - 0x0000)
struct GSE_UMGFuncLib_SetTextToBitmapFontBox final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_SetTextToBitmapFontBox) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_SetTextToBitmapFontBox");
//static_assert(sizeof(GSE_UMGFuncLib_SetTextToBitmapFontBox) == 0x000020, "Wrong size on GSE_UMGFuncLib_SetTextToBitmapFontBox");
//static_assert(offsetof(GSE_UMGFuncLib_SetTextToBitmapFontBox, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_SetTextToBitmapFontBox::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SetTextToBitmapFontBox, Text) == 0x000008, "Member 'GSE_UMGFuncLib_SetTextToBitmapFontBox::Text' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.SetUserFocusWithCause
// 0x0018 (0x0018 - 0x0000)
struct GSE_UMGFuncLib_SetUserFocusWithCause final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFocusCause                                   Cause;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_SetUserFocusWithCause) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_SetUserFocusWithCause");
//static_assert(sizeof(GSE_UMGFuncLib_SetUserFocusWithCause) == 0x000018, "Wrong size on GSE_UMGFuncLib_SetUserFocusWithCause");
//static_assert(offsetof(GSE_UMGFuncLib_SetUserFocusWithCause, PlayerController) == 0x000000, "Member 'GSE_UMGFuncLib_SetUserFocusWithCause::PlayerController' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SetUserFocusWithCause, Widget) == 0x000008, "Member 'GSE_UMGFuncLib_SetUserFocusWithCause::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SetUserFocusWithCause, Cause) == 0x000010, "Member 'GSE_UMGFuncLib_SetUserFocusWithCause::Cause' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.SetWidgetEnable
// 0x0010 (0x0010 - 0x0000)
struct GSE_UMGFuncLib_SetWidgetEnable final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSE_UMGFuncLib_SetWidgetEnable) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_SetWidgetEnable");
//static_assert(sizeof(GSE_UMGFuncLib_SetWidgetEnable) == 0x000010, "Wrong size on GSE_UMGFuncLib_SetWidgetEnable");
//static_assert(offsetof(GSE_UMGFuncLib_SetWidgetEnable, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_SetWidgetEnable::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SetWidgetEnable, Enable) == 0x000008, "Member 'GSE_UMGFuncLib_SetWidgetEnable::Enable' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.SlateAbsoluteToLocal
// 0x0060 (0x0060 - 0x0000)
struct GSE_UMGFuncLib_SlateAbsoluteToLocal final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              AbsolutePos;                                       // 0x0040(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_SlateAbsoluteToLocal) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_SlateAbsoluteToLocal");
//static_assert(sizeof(GSE_UMGFuncLib_SlateAbsoluteToLocal) == 0x000060, "Wrong size on GSE_UMGFuncLib_SlateAbsoluteToLocal");
//static_assert(offsetof(GSE_UMGFuncLib_SlateAbsoluteToLocal, Geometry) == 0x000000, "Member 'GSE_UMGFuncLib_SlateAbsoluteToLocal::Geometry' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SlateAbsoluteToLocal, AbsolutePos) == 0x000040, "Member 'GSE_UMGFuncLib_SlateAbsoluteToLocal::AbsolutePos' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SlateAbsoluteToLocal, ReturnValue) == 0x000050, "Member 'GSE_UMGFuncLib_SlateAbsoluteToLocal::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.SlateLocalToAbsolute
// 0x0060 (0x0060 - 0x0000)
struct GSE_UMGFuncLib_SlateLocalToAbsolute final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              LocalPos;                                          // 0x0040(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_SlateLocalToAbsolute) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_SlateLocalToAbsolute");
//static_assert(sizeof(GSE_UMGFuncLib_SlateLocalToAbsolute) == 0x000060, "Wrong size on GSE_UMGFuncLib_SlateLocalToAbsolute");
//static_assert(offsetof(GSE_UMGFuncLib_SlateLocalToAbsolute, Geometry) == 0x000000, "Member 'GSE_UMGFuncLib_SlateLocalToAbsolute::Geometry' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SlateLocalToAbsolute, LocalPos) == 0x000040, "Member 'GSE_UMGFuncLib_SlateLocalToAbsolute::LocalPos' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_SlateLocalToAbsolute, ReturnValue) == 0x000050, "Member 'GSE_UMGFuncLib_SlateLocalToAbsolute::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.WidgetAbsoluteToLocal
// 0x0028 (0x0028 - 0x0000)
struct GSE_UMGFuncLib_WidgetAbsoluteToLocal final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AbsoluteCoordinates;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_WidgetAbsoluteToLocal) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_WidgetAbsoluteToLocal");
//static_assert(sizeof(GSE_UMGFuncLib_WidgetAbsoluteToLocal) == 0x000028, "Wrong size on GSE_UMGFuncLib_WidgetAbsoluteToLocal");
//static_assert(offsetof(GSE_UMGFuncLib_WidgetAbsoluteToLocal, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_WidgetAbsoluteToLocal::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_WidgetAbsoluteToLocal, AbsoluteCoordinates) == 0x000008, "Member 'GSE_UMGFuncLib_WidgetAbsoluteToLocal::AbsoluteCoordinates' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_WidgetAbsoluteToLocal, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_WidgetAbsoluteToLocal::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.WidgetLocalToAbsolute
// 0x0028 (0x0028 - 0x0000)
struct GSE_UMGFuncLib_WidgetLocalToAbsolute final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LocalCoordinates;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_WidgetLocalToAbsolute) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_WidgetLocalToAbsolute");
//static_assert(sizeof(GSE_UMGFuncLib_WidgetLocalToAbsolute) == 0x000028, "Wrong size on GSE_UMGFuncLib_WidgetLocalToAbsolute");
//static_assert(offsetof(GSE_UMGFuncLib_WidgetLocalToAbsolute, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_WidgetLocalToAbsolute::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_WidgetLocalToAbsolute, LocalCoordinates) == 0x000008, "Member 'GSE_UMGFuncLib_WidgetLocalToAbsolute::LocalCoordinates' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_WidgetLocalToAbsolute, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_WidgetLocalToAbsolute::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_UMGFuncLib.WidgetLocalToRoundedLocal
// 0x0028 (0x0028 - 0x0000)
struct GSE_UMGFuncLib_WidgetLocalToRoundedLocal final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LocalCoordinates;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_UMGFuncLib_WidgetLocalToRoundedLocal) == 0x000008, "Wrong alignment on GSE_UMGFuncLib_WidgetLocalToRoundedLocal");
//static_assert(sizeof(GSE_UMGFuncLib_WidgetLocalToRoundedLocal) == 0x000028, "Wrong size on GSE_UMGFuncLib_WidgetLocalToRoundedLocal");
//static_assert(offsetof(GSE_UMGFuncLib_WidgetLocalToRoundedLocal, Widget) == 0x000000, "Member 'GSE_UMGFuncLib_WidgetLocalToRoundedLocal::Widget' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_WidgetLocalToRoundedLocal, LocalCoordinates) == 0x000008, "Member 'GSE_UMGFuncLib_WidgetLocalToRoundedLocal::LocalCoordinates' has a wrong offset!");
//static_assert(offsetof(GSE_UMGFuncLib_WidgetLocalToRoundedLocal, ReturnValue) == 0x000018, "Member 'GSE_UMGFuncLib_WidgetLocalToRoundedLocal::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSE_WidgetCompFuncLib.DestoryWidgetComponent
// 0x0008 (0x0008 - 0x0000)
struct GSE_WidgetCompFuncLib_DestoryWidgetComponent final
{
public:
	class UWidgetComponent*                       Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_WidgetCompFuncLib_DestoryWidgetComponent) == 0x000008, "Wrong alignment on GSE_WidgetCompFuncLib_DestoryWidgetComponent");
//static_assert(sizeof(GSE_WidgetCompFuncLib_DestoryWidgetComponent) == 0x000008, "Wrong size on GSE_WidgetCompFuncLib_DestoryWidgetComponent");
//static_assert(offsetof(GSE_WidgetCompFuncLib_DestoryWidgetComponent, Comp) == 0x000000, "Member 'GSE_WidgetCompFuncLib_DestoryWidgetComponent::Comp' has a wrong offset!");

// Function UnrealExtent.GSE_WidgetCompFuncLib.RegisterWidgetComponent
// 0x0008 (0x0008 - 0x0000)
struct GSE_WidgetCompFuncLib_RegisterWidgetComponent final
{
public:
	class UWidgetComponent*                       Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_WidgetCompFuncLib_RegisterWidgetComponent) == 0x000008, "Wrong alignment on GSE_WidgetCompFuncLib_RegisterWidgetComponent");
//static_assert(sizeof(GSE_WidgetCompFuncLib_RegisterWidgetComponent) == 0x000008, "Wrong size on GSE_WidgetCompFuncLib_RegisterWidgetComponent");
//static_assert(offsetof(GSE_WidgetCompFuncLib_RegisterWidgetComponent, Comp) == 0x000000, "Member 'GSE_WidgetCompFuncLib_RegisterWidgetComponent::Comp' has a wrong offset!");

// Function UnrealExtent.GSE_WidgetCompFuncLib.UnregisterWidgetComponent
// 0x0008 (0x0008 - 0x0000)
struct GSE_WidgetCompFuncLib_UnregisterWidgetComponent final
{
public:
	class UWidgetComponent*                       Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSE_WidgetCompFuncLib_UnregisterWidgetComponent) == 0x000008, "Wrong alignment on GSE_WidgetCompFuncLib_UnregisterWidgetComponent");
//static_assert(sizeof(GSE_WidgetCompFuncLib_UnregisterWidgetComponent) == 0x000008, "Wrong size on GSE_WidgetCompFuncLib_UnregisterWidgetComponent");
//static_assert(offsetof(GSE_WidgetCompFuncLib_UnregisterWidgetComponent, Comp) == 0x000000, "Member 'GSE_WidgetCompFuncLib_UnregisterWidgetComponent::Comp' has a wrong offset!");

// Function UnrealExtent.GSRetainerBox.OnViewWidgetSizeChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct GSRetainerBox_OnViewWidgetSizeChangedEvent final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRetainerBox_OnViewWidgetSizeChangedEvent) == 0x000008, "Wrong alignment on GSRetainerBox_OnViewWidgetSizeChangedEvent");
//static_assert(sizeof(GSRetainerBox_OnViewWidgetSizeChangedEvent) == 0x000010, "Wrong size on GSRetainerBox_OnViewWidgetSizeChangedEvent");
//static_assert(offsetof(GSRetainerBox_OnViewWidgetSizeChangedEvent, Size) == 0x000000, "Member 'GSRetainerBox_OnViewWidgetSizeChangedEvent::Size' has a wrong offset!");

// Function UnrealExtent.GSRetainerBox.SetEffectMaterial
// 0x0008 (0x0008 - 0x0000)
struct GSRetainerBox_SetEffectMaterial final
{
public:
	class UMaterialInterface*                     EffectMaterial_0;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRetainerBox_SetEffectMaterial) == 0x000008, "Wrong alignment on GSRetainerBox_SetEffectMaterial");
//static_assert(sizeof(GSRetainerBox_SetEffectMaterial) == 0x000008, "Wrong size on GSRetainerBox_SetEffectMaterial");
//static_assert(offsetof(GSRetainerBox_SetEffectMaterial, EffectMaterial_0) == 0x000000, "Member 'GSRetainerBox_SetEffectMaterial::EffectMaterial_0' has a wrong offset!");

// Function UnrealExtent.GSRetainerBox.SetRenderingPhase
// 0x0008 (0x0008 - 0x0000)
struct GSRetainerBox_SetRenderingPhase final
{
public:
	int32                                         RenderPhase;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPhases;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRetainerBox_SetRenderingPhase) == 0x000004, "Wrong alignment on GSRetainerBox_SetRenderingPhase");
//static_assert(sizeof(GSRetainerBox_SetRenderingPhase) == 0x000008, "Wrong size on GSRetainerBox_SetRenderingPhase");
//static_assert(offsetof(GSRetainerBox_SetRenderingPhase, RenderPhase) == 0x000000, "Member 'GSRetainerBox_SetRenderingPhase::RenderPhase' has a wrong offset!");
//static_assert(offsetof(GSRetainerBox_SetRenderingPhase, TotalPhases) == 0x000004, "Member 'GSRetainerBox_SetRenderingPhase::TotalPhases' has a wrong offset!");

// Function UnrealExtent.GSRetainerBox.SetRetainRendering
// 0x0001 (0x0001 - 0x0000)
struct GSRetainerBox_SetRetainRendering final
{
public:
	bool                                          bInRetainRendering;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRetainerBox_SetRetainRendering) == 0x000001, "Wrong alignment on GSRetainerBox_SetRetainRendering");
//static_assert(sizeof(GSRetainerBox_SetRetainRendering) == 0x000001, "Wrong size on GSRetainerBox_SetRetainRendering");
//static_assert(offsetof(GSRetainerBox_SetRetainRendering, bInRetainRendering) == 0x000000, "Member 'GSRetainerBox_SetRetainRendering::bInRetainRendering' has a wrong offset!");

// Function UnrealExtent.GSRetainerBox.SetTextureParameter
// 0x0008 (0x0008 - 0x0000)
struct GSRetainerBox_SetTextureParameter final
{
public:
	class FName                                   TextureParameter_0;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRetainerBox_SetTextureParameter) == 0x000004, "Wrong alignment on GSRetainerBox_SetTextureParameter");
//static_assert(sizeof(GSRetainerBox_SetTextureParameter) == 0x000008, "Wrong size on GSRetainerBox_SetTextureParameter");
//static_assert(offsetof(GSRetainerBox_SetTextureParameter, TextureParameter_0) == 0x000000, "Member 'GSRetainerBox_SetTextureParameter::TextureParameter_0' has a wrong offset!");

// Function UnrealExtent.GSRetainerBox.GetEffectMaterial
// 0x0008 (0x0008 - 0x0000)
struct GSRetainerBox_GetEffectMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRetainerBox_GetEffectMaterial) == 0x000008, "Wrong alignment on GSRetainerBox_GetEffectMaterial");
//static_assert(sizeof(GSRetainerBox_GetEffectMaterial) == 0x000008, "Wrong size on GSRetainerBox_GetEffectMaterial");
//static_assert(offsetof(GSRetainerBox_GetEffectMaterial, ReturnValue) == 0x000000, "Member 'GSRetainerBox_GetEffectMaterial::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSRichTextBlock.ApplyText
// 0x0018 (0x0018 - 0x0000)
struct GSRichTextBlock_ApplyText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichTextBlock_ApplyText) == 0x000008, "Wrong alignment on GSRichTextBlock_ApplyText");
//static_assert(sizeof(GSRichTextBlock_ApplyText) == 0x000018, "Wrong size on GSRichTextBlock_ApplyText");
//static_assert(offsetof(GSRichTextBlock_ApplyText, InText) == 0x000000, "Member 'GSRichTextBlock_ApplyText::InText' has a wrong offset!");

// Function UnrealExtent.GSRichTextBlock.SetDefaultIndentSize
// 0x0004 (0x0004 - 0x0000)
struct GSRichTextBlock_SetDefaultIndentSize final
{
public:
	float                                         InDefaultIndentSize;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichTextBlock_SetDefaultIndentSize) == 0x000004, "Wrong alignment on GSRichTextBlock_SetDefaultIndentSize");
//static_assert(sizeof(GSRichTextBlock_SetDefaultIndentSize) == 0x000004, "Wrong size on GSRichTextBlock_SetDefaultIndentSize");
//static_assert(offsetof(GSRichTextBlock_SetDefaultIndentSize, InDefaultIndentSize) == 0x000000, "Member 'GSRichTextBlock_SetDefaultIndentSize::InDefaultIndentSize' has a wrong offset!");

// Function UnrealExtent.GSRichTextBlock.SetUseIndent
// 0x0001 (0x0001 - 0x0000)
struct GSRichTextBlock_SetUseIndent final
{
public:
	bool                                          InUseIndent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichTextBlock_SetUseIndent) == 0x000001, "Wrong alignment on GSRichTextBlock_SetUseIndent");
//static_assert(sizeof(GSRichTextBlock_SetUseIndent) == 0x000001, "Wrong size on GSRichTextBlock_SetUseIndent");
//static_assert(offsetof(GSRichTextBlock_SetUseIndent, InUseIndent) == 0x000000, "Member 'GSRichTextBlock_SetUseIndent::InUseIndent' has a wrong offset!");

// Function UnrealExtent.GSRichTextBlock.GetContent
// 0x0010 (0x0010 - 0x0000)
struct GSRichTextBlock_GetContent final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichTextBlock_GetContent) == 0x000008, "Wrong alignment on GSRichTextBlock_GetContent");
//static_assert(sizeof(GSRichTextBlock_GetContent) == 0x000010, "Wrong size on GSRichTextBlock_GetContent");
//static_assert(offsetof(GSRichTextBlock_GetContent, ReturnValue) == 0x000000, "Member 'GSRichTextBlock_GetContent::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSRichTextBlock.GetDefaultIndentSize
// 0x0004 (0x0004 - 0x0000)
struct GSRichTextBlock_GetDefaultIndentSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichTextBlock_GetDefaultIndentSize) == 0x000004, "Wrong alignment on GSRichTextBlock_GetDefaultIndentSize");
//static_assert(sizeof(GSRichTextBlock_GetDefaultIndentSize) == 0x000004, "Wrong size on GSRichTextBlock_GetDefaultIndentSize");
//static_assert(offsetof(GSRichTextBlock_GetDefaultIndentSize, ReturnValue) == 0x000000, "Member 'GSRichTextBlock_GetDefaultIndentSize::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSRichTextBlock.GetUseIndent
// 0x0001 (0x0001 - 0x0000)
struct GSRichTextBlock_GetUseIndent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichTextBlock_GetUseIndent) == 0x000001, "Wrong alignment on GSRichTextBlock_GetUseIndent");
//static_assert(sizeof(GSRichTextBlock_GetUseIndent) == 0x000001, "Wrong size on GSRichTextBlock_GetUseIndent");
//static_assert(offsetof(GSRichTextBlock_GetUseIndent, ReturnValue) == 0x000000, "Member 'GSRichTextBlock_GetUseIndent::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSRichScaleText.SetGSHeightOverride
// 0x0004 (0x0004 - 0x0000)
struct GSRichScaleText_SetGSHeightOverride final
{
public:
	float                                         InGSHeightOverride;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichScaleText_SetGSHeightOverride) == 0x000004, "Wrong alignment on GSRichScaleText_SetGSHeightOverride");
//static_assert(sizeof(GSRichScaleText_SetGSHeightOverride) == 0x000004, "Wrong size on GSRichScaleText_SetGSHeightOverride");
//static_assert(offsetof(GSRichScaleText_SetGSHeightOverride, InGSHeightOverride) == 0x000000, "Member 'GSRichScaleText_SetGSHeightOverride::InGSHeightOverride' has a wrong offset!");

// Function UnrealExtent.GSRichScaleText.SetGSMaxAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct GSRichScaleText_SetGSMaxAspectRatio final
{
public:
	float                                         InGSMaxAspectRatio;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichScaleText_SetGSMaxAspectRatio) == 0x000004, "Wrong alignment on GSRichScaleText_SetGSMaxAspectRatio");
//static_assert(sizeof(GSRichScaleText_SetGSMaxAspectRatio) == 0x000004, "Wrong size on GSRichScaleText_SetGSMaxAspectRatio");
//static_assert(offsetof(GSRichScaleText_SetGSMaxAspectRatio, InGSMaxAspectRatio) == 0x000000, "Member 'GSRichScaleText_SetGSMaxAspectRatio::InGSMaxAspectRatio' has a wrong offset!");

// Function UnrealExtent.GSRichScaleText.SetGSMaxDesiredHeight
// 0x0004 (0x0004 - 0x0000)
struct GSRichScaleText_SetGSMaxDesiredHeight final
{
public:
	float                                         InGSMaxDesiredHeight;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichScaleText_SetGSMaxDesiredHeight) == 0x000004, "Wrong alignment on GSRichScaleText_SetGSMaxDesiredHeight");
//static_assert(sizeof(GSRichScaleText_SetGSMaxDesiredHeight) == 0x000004, "Wrong size on GSRichScaleText_SetGSMaxDesiredHeight");
//static_assert(offsetof(GSRichScaleText_SetGSMaxDesiredHeight, InGSMaxDesiredHeight) == 0x000000, "Member 'GSRichScaleText_SetGSMaxDesiredHeight::InGSMaxDesiredHeight' has a wrong offset!");

// Function UnrealExtent.GSRichScaleText.SetGSMaxDesiredWidth
// 0x0004 (0x0004 - 0x0000)
struct GSRichScaleText_SetGSMaxDesiredWidth final
{
public:
	float                                         InGSMaxDesiredWidth;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichScaleText_SetGSMaxDesiredWidth) == 0x000004, "Wrong alignment on GSRichScaleText_SetGSMaxDesiredWidth");
//static_assert(sizeof(GSRichScaleText_SetGSMaxDesiredWidth) == 0x000004, "Wrong size on GSRichScaleText_SetGSMaxDesiredWidth");
//static_assert(offsetof(GSRichScaleText_SetGSMaxDesiredWidth, InGSMaxDesiredWidth) == 0x000000, "Member 'GSRichScaleText_SetGSMaxDesiredWidth::InGSMaxDesiredWidth' has a wrong offset!");

// Function UnrealExtent.GSRichScaleText.SetGSMinAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct GSRichScaleText_SetGSMinAspectRatio final
{
public:
	float                                         InGSMinAspectRatio;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichScaleText_SetGSMinAspectRatio) == 0x000004, "Wrong alignment on GSRichScaleText_SetGSMinAspectRatio");
//static_assert(sizeof(GSRichScaleText_SetGSMinAspectRatio) == 0x000004, "Wrong size on GSRichScaleText_SetGSMinAspectRatio");
//static_assert(offsetof(GSRichScaleText_SetGSMinAspectRatio, InGSMinAspectRatio) == 0x000000, "Member 'GSRichScaleText_SetGSMinAspectRatio::InGSMinAspectRatio' has a wrong offset!");

// Function UnrealExtent.GSRichScaleText.SetGSMinDesiredHeight
// 0x0004 (0x0004 - 0x0000)
struct GSRichScaleText_SetGSMinDesiredHeight final
{
public:
	float                                         InGSMinDesiredHeight;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichScaleText_SetGSMinDesiredHeight) == 0x000004, "Wrong alignment on GSRichScaleText_SetGSMinDesiredHeight");
//static_assert(sizeof(GSRichScaleText_SetGSMinDesiredHeight) == 0x000004, "Wrong size on GSRichScaleText_SetGSMinDesiredHeight");
//static_assert(offsetof(GSRichScaleText_SetGSMinDesiredHeight, InGSMinDesiredHeight) == 0x000000, "Member 'GSRichScaleText_SetGSMinDesiredHeight::InGSMinDesiredHeight' has a wrong offset!");

// Function UnrealExtent.GSRichScaleText.SetGSMinDesiredWidth
// 0x0004 (0x0004 - 0x0000)
struct GSRichScaleText_SetGSMinDesiredWidth final
{
public:
	float                                         InGSMinDesiredWidth;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichScaleText_SetGSMinDesiredWidth) == 0x000004, "Wrong alignment on GSRichScaleText_SetGSMinDesiredWidth");
//static_assert(sizeof(GSRichScaleText_SetGSMinDesiredWidth) == 0x000004, "Wrong size on GSRichScaleText_SetGSMinDesiredWidth");
//static_assert(offsetof(GSRichScaleText_SetGSMinDesiredWidth, InGSMinDesiredWidth) == 0x000000, "Member 'GSRichScaleText_SetGSMinDesiredWidth::InGSMinDesiredWidth' has a wrong offset!");

// Function UnrealExtent.GSRichScaleText.SetGSWidthOverride
// 0x0004 (0x0004 - 0x0000)
struct GSRichScaleText_SetGSWidthOverride final
{
public:
	float                                         InGSWidthOverride;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichScaleText_SetGSWidthOverride) == 0x000004, "Wrong alignment on GSRichScaleText_SetGSWidthOverride");
//static_assert(sizeof(GSRichScaleText_SetGSWidthOverride) == 0x000004, "Wrong size on GSRichScaleText_SetGSWidthOverride");
//static_assert(offsetof(GSRichScaleText_SetGSWidthOverride, InGSWidthOverride) == 0x000000, "Member 'GSRichScaleText_SetGSWidthOverride::InGSWidthOverride' has a wrong offset!");

// Function UnrealExtent.GSRichScaleText.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct GSRichScaleText_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichScaleText_SetHorizontalAlignment) == 0x000001, "Wrong alignment on GSRichScaleText_SetHorizontalAlignment");
//static_assert(sizeof(GSRichScaleText_SetHorizontalAlignment) == 0x000001, "Wrong size on GSRichScaleText_SetHorizontalAlignment");
//static_assert(offsetof(GSRichScaleText_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'GSRichScaleText_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function UnrealExtent.GSRichScaleText.SetIgnoreInheritedScale
// 0x0001 (0x0001 - 0x0000)
struct GSRichScaleText_SetIgnoreInheritedScale final
{
public:
	bool                                          bInIgnoreInheritedScale;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichScaleText_SetIgnoreInheritedScale) == 0x000001, "Wrong alignment on GSRichScaleText_SetIgnoreInheritedScale");
//static_assert(sizeof(GSRichScaleText_SetIgnoreInheritedScale) == 0x000001, "Wrong size on GSRichScaleText_SetIgnoreInheritedScale");
//static_assert(offsetof(GSRichScaleText_SetIgnoreInheritedScale, bInIgnoreInheritedScale) == 0x000000, "Member 'GSRichScaleText_SetIgnoreInheritedScale::bInIgnoreInheritedScale' has a wrong offset!");

// Function UnrealExtent.GSRichScaleText.SetStretch
// 0x0001 (0x0001 - 0x0000)
struct GSRichScaleText_SetStretch final
{
public:
	EStretch                                      InStretch;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichScaleText_SetStretch) == 0x000001, "Wrong alignment on GSRichScaleText_SetStretch");
//static_assert(sizeof(GSRichScaleText_SetStretch) == 0x000001, "Wrong size on GSRichScaleText_SetStretch");
//static_assert(offsetof(GSRichScaleText_SetStretch, InStretch) == 0x000000, "Member 'GSRichScaleText_SetStretch::InStretch' has a wrong offset!");

// Function UnrealExtent.GSRichScaleText.SetStretchDirection
// 0x0001 (0x0001 - 0x0000)
struct GSRichScaleText_SetStretchDirection final
{
public:
	EStretchDirection                             InStretchDirection;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichScaleText_SetStretchDirection) == 0x000001, "Wrong alignment on GSRichScaleText_SetStretchDirection");
//static_assert(sizeof(GSRichScaleText_SetStretchDirection) == 0x000001, "Wrong size on GSRichScaleText_SetStretchDirection");
//static_assert(offsetof(GSRichScaleText_SetStretchDirection, InStretchDirection) == 0x000000, "Member 'GSRichScaleText_SetStretchDirection::InStretchDirection' has a wrong offset!");

// Function UnrealExtent.GSRichScaleText.SetUserSpecifiedScale
// 0x0004 (0x0004 - 0x0000)
struct GSRichScaleText_SetUserSpecifiedScale final
{
public:
	float                                         InUserSpecifiedScale;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichScaleText_SetUserSpecifiedScale) == 0x000004, "Wrong alignment on GSRichScaleText_SetUserSpecifiedScale");
//static_assert(sizeof(GSRichScaleText_SetUserSpecifiedScale) == 0x000004, "Wrong size on GSRichScaleText_SetUserSpecifiedScale");
//static_assert(offsetof(GSRichScaleText_SetUserSpecifiedScale, InUserSpecifiedScale) == 0x000000, "Member 'GSRichScaleText_SetUserSpecifiedScale::InUserSpecifiedScale' has a wrong offset!");

// Function UnrealExtent.GSRichScaleText.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct GSRichScaleText_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSRichScaleText_SetVerticalAlignment) == 0x000001, "Wrong alignment on GSRichScaleText_SetVerticalAlignment");
//static_assert(sizeof(GSRichScaleText_SetVerticalAlignment) == 0x000001, "Wrong size on GSRichScaleText_SetVerticalAlignment");
//static_assert(offsetof(GSRichScaleText_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'GSRichScaleText_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function UnrealExtent.GSRoundRect.CalcMappingRoundRectPoint
// 0x0060 (0x0060 - 0x0000)
struct GSRoundRect_CalcMappingRoundRectPoint final
{
public:
	struct FVector2D                              PosInViewPort;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInFront;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InnerContentRectSize;                              // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InnerContentRectAlign;                             // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOuter;                                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              BorderPosRefRoundRect;                             // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RectAngle;                                         // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutIndicatorType;                                  // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(GSRoundRect_CalcMappingRoundRectPoint) == 0x000008, "Wrong alignment on GSRoundRect_CalcMappingRoundRectPoint");
//static_assert(sizeof(GSRoundRect_CalcMappingRoundRectPoint) == 0x000060, "Wrong size on GSRoundRect_CalcMappingRoundRectPoint");
//static_assert(offsetof(GSRoundRect_CalcMappingRoundRectPoint, PosInViewPort) == 0x000000, "Member 'GSRoundRect_CalcMappingRoundRectPoint::PosInViewPort' has a wrong offset!");
//static_assert(offsetof(GSRoundRect_CalcMappingRoundRectPoint, IsInFront) == 0x000010, "Member 'GSRoundRect_CalcMappingRoundRectPoint::IsInFront' has a wrong offset!");
//static_assert(offsetof(GSRoundRect_CalcMappingRoundRectPoint, InnerContentRectSize) == 0x000018, "Member 'GSRoundRect_CalcMappingRoundRectPoint::InnerContentRectSize' has a wrong offset!");
//static_assert(offsetof(GSRoundRect_CalcMappingRoundRectPoint, InnerContentRectAlign) == 0x000028, "Member 'GSRoundRect_CalcMappingRoundRectPoint::InnerContentRectAlign' has a wrong offset!");
//static_assert(offsetof(GSRoundRect_CalcMappingRoundRectPoint, IsOuter) == 0x000038, "Member 'GSRoundRect_CalcMappingRoundRectPoint::IsOuter' has a wrong offset!");
//static_assert(offsetof(GSRoundRect_CalcMappingRoundRectPoint, BorderPosRefRoundRect) == 0x000040, "Member 'GSRoundRect_CalcMappingRoundRectPoint::BorderPosRefRoundRect' has a wrong offset!");
//static_assert(offsetof(GSRoundRect_CalcMappingRoundRectPoint, RectAngle) == 0x000050, "Member 'GSRoundRect_CalcMappingRoundRectPoint::RectAngle' has a wrong offset!");
//static_assert(offsetof(GSRoundRect_CalcMappingRoundRectPoint, OutIndicatorType) == 0x000054, "Member 'GSRoundRect_CalcMappingRoundRectPoint::OutIndicatorType' has a wrong offset!");
//static_assert(offsetof(GSRoundRect_CalcMappingRoundRectPoint, ReturnValue) == 0x000058, "Member 'GSRoundRect_CalcMappingRoundRectPoint::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSTextBlock.ApplyText
// 0x0018 (0x0018 - 0x0000)
struct GSTextBlock_ApplyText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTextBlock_ApplyText) == 0x000008, "Wrong alignment on GSTextBlock_ApplyText");
//static_assert(sizeof(GSTextBlock_ApplyText) == 0x000018, "Wrong size on GSTextBlock_ApplyText");
//static_assert(offsetof(GSTextBlock_ApplyText, InText) == 0x000000, "Member 'GSTextBlock_ApplyText::InText' has a wrong offset!");

// Function UnrealExtent.GSTextBlock.SetDefaultIndentSize
// 0x0004 (0x0004 - 0x0000)
struct GSTextBlock_SetDefaultIndentSize final
{
public:
	float                                         InDefaultIndentSize;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTextBlock_SetDefaultIndentSize) == 0x000004, "Wrong alignment on GSTextBlock_SetDefaultIndentSize");
//static_assert(sizeof(GSTextBlock_SetDefaultIndentSize) == 0x000004, "Wrong size on GSTextBlock_SetDefaultIndentSize");
//static_assert(offsetof(GSTextBlock_SetDefaultIndentSize, InDefaultIndentSize) == 0x000000, "Member 'GSTextBlock_SetDefaultIndentSize::InDefaultIndentSize' has a wrong offset!");

// Function UnrealExtent.GSTextBlock.SetUseIndent
// 0x0001 (0x0001 - 0x0000)
struct GSTextBlock_SetUseIndent final
{
public:
	bool                                          InUseIndent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTextBlock_SetUseIndent) == 0x000001, "Wrong alignment on GSTextBlock_SetUseIndent");
//static_assert(sizeof(GSTextBlock_SetUseIndent) == 0x000001, "Wrong size on GSTextBlock_SetUseIndent");
//static_assert(offsetof(GSTextBlock_SetUseIndent, InUseIndent) == 0x000000, "Member 'GSTextBlock_SetUseIndent::InUseIndent' has a wrong offset!");

// Function UnrealExtent.GSTextBlock.GetContent
// 0x0010 (0x0010 - 0x0000)
struct GSTextBlock_GetContent final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTextBlock_GetContent) == 0x000008, "Wrong alignment on GSTextBlock_GetContent");
//static_assert(sizeof(GSTextBlock_GetContent) == 0x000010, "Wrong size on GSTextBlock_GetContent");
//static_assert(offsetof(GSTextBlock_GetContent, ReturnValue) == 0x000000, "Member 'GSTextBlock_GetContent::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSTextBlock.GetDefaultIndentSize
// 0x0004 (0x0004 - 0x0000)
struct GSTextBlock_GetDefaultIndentSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTextBlock_GetDefaultIndentSize) == 0x000004, "Wrong alignment on GSTextBlock_GetDefaultIndentSize");
//static_assert(sizeof(GSTextBlock_GetDefaultIndentSize) == 0x000004, "Wrong size on GSTextBlock_GetDefaultIndentSize");
//static_assert(offsetof(GSTextBlock_GetDefaultIndentSize, ReturnValue) == 0x000000, "Member 'GSTextBlock_GetDefaultIndentSize::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSTextBlock.GetUseIndent
// 0x0001 (0x0001 - 0x0000)
struct GSTextBlock_GetUseIndent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTextBlock_GetUseIndent) == 0x000001, "Wrong alignment on GSTextBlock_GetUseIndent");
//static_assert(sizeof(GSTextBlock_GetUseIndent) == 0x000001, "Wrong size on GSTextBlock_GetUseIndent");
//static_assert(offsetof(GSTextBlock_GetUseIndent, ReturnValue) == 0x000000, "Member 'GSTextBlock_GetUseIndent::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSScaleText.SetGSHeightOverride
// 0x0004 (0x0004 - 0x0000)
struct GSScaleText_SetGSHeightOverride final
{
public:
	float                                         InGSHeightOverride;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScaleText_SetGSHeightOverride) == 0x000004, "Wrong alignment on GSScaleText_SetGSHeightOverride");
//static_assert(sizeof(GSScaleText_SetGSHeightOverride) == 0x000004, "Wrong size on GSScaleText_SetGSHeightOverride");
//static_assert(offsetof(GSScaleText_SetGSHeightOverride, InGSHeightOverride) == 0x000000, "Member 'GSScaleText_SetGSHeightOverride::InGSHeightOverride' has a wrong offset!");

// Function UnrealExtent.GSScaleText.SetGSMaxAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct GSScaleText_SetGSMaxAspectRatio final
{
public:
	float                                         InGSMaxAspectRatio;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScaleText_SetGSMaxAspectRatio) == 0x000004, "Wrong alignment on GSScaleText_SetGSMaxAspectRatio");
//static_assert(sizeof(GSScaleText_SetGSMaxAspectRatio) == 0x000004, "Wrong size on GSScaleText_SetGSMaxAspectRatio");
//static_assert(offsetof(GSScaleText_SetGSMaxAspectRatio, InGSMaxAspectRatio) == 0x000000, "Member 'GSScaleText_SetGSMaxAspectRatio::InGSMaxAspectRatio' has a wrong offset!");

// Function UnrealExtent.GSScaleText.SetGSMaxDesiredHeight
// 0x0004 (0x0004 - 0x0000)
struct GSScaleText_SetGSMaxDesiredHeight final
{
public:
	float                                         InGSMaxDesiredHeight;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScaleText_SetGSMaxDesiredHeight) == 0x000004, "Wrong alignment on GSScaleText_SetGSMaxDesiredHeight");
//static_assert(sizeof(GSScaleText_SetGSMaxDesiredHeight) == 0x000004, "Wrong size on GSScaleText_SetGSMaxDesiredHeight");
//static_assert(offsetof(GSScaleText_SetGSMaxDesiredHeight, InGSMaxDesiredHeight) == 0x000000, "Member 'GSScaleText_SetGSMaxDesiredHeight::InGSMaxDesiredHeight' has a wrong offset!");

// Function UnrealExtent.GSScaleText.SetGSMaxDesiredWidth
// 0x0004 (0x0004 - 0x0000)
struct GSScaleText_SetGSMaxDesiredWidth final
{
public:
	float                                         InGSMaxDesiredWidth;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScaleText_SetGSMaxDesiredWidth) == 0x000004, "Wrong alignment on GSScaleText_SetGSMaxDesiredWidth");
//static_assert(sizeof(GSScaleText_SetGSMaxDesiredWidth) == 0x000004, "Wrong size on GSScaleText_SetGSMaxDesiredWidth");
//static_assert(offsetof(GSScaleText_SetGSMaxDesiredWidth, InGSMaxDesiredWidth) == 0x000000, "Member 'GSScaleText_SetGSMaxDesiredWidth::InGSMaxDesiredWidth' has a wrong offset!");

// Function UnrealExtent.GSScaleText.SetGSMinAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct GSScaleText_SetGSMinAspectRatio final
{
public:
	float                                         InGSMinAspectRatio;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScaleText_SetGSMinAspectRatio) == 0x000004, "Wrong alignment on GSScaleText_SetGSMinAspectRatio");
//static_assert(sizeof(GSScaleText_SetGSMinAspectRatio) == 0x000004, "Wrong size on GSScaleText_SetGSMinAspectRatio");
//static_assert(offsetof(GSScaleText_SetGSMinAspectRatio, InGSMinAspectRatio) == 0x000000, "Member 'GSScaleText_SetGSMinAspectRatio::InGSMinAspectRatio' has a wrong offset!");

// Function UnrealExtent.GSScaleText.SetGSMinDesiredHeight
// 0x0004 (0x0004 - 0x0000)
struct GSScaleText_SetGSMinDesiredHeight final
{
public:
	float                                         InGSMinDesiredHeight;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScaleText_SetGSMinDesiredHeight) == 0x000004, "Wrong alignment on GSScaleText_SetGSMinDesiredHeight");
//static_assert(sizeof(GSScaleText_SetGSMinDesiredHeight) == 0x000004, "Wrong size on GSScaleText_SetGSMinDesiredHeight");
//static_assert(offsetof(GSScaleText_SetGSMinDesiredHeight, InGSMinDesiredHeight) == 0x000000, "Member 'GSScaleText_SetGSMinDesiredHeight::InGSMinDesiredHeight' has a wrong offset!");

// Function UnrealExtent.GSScaleText.SetGSMinDesiredWidth
// 0x0004 (0x0004 - 0x0000)
struct GSScaleText_SetGSMinDesiredWidth final
{
public:
	float                                         InGSMinDesiredWidth;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScaleText_SetGSMinDesiredWidth) == 0x000004, "Wrong alignment on GSScaleText_SetGSMinDesiredWidth");
//static_assert(sizeof(GSScaleText_SetGSMinDesiredWidth) == 0x000004, "Wrong size on GSScaleText_SetGSMinDesiredWidth");
//static_assert(offsetof(GSScaleText_SetGSMinDesiredWidth, InGSMinDesiredWidth) == 0x000000, "Member 'GSScaleText_SetGSMinDesiredWidth::InGSMinDesiredWidth' has a wrong offset!");

// Function UnrealExtent.GSScaleText.SetGSWidthOverride
// 0x0004 (0x0004 - 0x0000)
struct GSScaleText_SetGSWidthOverride final
{
public:
	float                                         InGSWidthOverride;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScaleText_SetGSWidthOverride) == 0x000004, "Wrong alignment on GSScaleText_SetGSWidthOverride");
//static_assert(sizeof(GSScaleText_SetGSWidthOverride) == 0x000004, "Wrong size on GSScaleText_SetGSWidthOverride");
//static_assert(offsetof(GSScaleText_SetGSWidthOverride, InGSWidthOverride) == 0x000000, "Member 'GSScaleText_SetGSWidthOverride::InGSWidthOverride' has a wrong offset!");

// Function UnrealExtent.GSScaleText.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct GSScaleText_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScaleText_SetHorizontalAlignment) == 0x000001, "Wrong alignment on GSScaleText_SetHorizontalAlignment");
//static_assert(sizeof(GSScaleText_SetHorizontalAlignment) == 0x000001, "Wrong size on GSScaleText_SetHorizontalAlignment");
//static_assert(offsetof(GSScaleText_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'GSScaleText_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function UnrealExtent.GSScaleText.SetIgnoreInheritedScale
// 0x0001 (0x0001 - 0x0000)
struct GSScaleText_SetIgnoreInheritedScale final
{
public:
	bool                                          bInIgnoreInheritedScale;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScaleText_SetIgnoreInheritedScale) == 0x000001, "Wrong alignment on GSScaleText_SetIgnoreInheritedScale");
//static_assert(sizeof(GSScaleText_SetIgnoreInheritedScale) == 0x000001, "Wrong size on GSScaleText_SetIgnoreInheritedScale");
//static_assert(offsetof(GSScaleText_SetIgnoreInheritedScale, bInIgnoreInheritedScale) == 0x000000, "Member 'GSScaleText_SetIgnoreInheritedScale::bInIgnoreInheritedScale' has a wrong offset!");

// Function UnrealExtent.GSScaleText.SetStretch
// 0x0001 (0x0001 - 0x0000)
struct GSScaleText_SetStretch final
{
public:
	EStretch                                      InStretch;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScaleText_SetStretch) == 0x000001, "Wrong alignment on GSScaleText_SetStretch");
//static_assert(sizeof(GSScaleText_SetStretch) == 0x000001, "Wrong size on GSScaleText_SetStretch");
//static_assert(offsetof(GSScaleText_SetStretch, InStretch) == 0x000000, "Member 'GSScaleText_SetStretch::InStretch' has a wrong offset!");

// Function UnrealExtent.GSScaleText.SetStretchDirection
// 0x0001 (0x0001 - 0x0000)
struct GSScaleText_SetStretchDirection final
{
public:
	EStretchDirection                             InStretchDirection;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScaleText_SetStretchDirection) == 0x000001, "Wrong alignment on GSScaleText_SetStretchDirection");
//static_assert(sizeof(GSScaleText_SetStretchDirection) == 0x000001, "Wrong size on GSScaleText_SetStretchDirection");
//static_assert(offsetof(GSScaleText_SetStretchDirection, InStretchDirection) == 0x000000, "Member 'GSScaleText_SetStretchDirection::InStretchDirection' has a wrong offset!");

// Function UnrealExtent.GSScaleText.SetUserSpecifiedScale
// 0x0004 (0x0004 - 0x0000)
struct GSScaleText_SetUserSpecifiedScale final
{
public:
	float                                         InUserSpecifiedScale;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScaleText_SetUserSpecifiedScale) == 0x000004, "Wrong alignment on GSScaleText_SetUserSpecifiedScale");
//static_assert(sizeof(GSScaleText_SetUserSpecifiedScale) == 0x000004, "Wrong size on GSScaleText_SetUserSpecifiedScale");
//static_assert(offsetof(GSScaleText_SetUserSpecifiedScale, InUserSpecifiedScale) == 0x000000, "Member 'GSScaleText_SetUserSpecifiedScale::InUserSpecifiedScale' has a wrong offset!");

// Function UnrealExtent.GSScaleText.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct GSScaleText_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScaleText_SetVerticalAlignment) == 0x000001, "Wrong alignment on GSScaleText_SetVerticalAlignment");
//static_assert(sizeof(GSScaleText_SetVerticalAlignment) == 0x000001, "Wrong size on GSScaleText_SetVerticalAlignment");
//static_assert(offsetof(GSScaleText_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'GSScaleText_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.GetBottomSpacer
// 0x0004 (0x0004 - 0x0000)
struct GSScrollBox_GetBottomSpacer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_GetBottomSpacer) == 0x000004, "Wrong alignment on GSScrollBox_GetBottomSpacer");
//static_assert(sizeof(GSScrollBox_GetBottomSpacer) == 0x000004, "Wrong size on GSScrollBox_GetBottomSpacer");
//static_assert(offsetof(GSScrollBox_GetBottomSpacer, ReturnValue) == 0x000000, "Member 'GSScrollBox_GetBottomSpacer::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.GetTopSpacer
// 0x0004 (0x0004 - 0x0000)
struct GSScrollBox_GetTopSpacer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_GetTopSpacer) == 0x000004, "Wrong alignment on GSScrollBox_GetTopSpacer");
//static_assert(sizeof(GSScrollBox_GetTopSpacer) == 0x000004, "Wrong size on GSScrollBox_GetTopSpacer");
//static_assert(offsetof(GSScrollBox_GetTopSpacer, ReturnValue) == 0x000000, "Member 'GSScrollBox_GetTopSpacer::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.ScrollWidgetIntoView
// 0x0010 (0x0010 - 0x0000)
struct GSScrollBox_ScrollWidgetIntoView final
{
public:
	class UWidget*                                WidgetToFind;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AnimateScroll;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDescendantScrollDestination                  ScrollDestination;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Padding;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_ScrollWidgetIntoView) == 0x000008, "Wrong alignment on GSScrollBox_ScrollWidgetIntoView");
//static_assert(sizeof(GSScrollBox_ScrollWidgetIntoView) == 0x000010, "Wrong size on GSScrollBox_ScrollWidgetIntoView");
//static_assert(offsetof(GSScrollBox_ScrollWidgetIntoView, WidgetToFind) == 0x000000, "Member 'GSScrollBox_ScrollWidgetIntoView::WidgetToFind' has a wrong offset!");
//static_assert(offsetof(GSScrollBox_ScrollWidgetIntoView, AnimateScroll) == 0x000008, "Member 'GSScrollBox_ScrollWidgetIntoView::AnimateScroll' has a wrong offset!");
//static_assert(offsetof(GSScrollBox_ScrollWidgetIntoView, ScrollDestination) == 0x000009, "Member 'GSScrollBox_ScrollWidgetIntoView::ScrollDestination' has a wrong offset!");
//static_assert(offsetof(GSScrollBox_ScrollWidgetIntoView, Padding) == 0x00000C, "Member 'GSScrollBox_ScrollWidgetIntoView::Padding' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.SetAlwaysShowScrollbar
// 0x0001 (0x0001 - 0x0000)
struct GSScrollBox_SetAlwaysShowScrollbar final
{
public:
	bool                                          NewAlwaysShowScrollbar;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_SetAlwaysShowScrollbar) == 0x000001, "Wrong alignment on GSScrollBox_SetAlwaysShowScrollbar");
//static_assert(sizeof(GSScrollBox_SetAlwaysShowScrollbar) == 0x000001, "Wrong size on GSScrollBox_SetAlwaysShowScrollbar");
//static_assert(offsetof(GSScrollBox_SetAlwaysShowScrollbar, NewAlwaysShowScrollbar) == 0x000000, "Member 'GSScrollBox_SetAlwaysShowScrollbar::NewAlwaysShowScrollbar' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.SetBottomSpacer
// 0x0004 (0x0004 - 0x0000)
struct GSScrollBox_SetBottomSpacer final
{
public:
	float                                         InBottomSpacer;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_SetBottomSpacer) == 0x000004, "Wrong alignment on GSScrollBox_SetBottomSpacer");
//static_assert(sizeof(GSScrollBox_SetBottomSpacer) == 0x000004, "Wrong size on GSScrollBox_SetBottomSpacer");
//static_assert(offsetof(GSScrollBox_SetBottomSpacer, InBottomSpacer) == 0x000000, "Member 'GSScrollBox_SetBottomSpacer::InBottomSpacer' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.SetNavCanLoop
// 0x0001 (0x0001 - 0x0000)
struct GSScrollBox_SetNavCanLoop final
{
public:
	bool                                          InNavCanLoop;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_SetNavCanLoop) == 0x000001, "Wrong alignment on GSScrollBox_SetNavCanLoop");
//static_assert(sizeof(GSScrollBox_SetNavCanLoop) == 0x000001, "Wrong size on GSScrollBox_SetNavCanLoop");
//static_assert(offsetof(GSScrollBox_SetNavCanLoop, InNavCanLoop) == 0x000000, "Member 'GSScrollBox_SetNavCanLoop::InNavCanLoop' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.SetNavigationDestination
// 0x0001 (0x0001 - 0x0000)
struct GSScrollBox_SetNavigationDestination final
{
public:
	EDescendantScrollDestination                  NewNavigationDestination;                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_SetNavigationDestination) == 0x000001, "Wrong alignment on GSScrollBox_SetNavigationDestination");
//static_assert(sizeof(GSScrollBox_SetNavigationDestination) == 0x000001, "Wrong size on GSScrollBox_SetNavigationDestination");
//static_assert(offsetof(GSScrollBox_SetNavigationDestination, NewNavigationDestination) == 0x000000, "Member 'GSScrollBox_SetNavigationDestination::NewNavigationDestination' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.SetNavigationScrollPadding
// 0x0004 (0x0004 - 0x0000)
struct GSScrollBox_SetNavigationScrollPadding final
{
public:
	float                                         NewNavigationScrollPadding;                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_SetNavigationScrollPadding) == 0x000004, "Wrong alignment on GSScrollBox_SetNavigationScrollPadding");
//static_assert(sizeof(GSScrollBox_SetNavigationScrollPadding) == 0x000004, "Wrong size on GSScrollBox_SetNavigationScrollPadding");
//static_assert(offsetof(GSScrollBox_SetNavigationScrollPadding, NewNavigationScrollPadding) == 0x000000, "Member 'GSScrollBox_SetNavigationScrollPadding::NewNavigationScrollPadding' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.SetOrientation
// 0x0001 (0x0001 - 0x0000)
struct GSScrollBox_SetOrientation final
{
public:
	EOrientation                                  NewOrientation;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_SetOrientation) == 0x000001, "Wrong alignment on GSScrollBox_SetOrientation");
//static_assert(sizeof(GSScrollBox_SetOrientation) == 0x000001, "Wrong size on GSScrollBox_SetOrientation");
//static_assert(offsetof(GSScrollBox_SetOrientation, NewOrientation) == 0x000000, "Member 'GSScrollBox_SetOrientation::NewOrientation' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.SetScrollbarPadding
// 0x0010 (0x0010 - 0x0000)
struct GSScrollBox_SetScrollbarPadding final
{
public:
	struct FMargin                                NewScrollbarPadding;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_SetScrollbarPadding) == 0x000004, "Wrong alignment on GSScrollBox_SetScrollbarPadding");
//static_assert(sizeof(GSScrollBox_SetScrollbarPadding) == 0x000010, "Wrong size on GSScrollBox_SetScrollbarPadding");
//static_assert(offsetof(GSScrollBox_SetScrollbarPadding, NewScrollbarPadding) == 0x000000, "Member 'GSScrollBox_SetScrollbarPadding::NewScrollbarPadding' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.SetScrollbarThickness
// 0x0010 (0x0010 - 0x0000)
struct GSScrollBox_SetScrollbarThickness final
{
public:
	struct FVector2D                              NewScrollbarThickness;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_SetScrollbarThickness) == 0x000008, "Wrong alignment on GSScrollBox_SetScrollbarThickness");
//static_assert(sizeof(GSScrollBox_SetScrollbarThickness) == 0x000010, "Wrong size on GSScrollBox_SetScrollbarThickness");
//static_assert(offsetof(GSScrollBox_SetScrollbarThickness, NewScrollbarThickness) == 0x000000, "Member 'GSScrollBox_SetScrollbarThickness::NewScrollbarThickness' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.SetScrollbarVisibility
// 0x0001 (0x0001 - 0x0000)
struct GSScrollBox_SetScrollbarVisibility final
{
public:
	ESlateVisibility                              NewScrollBarVisibility;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_SetScrollbarVisibility) == 0x000001, "Wrong alignment on GSScrollBox_SetScrollbarVisibility");
//static_assert(sizeof(GSScrollBox_SetScrollbarVisibility) == 0x000001, "Wrong size on GSScrollBox_SetScrollbarVisibility");
//static_assert(offsetof(GSScrollBox_SetScrollbarVisibility, NewScrollBarVisibility) == 0x000000, "Member 'GSScrollBox_SetScrollbarVisibility::NewScrollBarVisibility' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.SetScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct GSScrollBox_SetScrollOffset final
{
public:
	float                                         InScrollOffset;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_SetScrollOffset) == 0x000004, "Wrong alignment on GSScrollBox_SetScrollOffset");
//static_assert(sizeof(GSScrollBox_SetScrollOffset) == 0x000004, "Wrong size on GSScrollBox_SetScrollOffset");
//static_assert(offsetof(GSScrollBox_SetScrollOffset, InScrollOffset) == 0x000000, "Member 'GSScrollBox_SetScrollOffset::InScrollOffset' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.SetScrollWhenFocusChanges
// 0x0001 (0x0001 - 0x0000)
struct GSScrollBox_SetScrollWhenFocusChanges final
{
public:
	EScrollWhenFocusChanges                       NewScrollWhenFocusChanges;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_SetScrollWhenFocusChanges) == 0x000001, "Wrong alignment on GSScrollBox_SetScrollWhenFocusChanges");
//static_assert(sizeof(GSScrollBox_SetScrollWhenFocusChanges) == 0x000001, "Wrong size on GSScrollBox_SetScrollWhenFocusChanges");
//static_assert(offsetof(GSScrollBox_SetScrollWhenFocusChanges, NewScrollWhenFocusChanges) == 0x000000, "Member 'GSScrollBox_SetScrollWhenFocusChanges::NewScrollWhenFocusChanges' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.SetTargetScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct GSScrollBox_SetTargetScrollOffset final
{
public:
	float                                         InTargetScrollOffset;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_SetTargetScrollOffset) == 0x000004, "Wrong alignment on GSScrollBox_SetTargetScrollOffset");
//static_assert(sizeof(GSScrollBox_SetTargetScrollOffset) == 0x000004, "Wrong size on GSScrollBox_SetTargetScrollOffset");
//static_assert(offsetof(GSScrollBox_SetTargetScrollOffset, InTargetScrollOffset) == 0x000000, "Member 'GSScrollBox_SetTargetScrollOffset::InTargetScrollOffset' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.SetTopSpacer
// 0x0004 (0x0004 - 0x0000)
struct GSScrollBox_SetTopSpacer final
{
public:
	float                                         InTopSpacer;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_SetTopSpacer) == 0x000004, "Wrong alignment on GSScrollBox_SetTopSpacer");
//static_assert(sizeof(GSScrollBox_SetTopSpacer) == 0x000004, "Wrong size on GSScrollBox_SetTopSpacer");
//static_assert(offsetof(GSScrollBox_SetTopSpacer, InTopSpacer) == 0x000000, "Member 'GSScrollBox_SetTopSpacer::InTopSpacer' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.GetScrollContent
// 0x0004 (0x0004 - 0x0000)
struct GSScrollBox_GetScrollContent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_GetScrollContent) == 0x000004, "Wrong alignment on GSScrollBox_GetScrollContent");
//static_assert(sizeof(GSScrollBox_GetScrollContent) == 0x000004, "Wrong size on GSScrollBox_GetScrollContent");
//static_assert(offsetof(GSScrollBox_GetScrollContent, ReturnValue) == 0x000000, "Member 'GSScrollBox_GetScrollContent::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.GetScrollContentWithOutSpacer
// 0x0004 (0x0004 - 0x0000)
struct GSScrollBox_GetScrollContentWithOutSpacer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_GetScrollContentWithOutSpacer) == 0x000004, "Wrong alignment on GSScrollBox_GetScrollContentWithOutSpacer");
//static_assert(sizeof(GSScrollBox_GetScrollContentWithOutSpacer) == 0x000004, "Wrong size on GSScrollBox_GetScrollContentWithOutSpacer");
//static_assert(offsetof(GSScrollBox_GetScrollContentWithOutSpacer, ReturnValue) == 0x000000, "Member 'GSScrollBox_GetScrollContentWithOutSpacer::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.GetScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct GSScrollBox_GetScrollOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_GetScrollOffset) == 0x000004, "Wrong alignment on GSScrollBox_GetScrollOffset");
//static_assert(sizeof(GSScrollBox_GetScrollOffset) == 0x000004, "Wrong size on GSScrollBox_GetScrollOffset");
//static_assert(offsetof(GSScrollBox_GetScrollOffset, ReturnValue) == 0x000000, "Member 'GSScrollBox_GetScrollOffset::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.GetScrollOffsetOfEnd
// 0x0004 (0x0004 - 0x0000)
struct GSScrollBox_GetScrollOffsetOfEnd final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_GetScrollOffsetOfEnd) == 0x000004, "Wrong alignment on GSScrollBox_GetScrollOffsetOfEnd");
//static_assert(sizeof(GSScrollBox_GetScrollOffsetOfEnd) == 0x000004, "Wrong size on GSScrollBox_GetScrollOffsetOfEnd");
//static_assert(offsetof(GSScrollBox_GetScrollOffsetOfEnd, ReturnValue) == 0x000000, "Member 'GSScrollBox_GetScrollOffsetOfEnd::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSScrollBox.GetViewOffsetFraction
// 0x0004 (0x0004 - 0x0000)
struct GSScrollBox_GetViewOffsetFraction final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBox_GetViewOffsetFraction) == 0x000004, "Wrong alignment on GSScrollBox_GetViewOffsetFraction");
//static_assert(sizeof(GSScrollBox_GetViewOffsetFraction) == 0x000004, "Wrong size on GSScrollBox_GetViewOffsetFraction");
//static_assert(offsetof(GSScrollBox_GetViewOffsetFraction, ReturnValue) == 0x000000, "Member 'GSScrollBox_GetViewOffsetFraction::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSScrollBoxSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct GSScrollBoxSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on GSScrollBoxSlot_SetHorizontalAlignment");
//static_assert(sizeof(GSScrollBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on GSScrollBoxSlot_SetHorizontalAlignment");
//static_assert(offsetof(GSScrollBoxSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'GSScrollBoxSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function UnrealExtent.GSScrollBoxSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct GSScrollBoxSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBoxSlot_SetPadding) == 0x000004, "Wrong alignment on GSScrollBoxSlot_SetPadding");
//static_assert(sizeof(GSScrollBoxSlot_SetPadding) == 0x000010, "Wrong size on GSScrollBoxSlot_SetPadding");
//static_assert(offsetof(GSScrollBoxSlot_SetPadding, InPadding) == 0x000000, "Member 'GSScrollBoxSlot_SetPadding::InPadding' has a wrong offset!");

// Function UnrealExtent.GSScrollBoxSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct GSScrollBoxSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSScrollBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on GSScrollBoxSlot_SetVerticalAlignment");
//static_assert(sizeof(GSScrollBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong size on GSScrollBoxSlot_SetVerticalAlignment");
//static_assert(offsetof(GSScrollBoxSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'GSScrollBoxSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function UnrealExtent.GSTileView.AddBottomScrollWidget
// 0x0008 (0x0008 - 0x0000)
struct GSTileView_AddBottomScrollWidget final
{
public:
	class UUserWidget*                            WidgetToAppend;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_AddBottomScrollWidget) == 0x000008, "Wrong alignment on GSTileView_AddBottomScrollWidget");
//static_assert(sizeof(GSTileView_AddBottomScrollWidget) == 0x000008, "Wrong size on GSTileView_AddBottomScrollWidget");
//static_assert(offsetof(GSTileView_AddBottomScrollWidget, WidgetToAppend) == 0x000000, "Member 'GSTileView_AddBottomScrollWidget::WidgetToAppend' has a wrong offset!");

// Function UnrealExtent.GSTileView.AddTopScrollWidget
// 0x0008 (0x0008 - 0x0000)
struct GSTileView_AddTopScrollWidget final
{
public:
	class UUserWidget*                            WidgetToAppend;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_AddTopScrollWidget) == 0x000008, "Wrong alignment on GSTileView_AddTopScrollWidget");
//static_assert(sizeof(GSTileView_AddTopScrollWidget) == 0x000008, "Wrong size on GSTileView_AddTopScrollWidget");
//static_assert(offsetof(GSTileView_AddTopScrollWidget, WidgetToAppend) == 0x000000, "Member 'GSTileView_AddTopScrollWidget::WidgetToAppend' has a wrong offset!");

// Function UnrealExtent.GSTileView.GetFirstLine
// 0x0004 (0x0004 - 0x0000)
struct GSTileView_GetFirstLine final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_GetFirstLine) == 0x000004, "Wrong alignment on GSTileView_GetFirstLine");
//static_assert(sizeof(GSTileView_GetFirstLine) == 0x000004, "Wrong size on GSTileView_GetFirstLine");
//static_assert(offsetof(GSTileView_GetFirstLine, ReturnValue) == 0x000000, "Member 'GSTileView_GetFirstLine::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSTileView.InsertBottomScrollWidget
// 0x0008 (0x0008 - 0x0000)
struct GSTileView_InsertBottomScrollWidget final
{
public:
	class UUserWidget*                            WidgetToInset;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_InsertBottomScrollWidget) == 0x000008, "Wrong alignment on GSTileView_InsertBottomScrollWidget");
//static_assert(sizeof(GSTileView_InsertBottomScrollWidget) == 0x000008, "Wrong size on GSTileView_InsertBottomScrollWidget");
//static_assert(offsetof(GSTileView_InsertBottomScrollWidget, WidgetToInset) == 0x000000, "Member 'GSTileView_InsertBottomScrollWidget::WidgetToInset' has a wrong offset!");

// Function UnrealExtent.GSTileView.InsertTopScrollWidget
// 0x0008 (0x0008 - 0x0000)
struct GSTileView_InsertTopScrollWidget final
{
public:
	class UUserWidget*                            WidgetToInset;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_InsertTopScrollWidget) == 0x000008, "Wrong alignment on GSTileView_InsertTopScrollWidget");
//static_assert(sizeof(GSTileView_InsertTopScrollWidget) == 0x000008, "Wrong size on GSTileView_InsertTopScrollWidget");
//static_assert(offsetof(GSTileView_InsertTopScrollWidget, WidgetToInset) == 0x000000, "Member 'GSTileView_InsertTopScrollWidget::WidgetToInset' has a wrong offset!");

// Function UnrealExtent.GSTileView.ItemScrolledIntoViewEvent
// 0x0010 (0x0010 - 0x0000)
struct GSTileView_ItemScrolledIntoViewEvent final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_ItemScrolledIntoViewEvent) == 0x000008, "Wrong alignment on GSTileView_ItemScrolledIntoViewEvent");
//static_assert(sizeof(GSTileView_ItemScrolledIntoViewEvent) == 0x000010, "Wrong size on GSTileView_ItemScrolledIntoViewEvent");
//static_assert(offsetof(GSTileView_ItemScrolledIntoViewEvent, Item) == 0x000000, "Member 'GSTileView_ItemScrolledIntoViewEvent::Item' has a wrong offset!");
//static_assert(offsetof(GSTileView_ItemScrolledIntoViewEvent, Widget) == 0x000008, "Member 'GSTileView_ItemScrolledIntoViewEvent::Widget' has a wrong offset!");

// Function UnrealExtent.GSTileView.OnEntryInitializedEvent
// 0x0010 (0x0010 - 0x0000)
struct GSTileView_OnEntryInitializedEvent final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_OnEntryInitializedEvent) == 0x000008, "Wrong alignment on GSTileView_OnEntryInitializedEvent");
//static_assert(sizeof(GSTileView_OnEntryInitializedEvent) == 0x000010, "Wrong size on GSTileView_OnEntryInitializedEvent");
//static_assert(offsetof(GSTileView_OnEntryInitializedEvent, Item) == 0x000000, "Member 'GSTileView_OnEntryInitializedEvent::Item' has a wrong offset!");
//static_assert(offsetof(GSTileView_OnEntryInitializedEvent, Widget) == 0x000008, "Member 'GSTileView_OnEntryInitializedEvent::Widget' has a wrong offset!");

// Function UnrealExtent.GSTileView.OnEntryWidgetGeneratedEvent
// 0x0008 (0x0008 - 0x0000)
struct GSTileView_OnEntryWidgetGeneratedEvent final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_OnEntryWidgetGeneratedEvent) == 0x000008, "Wrong alignment on GSTileView_OnEntryWidgetGeneratedEvent");
//static_assert(sizeof(GSTileView_OnEntryWidgetGeneratedEvent) == 0x000008, "Wrong size on GSTileView_OnEntryWidgetGeneratedEvent");
//static_assert(offsetof(GSTileView_OnEntryWidgetGeneratedEvent, Widget) == 0x000000, "Member 'GSTileView_OnEntryWidgetGeneratedEvent::Widget' has a wrong offset!");

// Function UnrealExtent.GSTileView.OnEntryWidgetReleasedEvent
// 0x0008 (0x0008 - 0x0000)
struct GSTileView_OnEntryWidgetReleasedEvent final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_OnEntryWidgetReleasedEvent) == 0x000008, "Wrong alignment on GSTileView_OnEntryWidgetReleasedEvent");
//static_assert(sizeof(GSTileView_OnEntryWidgetReleasedEvent) == 0x000008, "Wrong size on GSTileView_OnEntryWidgetReleasedEvent");
//static_assert(offsetof(GSTileView_OnEntryWidgetReleasedEvent, Widget) == 0x000000, "Member 'GSTileView_OnEntryWidgetReleasedEvent::Widget' has a wrong offset!");

// Function UnrealExtent.GSTileView.OnViewWidgetSizeChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct GSTileView_OnViewWidgetSizeChangedEvent final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_OnViewWidgetSizeChangedEvent) == 0x000008, "Wrong alignment on GSTileView_OnViewWidgetSizeChangedEvent");
//static_assert(sizeof(GSTileView_OnViewWidgetSizeChangedEvent) == 0x000010, "Wrong size on GSTileView_OnViewWidgetSizeChangedEvent");
//static_assert(offsetof(GSTileView_OnViewWidgetSizeChangedEvent, Size) == 0x000000, "Member 'GSTileView_OnViewWidgetSizeChangedEvent::Size' has a wrong offset!");

// Function UnrealExtent.GSTileView.SetBottomItemPosList
// 0x0010 (0x0010 - 0x0000)
struct GSTileView_SetBottomItemPosList final
{
public:
	TArray<float>                                 InChildsPosList;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_SetBottomItemPosList) == 0x000008, "Wrong alignment on GSTileView_SetBottomItemPosList");
//static_assert(sizeof(GSTileView_SetBottomItemPosList) == 0x000010, "Wrong size on GSTileView_SetBottomItemPosList");
//static_assert(offsetof(GSTileView_SetBottomItemPosList, InChildsPosList) == 0x000000, "Member 'GSTileView_SetBottomItemPosList::InChildsPosList' has a wrong offset!");

// Function UnrealExtent.GSTileView.SetBottomSpacerSize
// 0x0004 (0x0004 - 0x0000)
struct GSTileView_SetBottomSpacerSize final
{
public:
	float                                         InBottomSpacerSize;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_SetBottomSpacerSize) == 0x000004, "Wrong alignment on GSTileView_SetBottomSpacerSize");
//static_assert(sizeof(GSTileView_SetBottomSpacerSize) == 0x000004, "Wrong size on GSTileView_SetBottomSpacerSize");
//static_assert(offsetof(GSTileView_SetBottomSpacerSize, InBottomSpacerSize) == 0x000000, "Member 'GSTileView_SetBottomSpacerSize::InBottomSpacerSize' has a wrong offset!");

// Function UnrealExtent.GSTileView.SetEntryHeight
// 0x0004 (0x0004 - 0x0000)
struct GSTileView_SetEntryHeight final
{
public:
	float                                         NewHeight;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_SetEntryHeight) == 0x000004, "Wrong alignment on GSTileView_SetEntryHeight");
//static_assert(sizeof(GSTileView_SetEntryHeight) == 0x000004, "Wrong size on GSTileView_SetEntryHeight");
//static_assert(offsetof(GSTileView_SetEntryHeight, NewHeight) == 0x000000, "Member 'GSTileView_SetEntryHeight::NewHeight' has a wrong offset!");

// Function UnrealExtent.GSTileView.SetEntryWidth
// 0x0004 (0x0004 - 0x0000)
struct GSTileView_SetEntryWidth final
{
public:
	float                                         NewWidth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_SetEntryWidth) == 0x000004, "Wrong alignment on GSTileView_SetEntryWidth");
//static_assert(sizeof(GSTileView_SetEntryWidth) == 0x000004, "Wrong size on GSTileView_SetEntryWidth");
//static_assert(offsetof(GSTileView_SetEntryWidth, NewWidth) == 0x000000, "Member 'GSTileView_SetEntryWidth::NewWidth' has a wrong offset!");

// Function UnrealExtent.GSTileView.SetForceNeedBottomSpacer
// 0x0001 (0x0001 - 0x0000)
struct GSTileView_SetForceNeedBottomSpacer final
{
public:
	bool                                          InForceNeedBottomSpacer;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_SetForceNeedBottomSpacer) == 0x000001, "Wrong alignment on GSTileView_SetForceNeedBottomSpacer");
//static_assert(sizeof(GSTileView_SetForceNeedBottomSpacer) == 0x000001, "Wrong size on GSTileView_SetForceNeedBottomSpacer");
//static_assert(offsetof(GSTileView_SetForceNeedBottomSpacer, InForceNeedBottomSpacer) == 0x000000, "Member 'GSTileView_SetForceNeedBottomSpacer::InForceNeedBottomSpacer' has a wrong offset!");

// Function UnrealExtent.GSTileView.SetForceNeedTopSpacer
// 0x0001 (0x0001 - 0x0000)
struct GSTileView_SetForceNeedTopSpacer final
{
public:
	bool                                          InForceNeedTopSpacer;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_SetForceNeedTopSpacer) == 0x000001, "Wrong alignment on GSTileView_SetForceNeedTopSpacer");
//static_assert(sizeof(GSTileView_SetForceNeedTopSpacer) == 0x000001, "Wrong size on GSTileView_SetForceNeedTopSpacer");
//static_assert(offsetof(GSTileView_SetForceNeedTopSpacer, InForceNeedTopSpacer) == 0x000000, "Member 'GSTileView_SetForceNeedTopSpacer::InForceNeedTopSpacer' has a wrong offset!");

// Function UnrealExtent.GSTileView.SetItemWidget
// 0x0008 (0x0008 - 0x0000)
struct GSTileView_SetItemWidget final
{
public:
	TSubclassOf<class UUserWidget>                InItemWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_SetItemWidget) == 0x000008, "Wrong alignment on GSTileView_SetItemWidget");
//static_assert(sizeof(GSTileView_SetItemWidget) == 0x000008, "Wrong size on GSTileView_SetItemWidget");
//static_assert(offsetof(GSTileView_SetItemWidget, InItemWidget) == 0x000000, "Member 'GSTileView_SetItemWidget::InItemWidget' has a wrong offset!");

// Function UnrealExtent.GSTileView.SetOrientation
// 0x0001 (0x0001 - 0x0000)
struct GSTileView_SetOrientation final
{
public:
	EOrientation                                  InOrientation;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_SetOrientation) == 0x000001, "Wrong alignment on GSTileView_SetOrientation");
//static_assert(sizeof(GSTileView_SetOrientation) == 0x000001, "Wrong size on GSTileView_SetOrientation");
//static_assert(offsetof(GSTileView_SetOrientation, InOrientation) == 0x000000, "Member 'GSTileView_SetOrientation::InOrientation' has a wrong offset!");

// Function UnrealExtent.GSTileView.SetShowScrollBar
// 0x0001 (0x0001 - 0x0000)
struct GSTileView_SetShowScrollBar final
{
public:
	bool                                          InShowScrollBar;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_SetShowScrollBar) == 0x000001, "Wrong alignment on GSTileView_SetShowScrollBar");
//static_assert(sizeof(GSTileView_SetShowScrollBar) == 0x000001, "Wrong size on GSTileView_SetShowScrollBar");
//static_assert(offsetof(GSTileView_SetShowScrollBar, InShowScrollBar) == 0x000000, "Member 'GSTileView_SetShowScrollBar::InShowScrollBar' has a wrong offset!");

// Function UnrealExtent.GSTileView.SetTileAlignment
// 0x0001 (0x0001 - 0x0000)
struct GSTileView_SetTileAlignment final
{
public:
	EListItemAlignment                            InTileAlignment;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_SetTileAlignment) == 0x000001, "Wrong alignment on GSTileView_SetTileAlignment");
//static_assert(sizeof(GSTileView_SetTileAlignment) == 0x000001, "Wrong size on GSTileView_SetTileAlignment");
//static_assert(offsetof(GSTileView_SetTileAlignment, InTileAlignment) == 0x000000, "Member 'GSTileView_SetTileAlignment::InTileAlignment' has a wrong offset!");

// Function UnrealExtent.GSTileView.SetTopItemPosList
// 0x0010 (0x0010 - 0x0000)
struct GSTileView_SetTopItemPosList final
{
public:
	TArray<float>                                 InChildsPosList;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_SetTopItemPosList) == 0x000008, "Wrong alignment on GSTileView_SetTopItemPosList");
//static_assert(sizeof(GSTileView_SetTopItemPosList) == 0x000010, "Wrong size on GSTileView_SetTopItemPosList");
//static_assert(offsetof(GSTileView_SetTopItemPosList, InChildsPosList) == 0x000000, "Member 'GSTileView_SetTopItemPosList::InChildsPosList' has a wrong offset!");

// Function UnrealExtent.GSTileView.SetTopSpacerSize
// 0x0004 (0x0004 - 0x0000)
struct GSTileView_SetTopSpacerSize final
{
public:
	float                                         InTopSpacerSize;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_SetTopSpacerSize) == 0x000004, "Wrong alignment on GSTileView_SetTopSpacerSize");
//static_assert(sizeof(GSTileView_SetTopSpacerSize) == 0x000004, "Wrong size on GSTileView_SetTopSpacerSize");
//static_assert(offsetof(GSTileView_SetTopSpacerSize, InTopSpacerSize) == 0x000000, "Member 'GSTileView_SetTopSpacerSize::InTopSpacerSize' has a wrong offset!");

// Function UnrealExtent.GSTileView.GetBottomSpacerSize
// 0x0004 (0x0004 - 0x0000)
struct GSTileView_GetBottomSpacerSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_GetBottomSpacerSize) == 0x000004, "Wrong alignment on GSTileView_GetBottomSpacerSize");
//static_assert(sizeof(GSTileView_GetBottomSpacerSize) == 0x000004, "Wrong size on GSTileView_GetBottomSpacerSize");
//static_assert(offsetof(GSTileView_GetBottomSpacerSize, ReturnValue) == 0x000000, "Member 'GSTileView_GetBottomSpacerSize::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSTileView.GetEntryHeight
// 0x0004 (0x0004 - 0x0000)
struct GSTileView_GetEntryHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_GetEntryHeight) == 0x000004, "Wrong alignment on GSTileView_GetEntryHeight");
//static_assert(sizeof(GSTileView_GetEntryHeight) == 0x000004, "Wrong size on GSTileView_GetEntryHeight");
//static_assert(offsetof(GSTileView_GetEntryHeight, ReturnValue) == 0x000000, "Member 'GSTileView_GetEntryHeight::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSTileView.GetEntryWidth
// 0x0004 (0x0004 - 0x0000)
struct GSTileView_GetEntryWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_GetEntryWidth) == 0x000004, "Wrong alignment on GSTileView_GetEntryWidth");
//static_assert(sizeof(GSTileView_GetEntryWidth) == 0x000004, "Wrong size on GSTileView_GetEntryWidth");
//static_assert(offsetof(GSTileView_GetEntryWidth, ReturnValue) == 0x000000, "Member 'GSTileView_GetEntryWidth::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSTileView.GetTopSpacerSize
// 0x0004 (0x0004 - 0x0000)
struct GSTileView_GetTopSpacerSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSTileView_GetTopSpacerSize) == 0x000004, "Wrong alignment on GSTileView_GetTopSpacerSize");
//static_assert(sizeof(GSTileView_GetTopSpacerSize) == 0x000004, "Wrong size on GSTileView_GetTopSpacerSize");
//static_assert(offsetof(GSTileView_GetTopSpacerSize, ReturnValue) == 0x000000, "Member 'GSTileView_GetTopSpacerSize::ReturnValue' has a wrong offset!");

// Function UnrealExtent.GSUINavigationDel.GSOnNavigationChangedFocus
// 0x0018 (0x0018 - 0x0000)
struct GSUINavigationDel_GSOnNavigationChangedFocus final
{
public:
	class UWidget*                                OldWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                NewWidget;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFocusEvent                            FocusEvent;                                        // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSUINavigationDel_GSOnNavigationChangedFocus) == 0x000008, "Wrong alignment on GSUINavigationDel_GSOnNavigationChangedFocus");
//static_assert(sizeof(GSUINavigationDel_GSOnNavigationChangedFocus) == 0x000018, "Wrong size on GSUINavigationDel_GSOnNavigationChangedFocus");
//static_assert(offsetof(GSUINavigationDel_GSOnNavigationChangedFocus, OldWidget) == 0x000000, "Member 'GSUINavigationDel_GSOnNavigationChangedFocus::OldWidget' has a wrong offset!");
//static_assert(offsetof(GSUINavigationDel_GSOnNavigationChangedFocus, NewWidget) == 0x000008, "Member 'GSUINavigationDel_GSOnNavigationChangedFocus::NewWidget' has a wrong offset!");
//static_assert(offsetof(GSUINavigationDel_GSOnNavigationChangedFocus, FocusEvent) == 0x000010, "Member 'GSUINavigationDel_GSOnNavigationChangedFocus::FocusEvent' has a wrong offset!");

// Function UnrealExtent.GSWidgetRender.GetUserWidgetObject
// 0x0008 (0x0008 - 0x0000)
struct GSWidgetRender_GetUserWidgetObject final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(GSWidgetRender_GetUserWidgetObject) == 0x000008, "Wrong alignment on GSWidgetRender_GetUserWidgetObject");
//static_assert(sizeof(GSWidgetRender_GetUserWidgetObject) == 0x000008, "Wrong size on GSWidgetRender_GetUserWidgetObject");
//static_assert(offsetof(GSWidgetRender_GetUserWidgetObject, ReturnValue) == 0x000000, "Member 'GSWidgetRender_GetUserWidgetObject::ReturnValue' has a wrong offset!");

// Function UnrealExtent.HitPhysicalAnimComp.BeHit
// 0x0030 (0x0030 - 0x0000)
struct HitPhysicalAnimComp_BeHit final
{
public:
	TArray<class FName>                           BoneList;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                InForceVector;                                     // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InForceStrength;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(HitPhysicalAnimComp_BeHit) == 0x000008, "Wrong alignment on HitPhysicalAnimComp_BeHit");
//static_assert(sizeof(HitPhysicalAnimComp_BeHit) == 0x000030, "Wrong size on HitPhysicalAnimComp_BeHit");
//static_assert(offsetof(HitPhysicalAnimComp_BeHit, BoneList) == 0x000000, "Member 'HitPhysicalAnimComp_BeHit::BoneList' has a wrong offset!");
//static_assert(offsetof(HitPhysicalAnimComp_BeHit, InForceVector) == 0x000010, "Member 'HitPhysicalAnimComp_BeHit::InForceVector' has a wrong offset!");
//static_assert(offsetof(HitPhysicalAnimComp_BeHit, InForceStrength) == 0x000028, "Member 'HitPhysicalAnimComp_BeHit::InForceStrength' has a wrong offset!");
//static_assert(offsetof(HitPhysicalAnimComp_BeHit, ReturnValue) == 0x00002C, "Member 'HitPhysicalAnimComp_BeHit::ReturnValue' has a wrong offset!");

// Function UnrealExtent.HitPhysicalAnimComp.BonesSphereMask
// 0x0048 (0x0048 - 0x0000)
struct HitPhysicalAnimComp_BonesSphereMask final
{
public:
	class USkeletalMeshComponent*                 TargetSkeletalMesh;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldPosition;                                     // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           WhiteNamesList;                                    // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(HitPhysicalAnimComp_BonesSphereMask) == 0x000008, "Wrong alignment on HitPhysicalAnimComp_BonesSphereMask");
//static_assert(sizeof(HitPhysicalAnimComp_BonesSphereMask) == 0x000048, "Wrong size on HitPhysicalAnimComp_BonesSphereMask");
//static_assert(offsetof(HitPhysicalAnimComp_BonesSphereMask, TargetSkeletalMesh) == 0x000000, "Member 'HitPhysicalAnimComp_BonesSphereMask::TargetSkeletalMesh' has a wrong offset!");
//static_assert(offsetof(HitPhysicalAnimComp_BonesSphereMask, Radius) == 0x000008, "Member 'HitPhysicalAnimComp_BonesSphereMask::Radius' has a wrong offset!");
//static_assert(offsetof(HitPhysicalAnimComp_BonesSphereMask, WorldPosition) == 0x000010, "Member 'HitPhysicalAnimComp_BonesSphereMask::WorldPosition' has a wrong offset!");
//static_assert(offsetof(HitPhysicalAnimComp_BonesSphereMask, WhiteNamesList) == 0x000028, "Member 'HitPhysicalAnimComp_BonesSphereMask::WhiteNamesList' has a wrong offset!");
//static_assert(offsetof(HitPhysicalAnimComp_BonesSphereMask, ReturnValue) == 0x000038, "Member 'HitPhysicalAnimComp_BonesSphereMask::ReturnValue' has a wrong offset!");

// Function UnrealExtent.HitPhysicalAnimComp.CreateTimer
// 0x0008 (0x0008 - 0x0000)
struct HitPhysicalAnimComp_CreateTimer final
{
public:
	float                                         TimeDelay;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(HitPhysicalAnimComp_CreateTimer) == 0x000004, "Wrong alignment on HitPhysicalAnimComp_CreateTimer");
//static_assert(sizeof(HitPhysicalAnimComp_CreateTimer) == 0x000008, "Wrong size on HitPhysicalAnimComp_CreateTimer");
//static_assert(offsetof(HitPhysicalAnimComp_CreateTimer, TimeDelay) == 0x000000, "Member 'HitPhysicalAnimComp_CreateTimer::TimeDelay' has a wrong offset!");
//static_assert(offsetof(HitPhysicalAnimComp_CreateTimer, ReturnValue) == 0x000004, "Member 'HitPhysicalAnimComp_CreateTimer::ReturnValue' has a wrong offset!");

// Function UnrealExtent.HitPhysicalAnimComp.SetBodyBonePhysic
// 0x0018 (0x0018 - 0x0000)
struct HitPhysicalAnimComp_SetBodyBonePhysic final
{
public:
	class USkeletalMeshComponent*                 TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewBool;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(HitPhysicalAnimComp_SetBodyBonePhysic) == 0x000008, "Wrong alignment on HitPhysicalAnimComp_SetBodyBonePhysic");
//static_assert(sizeof(HitPhysicalAnimComp_SetBodyBonePhysic) == 0x000018, "Wrong size on HitPhysicalAnimComp_SetBodyBonePhysic");
//static_assert(offsetof(HitPhysicalAnimComp_SetBodyBonePhysic, TargetMesh) == 0x000000, "Member 'HitPhysicalAnimComp_SetBodyBonePhysic::TargetMesh' has a wrong offset!");
//static_assert(offsetof(HitPhysicalAnimComp_SetBodyBonePhysic, BoneName) == 0x000008, "Member 'HitPhysicalAnimComp_SetBodyBonePhysic::BoneName' has a wrong offset!");
//static_assert(offsetof(HitPhysicalAnimComp_SetBodyBonePhysic, NewBool) == 0x000010, "Member 'HitPhysicalAnimComp_SetBodyBonePhysic::NewBool' has a wrong offset!");

// Function UnrealExtent.HitPhysicalAnimComp.SetBonesKinematic
// 0x0010 (0x0010 - 0x0000)
struct HitPhysicalAnimComp_SetBonesKinematic final
{
public:
	TArray<class FName>                           BoneNames;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(HitPhysicalAnimComp_SetBonesKinematic) == 0x000008, "Wrong alignment on HitPhysicalAnimComp_SetBonesKinematic");
//static_assert(sizeof(HitPhysicalAnimComp_SetBonesKinematic) == 0x000010, "Wrong size on HitPhysicalAnimComp_SetBonesKinematic");
//static_assert(offsetof(HitPhysicalAnimComp_SetBonesKinematic, BoneNames) == 0x000000, "Member 'HitPhysicalAnimComp_SetBonesKinematic::BoneNames' has a wrong offset!");

// Function UnrealExtent.HitPhysicalAnimComp.SetBonesPhysic
// 0x0010 (0x0010 - 0x0000)
struct HitPhysicalAnimComp_SetBonesPhysic final
{
public:
	TArray<class FName>                           BoneNames;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(HitPhysicalAnimComp_SetBonesPhysic) == 0x000008, "Wrong alignment on HitPhysicalAnimComp_SetBonesPhysic");
//static_assert(sizeof(HitPhysicalAnimComp_SetBonesPhysic) == 0x000010, "Wrong size on HitPhysicalAnimComp_SetBonesPhysic");
//static_assert(offsetof(HitPhysicalAnimComp_SetBonesPhysic, BoneNames) == 0x000000, "Member 'HitPhysicalAnimComp_SetBonesPhysic::BoneNames' has a wrong offset!");

// Function UnrealExtent.HitPhysicalAnimComp.SetBonesPhysicWeight
// 0x0010 (0x0010 - 0x0000)
struct HitPhysicalAnimComp_SetBonesPhysicWeight final
{
public:
	TArray<class FName>                           BoneNames;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(HitPhysicalAnimComp_SetBonesPhysicWeight) == 0x000008, "Wrong alignment on HitPhysicalAnimComp_SetBonesPhysicWeight");
//static_assert(sizeof(HitPhysicalAnimComp_SetBonesPhysicWeight) == 0x000010, "Wrong size on HitPhysicalAnimComp_SetBonesPhysicWeight");
//static_assert(offsetof(HitPhysicalAnimComp_SetBonesPhysicWeight, BoneNames) == 0x000000, "Member 'HitPhysicalAnimComp_SetBonesPhysicWeight::BoneNames' has a wrong offset!");

// Function UnrealExtent.LandscapeReader.Cache
// 0x0008 (0x0008 - 0x0000)
struct LandscapeReader_Cache final
{
public:
	class ALandscapeProxy*                        NewLandscapeProxy;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(LandscapeReader_Cache) == 0x000008, "Wrong alignment on LandscapeReader_Cache");
//static_assert(sizeof(LandscapeReader_Cache) == 0x000008, "Wrong size on LandscapeReader_Cache");
//static_assert(offsetof(LandscapeReader_Cache, NewLandscapeProxy) == 0x000000, "Member 'LandscapeReader_Cache::NewLandscapeProxy' has a wrong offset!");

// Function UnrealExtent.LandscapeReader.GetHeightData
// 0x0008 (0x0008 - 0x0000)
struct LandscapeReader_GetHeightData final
{
public:
	struct FIntPtr                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(LandscapeReader_GetHeightData) == 0x000004, "Wrong alignment on LandscapeReader_GetHeightData");
//static_assert(sizeof(LandscapeReader_GetHeightData) == 0x000008, "Wrong size on LandscapeReader_GetHeightData");
//static_assert(offsetof(LandscapeReader_GetHeightData, ReturnValue) == 0x000000, "Member 'LandscapeReader_GetHeightData::ReturnValue' has a wrong offset!");

// Function UnrealExtent.LandscapeReader.GetHeightDataInRect
// 0x0018 (0x0018 - 0x0000)
struct LandscapeReader_GetHeightDataInRect final
{
public:
	int32                                         MinX;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinY;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxX;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxY;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPtr                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(LandscapeReader_GetHeightDataInRect) == 0x000004, "Wrong alignment on LandscapeReader_GetHeightDataInRect");
//static_assert(sizeof(LandscapeReader_GetHeightDataInRect) == 0x000018, "Wrong size on LandscapeReader_GetHeightDataInRect");
//static_assert(offsetof(LandscapeReader_GetHeightDataInRect, MinX) == 0x000000, "Member 'LandscapeReader_GetHeightDataInRect::MinX' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_GetHeightDataInRect, MinY) == 0x000004, "Member 'LandscapeReader_GetHeightDataInRect::MinY' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_GetHeightDataInRect, MaxX) == 0x000008, "Member 'LandscapeReader_GetHeightDataInRect::MaxX' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_GetHeightDataInRect, MaxY) == 0x00000C, "Member 'LandscapeReader_GetHeightDataInRect::MaxY' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_GetHeightDataInRect, ReturnValue) == 0x000010, "Member 'LandscapeReader_GetHeightDataInRect::ReturnValue' has a wrong offset!");

// Function UnrealExtent.LandscapeReader.GetWeightData
// 0x000C (0x000C - 0x0000)
struct LandscapeReader_GetWeightData final
{
public:
	int32                                         LayerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPtr                                ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(LandscapeReader_GetWeightData) == 0x000004, "Wrong alignment on LandscapeReader_GetWeightData");
//static_assert(sizeof(LandscapeReader_GetWeightData) == 0x00000C, "Wrong size on LandscapeReader_GetWeightData");
//static_assert(offsetof(LandscapeReader_GetWeightData, LayerIndex) == 0x000000, "Member 'LandscapeReader_GetWeightData::LayerIndex' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_GetWeightData, ReturnValue) == 0x000004, "Member 'LandscapeReader_GetWeightData::ReturnValue' has a wrong offset!");

// Function UnrealExtent.LandscapeReader.GetWeightDataInRect
// 0x001C (0x001C - 0x0000)
struct LandscapeReader_GetWeightDataInRect final
{
public:
	int32                                         MinX;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinY;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxX;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxY;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPtr                                ReturnValue;                                       // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//static_assert(alignof(LandscapeReader_GetWeightDataInRect) == 0x000004, "Wrong alignment on LandscapeReader_GetWeightDataInRect");
//static_assert(sizeof(LandscapeReader_GetWeightDataInRect) == 0x00001C, "Wrong size on LandscapeReader_GetWeightDataInRect");
//static_assert(offsetof(LandscapeReader_GetWeightDataInRect, MinX) == 0x000000, "Member 'LandscapeReader_GetWeightDataInRect::MinX' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_GetWeightDataInRect, MinY) == 0x000004, "Member 'LandscapeReader_GetWeightDataInRect::MinY' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_GetWeightDataInRect, MaxX) == 0x000008, "Member 'LandscapeReader_GetWeightDataInRect::MaxX' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_GetWeightDataInRect, MaxY) == 0x00000C, "Member 'LandscapeReader_GetWeightDataInRect::MaxY' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_GetWeightDataInRect, LayerIndex) == 0x000010, "Member 'LandscapeReader_GetWeightDataInRect::LayerIndex' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_GetWeightDataInRect, ReturnValue) == 0x000014, "Member 'LandscapeReader_GetWeightDataInRect::ReturnValue' has a wrong offset!");

// Function UnrealExtent.LandscapeReader.HeightDataElementNum
// 0x0004 (0x0004 - 0x0000)
struct LandscapeReader_HeightDataElementNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(LandscapeReader_HeightDataElementNum) == 0x000004, "Wrong alignment on LandscapeReader_HeightDataElementNum");
//static_assert(sizeof(LandscapeReader_HeightDataElementNum) == 0x000004, "Wrong size on LandscapeReader_HeightDataElementNum");
//static_assert(offsetof(LandscapeReader_HeightDataElementNum, ReturnValue) == 0x000000, "Member 'LandscapeReader_HeightDataElementNum::ReturnValue' has a wrong offset!");

// Function UnrealExtent.LandscapeReader.HeightDataElementSize
// 0x0004 (0x0004 - 0x0000)
struct LandscapeReader_HeightDataElementSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(LandscapeReader_HeightDataElementSize) == 0x000004, "Wrong alignment on LandscapeReader_HeightDataElementSize");
//static_assert(sizeof(LandscapeReader_HeightDataElementSize) == 0x000004, "Wrong size on LandscapeReader_HeightDataElementSize");
//static_assert(offsetof(LandscapeReader_HeightDataElementSize, ReturnValue) == 0x000000, "Member 'LandscapeReader_HeightDataElementSize::ReturnValue' has a wrong offset!");

// Function UnrealExtent.LandscapeReader.SampleHeightData
// 0x0020 (0x0020 - 0x0000)
struct LandscapeReader_SampleHeightData final
{
public:
	struct FVector                                WorldPos;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESampleType                                   SampleType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(LandscapeReader_SampleHeightData) == 0x000008, "Wrong alignment on LandscapeReader_SampleHeightData");
//static_assert(sizeof(LandscapeReader_SampleHeightData) == 0x000020, "Wrong size on LandscapeReader_SampleHeightData");
//static_assert(offsetof(LandscapeReader_SampleHeightData, WorldPos) == 0x000000, "Member 'LandscapeReader_SampleHeightData::WorldPos' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_SampleHeightData, SampleType) == 0x000018, "Member 'LandscapeReader_SampleHeightData::SampleType' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_SampleHeightData, ReturnValue) == 0x00001C, "Member 'LandscapeReader_SampleHeightData::ReturnValue' has a wrong offset!");

// Function UnrealExtent.LandscapeReader.SampleWeightData
// 0x0028 (0x0028 - 0x0000)
struct LandscapeReader_SampleWeightData final
{
public:
	struct FVector                                WorldPos;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerIndex;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESampleType                                   SampleType;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(LandscapeReader_SampleWeightData) == 0x000008, "Wrong alignment on LandscapeReader_SampleWeightData");
//static_assert(sizeof(LandscapeReader_SampleWeightData) == 0x000028, "Wrong size on LandscapeReader_SampleWeightData");
//static_assert(offsetof(LandscapeReader_SampleWeightData, WorldPos) == 0x000000, "Member 'LandscapeReader_SampleWeightData::WorldPos' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_SampleWeightData, LayerIndex) == 0x000018, "Member 'LandscapeReader_SampleWeightData::LayerIndex' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_SampleWeightData, SampleType) == 0x00001C, "Member 'LandscapeReader_SampleWeightData::SampleType' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_SampleWeightData, ReturnValue) == 0x000020, "Member 'LandscapeReader_SampleWeightData::ReturnValue' has a wrong offset!");

// Function UnrealExtent.LandscapeReader.WeightDataElementNum
// 0x0008 (0x0008 - 0x0000)
struct LandscapeReader_WeightDataElementNum final
{
public:
	int32                                         LayerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(LandscapeReader_WeightDataElementNum) == 0x000004, "Wrong alignment on LandscapeReader_WeightDataElementNum");
//static_assert(sizeof(LandscapeReader_WeightDataElementNum) == 0x000008, "Wrong size on LandscapeReader_WeightDataElementNum");
//static_assert(offsetof(LandscapeReader_WeightDataElementNum, LayerIndex) == 0x000000, "Member 'LandscapeReader_WeightDataElementNum::LayerIndex' has a wrong offset!");
//static_assert(offsetof(LandscapeReader_WeightDataElementNum, ReturnValue) == 0x000004, "Member 'LandscapeReader_WeightDataElementNum::ReturnValue' has a wrong offset!");

// Function UnrealExtent.LandscapeReader.WeightDataElementSize
// 0x0004 (0x0004 - 0x0000)
struct LandscapeReader_WeightDataElementSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(LandscapeReader_WeightDataElementSize) == 0x000004, "Wrong alignment on LandscapeReader_WeightDataElementSize");
//static_assert(sizeof(LandscapeReader_WeightDataElementSize) == 0x000004, "Wrong size on LandscapeReader_WeightDataElementSize");
//static_assert(offsetof(LandscapeReader_WeightDataElementSize, ReturnValue) == 0x000000, "Member 'LandscapeReader_WeightDataElementSize::ReturnValue' has a wrong offset!");

// Function UnrealExtent.LayerSceneInfo.QueryWeightInfo
// 0x0028 (0x0028 - 0x0000)
struct LayerSceneInfo_QueryWeightInfo final
{
public:
	struct FVector                                WorldPos;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerIndex;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Nearest;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(LayerSceneInfo_QueryWeightInfo) == 0x000008, "Wrong alignment on LayerSceneInfo_QueryWeightInfo");
//static_assert(sizeof(LayerSceneInfo_QueryWeightInfo) == 0x000028, "Wrong size on LayerSceneInfo_QueryWeightInfo");
//static_assert(offsetof(LayerSceneInfo_QueryWeightInfo, WorldPos) == 0x000000, "Member 'LayerSceneInfo_QueryWeightInfo::WorldPos' has a wrong offset!");
//static_assert(offsetof(LayerSceneInfo_QueryWeightInfo, LayerIndex) == 0x000018, "Member 'LayerSceneInfo_QueryWeightInfo::LayerIndex' has a wrong offset!");
//static_assert(offsetof(LayerSceneInfo_QueryWeightInfo, Nearest) == 0x00001C, "Member 'LayerSceneInfo_QueryWeightInfo::Nearest' has a wrong offset!");
//static_assert(offsetof(LayerSceneInfo_QueryWeightInfo, Value) == 0x000020, "Member 'LayerSceneInfo_QueryWeightInfo::Value' has a wrong offset!");
//static_assert(offsetof(LayerSceneInfo_QueryWeightInfo, ReturnValue) == 0x000024, "Member 'LayerSceneInfo_QueryWeightInfo::ReturnValue' has a wrong offset!");

// Function UnrealExtent.StatInfoBaseWidget.GetGPUBrand
// 0x0010 (0x0010 - 0x0000)
struct StatInfoBaseWidget_GetGPUBrand final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(StatInfoBaseWidget_GetGPUBrand) == 0x000008, "Wrong alignment on StatInfoBaseWidget_GetGPUBrand");
//static_assert(sizeof(StatInfoBaseWidget_GetGPUBrand) == 0x000010, "Wrong size on StatInfoBaseWidget_GetGPUBrand");
//static_assert(offsetof(StatInfoBaseWidget_GetGPUBrand, ReturnValue) == 0x000000, "Member 'StatInfoBaseWidget_GetGPUBrand::ReturnValue' has a wrong offset!");

// Function UnrealExtent.StatInfoBaseWidget.GetSimulatedGraphicsCardScaleFactor
// 0x0018 (0x0018 - 0x0000)
struct StatInfoBaseWidget_GetSimulatedGraphicsCardScaleFactor final
{
public:
	class FString                                 InStatName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(StatInfoBaseWidget_GetSimulatedGraphicsCardScaleFactor) == 0x000008, "Wrong alignment on StatInfoBaseWidget_GetSimulatedGraphicsCardScaleFactor");
//static_assert(sizeof(StatInfoBaseWidget_GetSimulatedGraphicsCardScaleFactor) == 0x000018, "Wrong size on StatInfoBaseWidget_GetSimulatedGraphicsCardScaleFactor");
//static_assert(offsetof(StatInfoBaseWidget_GetSimulatedGraphicsCardScaleFactor, InStatName) == 0x000000, "Member 'StatInfoBaseWidget_GetSimulatedGraphicsCardScaleFactor::InStatName' has a wrong offset!");
//static_assert(offsetof(StatInfoBaseWidget_GetSimulatedGraphicsCardScaleFactor, ReturnValue) == 0x000010, "Member 'StatInfoBaseWidget_GetSimulatedGraphicsCardScaleFactor::ReturnValue' has a wrong offset!");

// Function UnrealExtent.StatInfoBaseWidget.SaveRecordsToFiles
// 0x0004 (0x0004 - 0x0000)
struct StatInfoBaseWidget_SaveRecordsToFiles final
{
public:
	int32                                         NeedCleanup;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(StatInfoBaseWidget_SaveRecordsToFiles) == 0x000004, "Wrong alignment on StatInfoBaseWidget_SaveRecordsToFiles");
//static_assert(sizeof(StatInfoBaseWidget_SaveRecordsToFiles) == 0x000004, "Wrong size on StatInfoBaseWidget_SaveRecordsToFiles");
//static_assert(offsetof(StatInfoBaseWidget_SaveRecordsToFiles, NeedCleanup) == 0x000000, "Member 'StatInfoBaseWidget_SaveRecordsToFiles::NeedCleanup' has a wrong offset!");

// Function UnrealExtent.StatInfoBaseWidget.StartRecord
// 0x0048 (0x0048 - 0x0000)
struct StatInfoBaseWidget_StartRecord final
{
public:
	class FString                                 FXConfig;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnitName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkillName;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetPath;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MontageLength;                                     // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(StatInfoBaseWidget_StartRecord) == 0x000008, "Wrong alignment on StatInfoBaseWidget_StartRecord");
//static_assert(sizeof(StatInfoBaseWidget_StartRecord) == 0x000048, "Wrong size on StatInfoBaseWidget_StartRecord");
//static_assert(offsetof(StatInfoBaseWidget_StartRecord, FXConfig) == 0x000000, "Member 'StatInfoBaseWidget_StartRecord::FXConfig' has a wrong offset!");
//static_assert(offsetof(StatInfoBaseWidget_StartRecord, UnitName) == 0x000010, "Member 'StatInfoBaseWidget_StartRecord::UnitName' has a wrong offset!");
//static_assert(offsetof(StatInfoBaseWidget_StartRecord, SkillName) == 0x000020, "Member 'StatInfoBaseWidget_StartRecord::SkillName' has a wrong offset!");
//static_assert(offsetof(StatInfoBaseWidget_StartRecord, AssetPath) == 0x000030, "Member 'StatInfoBaseWidget_StartRecord::AssetPath' has a wrong offset!");
//static_assert(offsetof(StatInfoBaseWidget_StartRecord, MontageLength) == 0x000040, "Member 'StatInfoBaseWidget_StartRecord::MontageLength' has a wrong offset!");

// Function UnrealExtent.TamerAsyncLineTraceManager.GetAndCleanAsyncLineTraceResult
// 0x0028 (0x0028 - 0x0000)
struct TamerAsyncLineTraceManager_GetAndCleanAsyncLineTraceResult final
{
public:
	TArray<int32>                                 OutVisibleTamers;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutInvisibleTamers;                                // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(TamerAsyncLineTraceManager_GetAndCleanAsyncLineTraceResult) == 0x000008, "Wrong alignment on TamerAsyncLineTraceManager_GetAndCleanAsyncLineTraceResult");
//static_assert(sizeof(TamerAsyncLineTraceManager_GetAndCleanAsyncLineTraceResult) == 0x000028, "Wrong size on TamerAsyncLineTraceManager_GetAndCleanAsyncLineTraceResult");
//static_assert(offsetof(TamerAsyncLineTraceManager_GetAndCleanAsyncLineTraceResult, OutVisibleTamers) == 0x000000, "Member 'TamerAsyncLineTraceManager_GetAndCleanAsyncLineTraceResult::OutVisibleTamers' has a wrong offset!");
//static_assert(offsetof(TamerAsyncLineTraceManager_GetAndCleanAsyncLineTraceResult, OutInvisibleTamers) == 0x000010, "Member 'TamerAsyncLineTraceManager_GetAndCleanAsyncLineTraceResult::OutInvisibleTamers' has a wrong offset!");
//static_assert(offsetof(TamerAsyncLineTraceManager_GetAndCleanAsyncLineTraceResult, ReturnValue) == 0x000020, "Member 'TamerAsyncLineTraceManager_GetAndCleanAsyncLineTraceResult::ReturnValue' has a wrong offset!");

// Function UnrealExtent.TamerAsyncLineTraceManager.RegisterTamerRef
// 0x0028 (0x0028 - 0x0000)
struct TamerAsyncLineTraceManager_RegisterTamerRef final
{
public:
	int32                                         InRefID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InLocation;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCapsuleHalfHeight;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(TamerAsyncLineTraceManager_RegisterTamerRef) == 0x000008, "Wrong alignment on TamerAsyncLineTraceManager_RegisterTamerRef");
//static_assert(sizeof(TamerAsyncLineTraceManager_RegisterTamerRef) == 0x000028, "Wrong size on TamerAsyncLineTraceManager_RegisterTamerRef");
//static_assert(offsetof(TamerAsyncLineTraceManager_RegisterTamerRef, InRefID) == 0x000000, "Member 'TamerAsyncLineTraceManager_RegisterTamerRef::InRefID' has a wrong offset!");
//static_assert(offsetof(TamerAsyncLineTraceManager_RegisterTamerRef, InLocation) == 0x000008, "Member 'TamerAsyncLineTraceManager_RegisterTamerRef::InLocation' has a wrong offset!");
//static_assert(offsetof(TamerAsyncLineTraceManager_RegisterTamerRef, InCapsuleHalfHeight) == 0x000020, "Member 'TamerAsyncLineTraceManager_RegisterTamerRef::InCapsuleHalfHeight' has a wrong offset!");

// Function UnrealExtent.TamerAsyncLineTraceManager.StartAsyncLineTrace
// 0x0028 (0x0028 - 0x0000)
struct TamerAsyncLineTraceManager_StartAsyncLineTrace final
{
public:
	struct FVector                                InPlayerLocation;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 InTraceTamers;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(TamerAsyncLineTraceManager_StartAsyncLineTrace) == 0x000008, "Wrong alignment on TamerAsyncLineTraceManager_StartAsyncLineTrace");
//static_assert(sizeof(TamerAsyncLineTraceManager_StartAsyncLineTrace) == 0x000028, "Wrong size on TamerAsyncLineTraceManager_StartAsyncLineTrace");
//static_assert(offsetof(TamerAsyncLineTraceManager_StartAsyncLineTrace, InPlayerLocation) == 0x000000, "Member 'TamerAsyncLineTraceManager_StartAsyncLineTrace::InPlayerLocation' has a wrong offset!");
//static_assert(offsetof(TamerAsyncLineTraceManager_StartAsyncLineTrace, InTraceTamers) == 0x000018, "Member 'TamerAsyncLineTraceManager_StartAsyncLineTrace::InTraceTamers' has a wrong offset!");

// Function UnrealExtent.TamerAsyncLineTraceManager.UnregisterTamerRef
// 0x0004 (0x0004 - 0x0000)
struct TamerAsyncLineTraceManager_UnregisterTamerRef final
{
public:
	int32                                         InRefID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(TamerAsyncLineTraceManager_UnregisterTamerRef) == 0x000004, "Wrong alignment on TamerAsyncLineTraceManager_UnregisterTamerRef");
//static_assert(sizeof(TamerAsyncLineTraceManager_UnregisterTamerRef) == 0x000004, "Wrong size on TamerAsyncLineTraceManager_UnregisterTamerRef");
//static_assert(offsetof(TamerAsyncLineTraceManager_UnregisterTamerRef, InRefID) == 0x000000, "Member 'TamerAsyncLineTraceManager_UnregisterTamerRef::InRefID' has a wrong offset!");

// Function UnrealExtent.VATAnimMachineInst.UpdateAnimProgress
// 0x0004 (0x0004 - 0x0000)
struct VATAnimMachineInst_UpdateAnimProgress final
{
public:
	float                                         InAnimProgress;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(VATAnimMachineInst_UpdateAnimProgress) == 0x000004, "Wrong alignment on VATAnimMachineInst_UpdateAnimProgress");
//static_assert(sizeof(VATAnimMachineInst_UpdateAnimProgress) == 0x000004, "Wrong size on VATAnimMachineInst_UpdateAnimProgress");
//static_assert(offsetof(VATAnimMachineInst_UpdateAnimProgress, InAnimProgress) == 0x000000, "Member 'VATAnimMachineInst_UpdateAnimProgress::InAnimProgress' has a wrong offset!");

// Function UnrealExtent.VATAnimMachineInst.UpdateAnimSpeed
// 0x0004 (0x0004 - 0x0000)
struct VATAnimMachineInst_UpdateAnimSpeed final
{
public:
	float                                         InPlaySpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(VATAnimMachineInst_UpdateAnimSpeed) == 0x000004, "Wrong alignment on VATAnimMachineInst_UpdateAnimSpeed");
//static_assert(sizeof(VATAnimMachineInst_UpdateAnimSpeed) == 0x000004, "Wrong size on VATAnimMachineInst_UpdateAnimSpeed");
//static_assert(offsetof(VATAnimMachineInst_UpdateAnimSpeed, InPlaySpeed) == 0x000000, "Member 'VATAnimMachineInst_UpdateAnimSpeed::InPlaySpeed' has a wrong offset!");

// Function UnrealExtent.VATAnimMachineInst.UpdateBlendRatio
// 0x0004 (0x0004 - 0x0000)
struct VATAnimMachineInst_UpdateBlendRatio final
{
public:
	float                                         InBlendRatio;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(VATAnimMachineInst_UpdateBlendRatio) == 0x000004, "Wrong alignment on VATAnimMachineInst_UpdateBlendRatio");
//static_assert(sizeof(VATAnimMachineInst_UpdateBlendRatio) == 0x000004, "Wrong size on VATAnimMachineInst_UpdateBlendRatio");
//static_assert(offsetof(VATAnimMachineInst_UpdateBlendRatio, InBlendRatio) == 0x000000, "Member 'VATAnimMachineInst_UpdateBlendRatio::InBlendRatio' has a wrong offset!");

// Function UnrealExtent.VATAnimMachineInst.UpdateWindDirection
// 0x0010 (0x0010 - 0x0000)
struct VATAnimMachineInst_UpdateWindDirection final
{
public:
	struct FVector2D                              InWindDirection;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(VATAnimMachineInst_UpdateWindDirection) == 0x000008, "Wrong alignment on VATAnimMachineInst_UpdateWindDirection");
//static_assert(sizeof(VATAnimMachineInst_UpdateWindDirection) == 0x000010, "Wrong size on VATAnimMachineInst_UpdateWindDirection");
//static_assert(offsetof(VATAnimMachineInst_UpdateWindDirection, InWindDirection) == 0x000000, "Member 'VATAnimMachineInst_UpdateWindDirection::InWindDirection' has a wrong offset!");

// Function UnrealExtent.VATAnimMachineInst.UpdateWindIntensity
// 0x0004 (0x0004 - 0x0000)
struct VATAnimMachineInst_UpdateWindIntensity final
{
public:
	float                                         InWindIntensity;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(VATAnimMachineInst_UpdateWindIntensity) == 0x000004, "Wrong alignment on VATAnimMachineInst_UpdateWindIntensity");
//static_assert(sizeof(VATAnimMachineInst_UpdateWindIntensity) == 0x000004, "Wrong size on VATAnimMachineInst_UpdateWindIntensity");
//static_assert(offsetof(VATAnimMachineInst_UpdateWindIntensity, InWindIntensity) == 0x000000, "Member 'VATAnimMachineInst_UpdateWindIntensity::InWindIntensity' has a wrong offset!");

// Function UnrealExtent.VATNiagaraInst.UpdateNiagaraFloatVariable
// 0x0018 (0x0018 - 0x0000)
struct VATNiagaraInst_UpdateNiagaraFloatVariable final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//static_assert(alignof(VATNiagaraInst_UpdateNiagaraFloatVariable) == 0x000008, "Wrong alignment on VATNiagaraInst_UpdateNiagaraFloatVariable");
//static_assert(sizeof(VATNiagaraInst_UpdateNiagaraFloatVariable) == 0x000018, "Wrong size on VATNiagaraInst_UpdateNiagaraFloatVariable");
//static_assert(offsetof(VATNiagaraInst_UpdateNiagaraFloatVariable, VariableName) == 0x000000, "Member 'VATNiagaraInst_UpdateNiagaraFloatVariable::VariableName' has a wrong offset!");
//static_assert(offsetof(VATNiagaraInst_UpdateNiagaraFloatVariable, TargetValue) == 0x000010, "Member 'VATNiagaraInst_UpdateNiagaraFloatVariable::TargetValue' has a wrong offset!");

// Function UnrealExtent.VATNiagaraInst.UpdateNiagaraVector2Variable
// 0x0020 (0x0020 - 0x0000)
struct VATNiagaraInst_UpdateNiagaraVector2Variable final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TargetValue;                                       // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(VATNiagaraInst_UpdateNiagaraVector2Variable) == 0x000008, "Wrong alignment on VATNiagaraInst_UpdateNiagaraVector2Variable");
//static_assert(sizeof(VATNiagaraInst_UpdateNiagaraVector2Variable) == 0x000020, "Wrong size on VATNiagaraInst_UpdateNiagaraVector2Variable");
//static_assert(offsetof(VATNiagaraInst_UpdateNiagaraVector2Variable, VariableName) == 0x000000, "Member 'VATNiagaraInst_UpdateNiagaraVector2Variable::VariableName' has a wrong offset!");
//static_assert(offsetof(VATNiagaraInst_UpdateNiagaraVector2Variable, TargetValue) == 0x000010, "Member 'VATNiagaraInst_UpdateNiagaraVector2Variable::TargetValue' has a wrong offset!");

// Function UnrealExtent.VATNiagaraInst.UpdateNiagaraVectorVariable
// 0x0028 (0x0028 - 0x0000)
struct VATNiagaraInst_UpdateNiagaraVectorVariable final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetValue;                                       // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(VATNiagaraInst_UpdateNiagaraVectorVariable) == 0x000008, "Wrong alignment on VATNiagaraInst_UpdateNiagaraVectorVariable");
//static_assert(sizeof(VATNiagaraInst_UpdateNiagaraVectorVariable) == 0x000028, "Wrong size on VATNiagaraInst_UpdateNiagaraVectorVariable");
//static_assert(offsetof(VATNiagaraInst_UpdateNiagaraVectorVariable, VariableName) == 0x000000, "Member 'VATNiagaraInst_UpdateNiagaraVectorVariable::VariableName' has a wrong offset!");
//static_assert(offsetof(VATNiagaraInst_UpdateNiagaraVectorVariable, TargetValue) == 0x000010, "Member 'VATNiagaraInst_UpdateNiagaraVectorVariable::TargetValue' has a wrong offset!");

// Function UnrealExtent.VFXAutoPlayer.BuildPlayList
// 0x0010 (0x0010 - 0x0000)
struct VFXAutoPlayer_BuildPlayList final
{
public:
	class FString                                 InFolder;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(VFXAutoPlayer_BuildPlayList) == 0x000008, "Wrong alignment on VFXAutoPlayer_BuildPlayList");
//static_assert(sizeof(VFXAutoPlayer_BuildPlayList) == 0x000010, "Wrong size on VFXAutoPlayer_BuildPlayList");
//static_assert(offsetof(VFXAutoPlayer_BuildPlayList, InFolder) == 0x000000, "Member 'VFXAutoPlayer_BuildPlayList::InFolder' has a wrong offset!");

// Function UnrealExtent.VFXAutoPlayer.CurNiagaraStatusChanged
// 0x0002 (0x0002 - 0x0000)
struct VFXAutoPlayer_CurNiagaraStatusChanged final
{
public:
	bool                                          bNumDecreased;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(VFXAutoPlayer_CurNiagaraStatusChanged) == 0x000001, "Wrong alignment on VFXAutoPlayer_CurNiagaraStatusChanged");
//static_assert(sizeof(VFXAutoPlayer_CurNiagaraStatusChanged) == 0x000002, "Wrong size on VFXAutoPlayer_CurNiagaraStatusChanged");
//static_assert(offsetof(VFXAutoPlayer_CurNiagaraStatusChanged, bNumDecreased) == 0x000000, "Member 'VFXAutoPlayer_CurNiagaraStatusChanged::bNumDecreased' has a wrong offset!");
//static_assert(offsetof(VFXAutoPlayer_CurNiagaraStatusChanged, ReturnValue) == 0x000001, "Member 'VFXAutoPlayer_CurNiagaraStatusChanged::ReturnValue' has a wrong offset!");

// Function UnrealExtent.VFXAutoPlayer.GetInternalPlayList
// 0x0010 (0x0010 - 0x0000)
struct VFXAutoPlayer_GetInternalPlayList final
{
public:
	TArray<class UNiagaraSystem*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
//static_assert(alignof(VFXAutoPlayer_GetInternalPlayList) == 0x000008, "Wrong alignment on VFXAutoPlayer_GetInternalPlayList");
//static_assert(sizeof(VFXAutoPlayer_GetInternalPlayList) == 0x000010, "Wrong size on VFXAutoPlayer_GetInternalPlayList");
//static_assert(offsetof(VFXAutoPlayer_GetInternalPlayList, ReturnValue) == 0x000000, "Member 'VFXAutoPlayer_GetInternalPlayList::ReturnValue' has a wrong offset!");

// Function UnrealExtent.VFXAutoPlayer.ListCompletedPlaying
// 0x0001 (0x0001 - 0x0000)
struct VFXAutoPlayer_ListCompletedPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(VFXAutoPlayer_ListCompletedPlaying) == 0x000001, "Wrong alignment on VFXAutoPlayer_ListCompletedPlaying");
//static_assert(sizeof(VFXAutoPlayer_ListCompletedPlaying) == 0x000001, "Wrong size on VFXAutoPlayer_ListCompletedPlaying");
//static_assert(offsetof(VFXAutoPlayer_ListCompletedPlaying, ReturnValue) == 0x000000, "Member 'VFXAutoPlayer_ListCompletedPlaying::ReturnValue' has a wrong offset!");

// Function UnrealExtent.VFXAutoPlayer.PlayNiagara
// 0x0004 (0x0004 - 0x0000)
struct VFXAutoPlayer_PlayNiagara final
{
public:
	int32                                         InTargetNiagaraPtr;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//static_assert(alignof(VFXAutoPlayer_PlayNiagara) == 0x000004, "Wrong alignment on VFXAutoPlayer_PlayNiagara");
//static_assert(sizeof(VFXAutoPlayer_PlayNiagara) == 0x000004, "Wrong size on VFXAutoPlayer_PlayNiagara");
//static_assert(offsetof(VFXAutoPlayer_PlayNiagara, InTargetNiagaraPtr) == 0x000000, "Member 'VFXAutoPlayer_PlayNiagara::InTargetNiagaraPtr' has a wrong offset!");

}

